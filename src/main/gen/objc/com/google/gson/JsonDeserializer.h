//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/main/java/com/google/gson/JsonDeserializer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleGsonJsonDeserializer")
#ifdef RESTRICT_ComGoogleGsonJsonDeserializer
#define INCLUDE_ALL_ComGoogleGsonJsonDeserializer 0
#else
#define INCLUDE_ALL_ComGoogleGsonJsonDeserializer 1
#endif
#undef RESTRICT_ComGoogleGsonJsonDeserializer

#if !defined (ComGoogleGsonJsonDeserializer_) && (INCLUDE_ALL_ComGoogleGsonJsonDeserializer || defined(INCLUDE_ComGoogleGsonJsonDeserializer))
#define ComGoogleGsonJsonDeserializer_

@class ComGoogleGsonJsonElement;
@protocol ComGoogleGsonJsonDeserializationContext;
@protocol JavaLangReflectType;

/*!
 @brief <p>Interface representing a custom deserializer for Json.
 You should write a custom
  deserializer, if you are not happy with the default deserialization done by Gson. You will
  also need to register this deserializer through 
 <code>Object)</code>.</p>
  
 <p>Let us look at example where defining a deserializer will be useful. The <code>Id</code> class
  defined below has two fields: <code>clazz</code> and <code>value</code>.</p>
  
 @code

  public class Id&lt;T&gt; {
    private final Class&lt;T&gt; clazz;
    private final long value;
    public Id(Class&lt;T&gt; clazz, long value) {
      this.clazz = clazz;
      this.value = value;
    }
    public long getValue() {
      return value;
    }  }  
  
@endcode
  
 <p>The default deserialization of <code>Id(com.foo.MyObject.class, 20L)</code> will require the
  Json string to be <code>{"clazz":com.foo.MyObject,"value":20}</code>. Suppose, you already know
  the type of the field that the <code>Id</code> will be deserialized into, and hence just want to
  deserialize it from a Json string <code>20</code>. You can achieve that by writing a custom
  deserializer:</p>
  
 @code

  class IdDeserializer implements JsonDeserializer&lt;Id&gt;() {
    public Id deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
        throws JsonParseException {
      return new Id((Class)typeOfT, id.getValue());
    } 
  
@endcode
  
 <p>You will also need to register <code>IdDeserializer</code> with Gson as follows:</p>
  
 @code

  Gson gson = new GsonBuilder().registerTypeAdapter(Id.class, new IdDeserializer()).create(); 
  
@endcode
  
 <p>New applications should prefer <code>TypeAdapter</code>, whose streaming API
  is more efficient than this interface's tree API.
 @author Inderjeet Singh
 @author Joel Leitch
 */
@protocol ComGoogleGsonJsonDeserializer < JavaObject >

/*!
 @brief Gson invokes this call-back method during deserialization when it encounters a field of the
  specified type.
 <p>In the implementation of this call-back method, you should consider invoking 
 <code>Type)</code> method to create objects
  for any non-trivial field of the returned object. However, you should never invoke it on the
  the same type passing <code>json</code> since that will cause an infinite loop (Gson will call your
  call-back method again).
 @param json The Json data being deserialized
 @param typeOfT The type of the Object to deserialize to
 @return a deserialized object of the specified type typeOfT which is a subclass of <code>T</code>
 @throw JsonParseExceptionif json is not in the expected format of <code>typeofT</code>
 */
- (id)deserializeWithComGoogleGsonJsonElement:(ComGoogleGsonJsonElement *)json
                      withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT
  withComGoogleGsonJsonDeserializationContext:(id<ComGoogleGsonJsonDeserializationContext>)context;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonJsonDeserializer)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonJsonDeserializer)

#endif

#pragma pop_macro("INCLUDE_ALL_ComGoogleGsonJsonDeserializer")
