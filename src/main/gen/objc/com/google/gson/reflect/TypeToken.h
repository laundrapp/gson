//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/main/java/com/google/gson/reflect/TypeToken.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleGsonReflectTypeToken")
#ifdef RESTRICT_ComGoogleGsonReflectTypeToken
#define INCLUDE_ALL_ComGoogleGsonReflectTypeToken 0
#else
#define INCLUDE_ALL_ComGoogleGsonReflectTypeToken 1
#endif
#undef RESTRICT_ComGoogleGsonReflectTypeToken

#if !defined (ComGoogleGsonReflectTypeToken_) && (INCLUDE_ALL_ComGoogleGsonReflectTypeToken || defined(INCLUDE_ComGoogleGsonReflectTypeToken))
#define ComGoogleGsonReflectTypeToken_

@class IOSClass;
@protocol JavaLangReflectType;

/*!
 @brief Represents a generic type <code>T</code>.Java doesn't yet provide a way to
  represent generic types, so this class does.
 Forces clients to create a
  subclass of this class which enables retrieval the type information even at
  runtime. 
 <p>For example, to create a type literal for <code>List<String></code>, you can
  create an empty anonymous inner class: 
 <p>
  <code>TypeToken<List<String>> list = new TypeToken<List<String>>() {};</code>
  
 <p>This syntax cannot be used to create type literals that have wildcard
  parameters, such as <code>Class<?></code> or <code>List<? extends CharSequence></code>.
 @author Bob Lee
 @author Sven Mawson
 @author Jesse Wilson
 */
@interface ComGoogleGsonReflectTypeToken : NSObject {
 @public
  IOSClass *rawType_;
  id<JavaLangReflectType> type_;
  jint hashCode_;
}

#pragma mark Public

- (jboolean)isEqual:(id)o;

/*!
 @brief Gets type literal for the given <code>Class</code> instance.
 */
+ (ComGoogleGsonReflectTypeToken *)getWithIOSClass:(IOSClass *)type;

/*!
 @brief Gets type literal for the given <code>Type</code> instance.
 */
+ (ComGoogleGsonReflectTypeToken *)getWithJavaLangReflectType:(id<JavaLangReflectType>)type;

/*!
 @brief Returns the raw (non-generic) type for this type.
 */
- (IOSClass *)getRawType;

/*!
 @brief Gets underlying <code>Type</code> instance.
 */
- (id<JavaLangReflectType>)getType;

- (NSUInteger)hash;

/*!
 @brief Check if this type is assignable from the given class object.
 */
- (jboolean)isAssignableFromWithIOSClass:(IOSClass *)cls;

/*!
 @brief Check if this type is assignable from the given Type.
 */
- (jboolean)isAssignableFromWithJavaLangReflectType:(id<JavaLangReflectType>)from;

/*!
 @brief Check if this type is assignable from the given type token.
 */
- (jboolean)isAssignableFromWithComGoogleGsonReflectTypeToken:(ComGoogleGsonReflectTypeToken *)token;

- (NSString *)description;

#pragma mark Protected

/*!
 @brief Constructs a new type literal.Derives represented class from type
  parameter.
 <p>Clients create an empty anonymous subclass. Doing so embeds the type
  parameter in the anonymous class's type hierarchy so we can reconstitute it
  at runtime despite erasure.
 */
- (instancetype)init;

#pragma mark Package-Private

/*!
 @brief Unsafe.Constructs a type literal manually.
 */
- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType>)type;

/*!
 @brief Returns the type from super class's type parameter in <code>form</code>
 .
 */
+ (id<JavaLangReflectType>)getSuperclassTypeParameterWithIOSClass:(IOSClass *)subclass;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonReflectTypeToken)

J2OBJC_FIELD_SETTER(ComGoogleGsonReflectTypeToken, rawType_, IOSClass *)
J2OBJC_FIELD_SETTER(ComGoogleGsonReflectTypeToken, type_, id<JavaLangReflectType>)

FOUNDATION_EXPORT void ComGoogleGsonReflectTypeToken_init(ComGoogleGsonReflectTypeToken *self);

FOUNDATION_EXPORT ComGoogleGsonReflectTypeToken *new_ComGoogleGsonReflectTypeToken_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleGsonReflectTypeToken *create_ComGoogleGsonReflectTypeToken_init(void);

FOUNDATION_EXPORT void ComGoogleGsonReflectTypeToken_initWithJavaLangReflectType_(ComGoogleGsonReflectTypeToken *self, id<JavaLangReflectType> type);

FOUNDATION_EXPORT ComGoogleGsonReflectTypeToken *new_ComGoogleGsonReflectTypeToken_initWithJavaLangReflectType_(id<JavaLangReflectType> type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleGsonReflectTypeToken *create_ComGoogleGsonReflectTypeToken_initWithJavaLangReflectType_(id<JavaLangReflectType> type);

FOUNDATION_EXPORT id<JavaLangReflectType> ComGoogleGsonReflectTypeToken_getSuperclassTypeParameterWithIOSClass_(IOSClass *subclass);

FOUNDATION_EXPORT ComGoogleGsonReflectTypeToken *ComGoogleGsonReflectTypeToken_getWithJavaLangReflectType_(id<JavaLangReflectType> type);

FOUNDATION_EXPORT ComGoogleGsonReflectTypeToken *ComGoogleGsonReflectTypeToken_getWithIOSClass_(IOSClass *type);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonReflectTypeToken)

#endif

#pragma pop_macro("INCLUDE_ALL_ComGoogleGsonReflectTypeToken")
