//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/main/java/com/google/gson/JsonStreamParser.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleGsonJsonStreamParser")
#ifdef RESTRICT_ComGoogleGsonJsonStreamParser
#define INCLUDE_ALL_ComGoogleGsonJsonStreamParser 0
#else
#define INCLUDE_ALL_ComGoogleGsonJsonStreamParser 1
#endif
#undef RESTRICT_ComGoogleGsonJsonStreamParser

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleGsonJsonStreamParser_) && (INCLUDE_ALL_ComGoogleGsonJsonStreamParser || defined(INCLUDE_ComGoogleGsonJsonStreamParser))
#define ComGoogleGsonJsonStreamParser_

#define RESTRICT_JavaUtilIterator 1
#define INCLUDE_JavaUtilIterator 1
#include "java/util/Iterator.h"

@class ComGoogleGsonJsonElement;
@class JavaIoReader;
@protocol JavaUtilFunctionConsumer;

/*!
 @brief A streaming parser that allows reading of multiple <code>JsonElement</code>s from the specified reader
  asynchronously.
 <p>This class is conditionally thread-safe (see Item 70, Effective Java second edition). To
  properly use this class across multiple threads, you will need to add some external
  synchronization.  For example:  
 @code

  JsonStreamParser parser = new JsonStreamParser("['first'] {'second':10} 'third'");
  JsonElement element;
  synchronized (parser) {  // synchronize on an object shared by threads
    if (parser.hasNext()) {
      element = parser.next();
    }  }  
  
@endcode
 @author Inderjeet Singh
 @author Joel Leitch
 @since 1.4
 */
@interface ComGoogleGsonJsonStreamParser : NSObject < JavaUtilIterator >

#pragma mark Public

/*!
 @param reader The data stream containing JSON elements concatenated to each other.
 @since 1.4
 */
- (instancetype __nonnull)initWithJavaIoReader:(JavaIoReader *)reader;

/*!
 @param json The string containing JSON elements concatenated to each other.
 @since 1.4
 */
- (instancetype __nonnull)initWithNSString:(NSString *)json;

/*!
 @brief Returns true if a <code>JsonElement</code> is available on the input for consumption
 @return true if a <code>JsonElement</code> is available on the input, false otherwise
 @since 1.4
 */
- (jboolean)hasNext;

/*!
 @brief Returns the next available <code>JsonElement</code> on the reader.Null if none available.
 @return the next available <code>JsonElement</code> on the reader. Null if none available.
 @throw JsonParseExceptionif the incoming stream is malformed JSON.
 @since 1.4
 */
- (ComGoogleGsonJsonElement *)next;

/*!
 @brief This optional <code>Iterator</code> method is not relevant for stream parsing and hence is not
  implemented.
 @since 1.4
 */
- (void)remove;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonJsonStreamParser)

FOUNDATION_EXPORT void ComGoogleGsonJsonStreamParser_initWithNSString_(ComGoogleGsonJsonStreamParser *self, NSString *json);

FOUNDATION_EXPORT ComGoogleGsonJsonStreamParser *new_ComGoogleGsonJsonStreamParser_initWithNSString_(NSString *json) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleGsonJsonStreamParser *create_ComGoogleGsonJsonStreamParser_initWithNSString_(NSString *json);

FOUNDATION_EXPORT void ComGoogleGsonJsonStreamParser_initWithJavaIoReader_(ComGoogleGsonJsonStreamParser *self, JavaIoReader *reader);

FOUNDATION_EXPORT ComGoogleGsonJsonStreamParser *new_ComGoogleGsonJsonStreamParser_initWithJavaIoReader_(JavaIoReader *reader) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleGsonJsonStreamParser *create_ComGoogleGsonJsonStreamParser_initWithJavaIoReader_(JavaIoReader *reader);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonJsonStreamParser)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComGoogleGsonJsonStreamParser")
