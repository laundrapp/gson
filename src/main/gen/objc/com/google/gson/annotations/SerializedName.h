//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/main/java/com/google/gson/annotations/SerializedName.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleGsonAnnotationsSerializedName")
#ifdef RESTRICT_ComGoogleGsonAnnotationsSerializedName
#define INCLUDE_ALL_ComGoogleGsonAnnotationsSerializedName 0
#else
#define INCLUDE_ALL_ComGoogleGsonAnnotationsSerializedName 1
#endif
#undef RESTRICT_ComGoogleGsonAnnotationsSerializedName

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleGsonAnnotationsSerializedName_) && (INCLUDE_ALL_ComGoogleGsonAnnotationsSerializedName || defined(INCLUDE_ComGoogleGsonAnnotationsSerializedName))
#define ComGoogleGsonAnnotationsSerializedName_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

/*!
 @brief An annotation that indicates this member should be serialized to JSON with
  the provided name value as its field name.
 <p>This annotation will override any <code>com.google.gson.FieldNamingPolicy</code>, including
  the default field naming policy, that may have been set on the <code>com.google.gson.Gson</code>
  instance.  A different naming policy can set using the <code>GsonBuilder</code> class.  See 
 <code>com.google.gson.GsonBuilder</code>
  for more information.</p>
  
 <p>Here is an example of how this annotation is meant to be used:</p>
  @code

  public class SomeClassWithFields {
      &#64SerializedName("name") private final String someField;
    private final String someOtherField;
    public SomeClassWithFields(String a, String b) {
      this.someField = a;
      this.someOtherField = b;
    }  }  
  
@endcode
  
 <p>The following shows the output that is generated when serializing an instance of the
  above example class:</p>
  @code

  SomeClassWithFields objectToSerialize = new SomeClassWithFields("a", "b");
  Gson gson = new Gson();
  String jsonRepresentation = gson.toJson(objectToSerialize);
  System.out.println(jsonRepresentation);
  ===== OUTPUT =====
  {"name":"a","someOtherField":"b"} 
  
@endcode
  
 <p>NOTE: The value you specify in this annotation must be a valid JSON field name.</p>
 - seealso: com.google.gson.FieldNamingPolicy
 @author Inderjeet Singh
 @author Joel Leitch
 */
@protocol ComGoogleGsonAnnotationsSerializedName < JavaLangAnnotationAnnotation >

@property (readonly) NSString *value;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface ComGoogleGsonAnnotationsSerializedName : NSObject < ComGoogleGsonAnnotationsSerializedName > {
 @public
  NSString *value_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonAnnotationsSerializedName)

FOUNDATION_EXPORT id<ComGoogleGsonAnnotationsSerializedName> create_ComGoogleGsonAnnotationsSerializedName(NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonAnnotationsSerializedName)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComGoogleGsonAnnotationsSerializedName")
