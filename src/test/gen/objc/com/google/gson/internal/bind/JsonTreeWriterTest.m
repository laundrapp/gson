//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java
//

#include "J2ObjC_source.h"
#include "com/google/gson/JsonElement.h"
#include "com/google/gson/JsonNull.h"
#include "com/google/gson/internal/bind/JsonTreeWriter.h"
#include "com/google/gson/internal/bind/JsonTreeWriterTest.h"
#include "com/google/gson/stream/JsonWriter.h"
#include "java/io/IOException.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "junit/framework/TestCase.h"

@implementation ComGoogleGsonInternalBindJsonTreeWriterTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonInternalBindJsonTreeWriterTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)testArray {
  ComGoogleGsonInternalBindJsonTreeWriter *writer = create_ComGoogleGsonInternalBindJsonTreeWriter_init();
  [writer beginArray];
  [writer valueWithLong:1];
  [writer valueWithLong:2];
  [writer valueWithLong:3];
  [writer endArray];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[1,2,3]", [((ComGoogleGsonJsonElement *) nil_chk([writer get])) description]);
}

- (void)testNestedArray {
  ComGoogleGsonInternalBindJsonTreeWriter *writer = create_ComGoogleGsonInternalBindJsonTreeWriter_init();
  [writer beginArray];
  [writer beginArray];
  [writer endArray];
  [writer beginArray];
  [writer beginArray];
  [writer endArray];
  [writer endArray];
  [writer endArray];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[[],[[]]]", [((ComGoogleGsonJsonElement *) nil_chk([writer get])) description]);
}

- (void)testObject {
  ComGoogleGsonInternalBindJsonTreeWriter *writer = create_ComGoogleGsonInternalBindJsonTreeWriter_init();
  [writer beginObject];
  [((ComGoogleGsonStreamJsonWriter *) nil_chk([writer nameWithNSString:@"A"])) valueWithLong:1];
  [((ComGoogleGsonStreamJsonWriter *) nil_chk([writer nameWithNSString:@"B"])) valueWithLong:2];
  [writer endObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"{\"A\":1,\"B\":2}", [((ComGoogleGsonJsonElement *) nil_chk([writer get])) description]);
}

- (void)testNestedObject {
  ComGoogleGsonInternalBindJsonTreeWriter *writer = create_ComGoogleGsonInternalBindJsonTreeWriter_init();
  [writer beginObject];
  [writer nameWithNSString:@"A"];
  [writer beginObject];
  [writer nameWithNSString:@"B"];
  [writer beginObject];
  [writer endObject];
  [writer endObject];
  [writer nameWithNSString:@"C"];
  [writer beginObject];
  [writer endObject];
  [writer endObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"{\"A\":{\"B\":{}},\"C\":{}}", [((ComGoogleGsonJsonElement *) nil_chk([writer get])) description]);
}

- (void)testWriteAfterClose {
  ComGoogleGsonInternalBindJsonTreeWriter *writer = create_ComGoogleGsonInternalBindJsonTreeWriter_init();
  [writer setLenientWithBoolean:true];
  [writer beginArray];
  [writer valueWithNSString:@"A"];
  [writer endArray];
  [writer close];
  @try {
    [writer beginArray];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
}

- (void)testPrematureClose {
  ComGoogleGsonInternalBindJsonTreeWriter *writer = create_ComGoogleGsonInternalBindJsonTreeWriter_init();
  [writer setLenientWithBoolean:true];
  [writer beginArray];
  @try {
    [writer close];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testSerializeNullsFalse {
  ComGoogleGsonInternalBindJsonTreeWriter *writer = create_ComGoogleGsonInternalBindJsonTreeWriter_init();
  [writer setSerializeNullsWithBoolean:false];
  [writer beginObject];
  [writer nameWithNSString:@"A"];
  [writer nullValue];
  [writer endObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"{}", [((ComGoogleGsonJsonElement *) nil_chk([writer get])) description]);
}

- (void)testSerializeNullsTrue {
  ComGoogleGsonInternalBindJsonTreeWriter *writer = create_ComGoogleGsonInternalBindJsonTreeWriter_init();
  [writer setSerializeNullsWithBoolean:true];
  [writer beginObject];
  [writer nameWithNSString:@"A"];
  [writer nullValue];
  [writer endObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"{\"A\":null}", [((ComGoogleGsonJsonElement *) nil_chk([writer get])) description]);
}

- (void)testEmptyWriter {
  ComGoogleGsonInternalBindJsonTreeWriter *writer = create_ComGoogleGsonInternalBindJsonTreeWriter_init();
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadStatic(ComGoogleGsonJsonNull, INSTANCE), [writer get]);
}

- (void)testLenientNansAndInfinities {
  ComGoogleGsonInternalBindJsonTreeWriter *writer = create_ComGoogleGsonInternalBindJsonTreeWriter_init();
  [writer setLenientWithBoolean:true];
  [writer beginArray];
  [writer valueWithDouble:JavaLangDouble_NaN];
  [writer valueWithDouble:JavaLangDouble_NEGATIVE_INFINITY];
  [writer valueWithDouble:JavaLangDouble_POSITIVE_INFINITY];
  [writer endArray];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[NaN,-Infinity,Infinity]", [((ComGoogleGsonJsonElement *) nil_chk([writer get])) description]);
}

- (void)testStrictNansAndInfinities {
  ComGoogleGsonInternalBindJsonTreeWriter *writer = create_ComGoogleGsonInternalBindJsonTreeWriter_init();
  [writer setLenientWithBoolean:false];
  [writer beginArray];
  @try {
    [writer valueWithDouble:JavaLangDouble_NaN];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
  @try {
    [writer valueWithDouble:JavaLangDouble_NEGATIVE_INFINITY];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
  @try {
    [writer valueWithDouble:JavaLangDouble_POSITIVE_INFINITY];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
}

- (void)testStrictBoxedNansAndInfinities {
  ComGoogleGsonInternalBindJsonTreeWriter *writer = create_ComGoogleGsonInternalBindJsonTreeWriter_init();
  [writer setLenientWithBoolean:false];
  [writer beginArray];
  @try {
    [writer valueWithNSNumber:create_JavaLangDouble_initWithDouble_(JavaLangDouble_NaN)];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
  @try {
    [writer valueWithNSNumber:create_JavaLangDouble_initWithDouble_(JavaLangDouble_NEGATIVE_INFINITY)];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
  @try {
    [writer valueWithNSNumber:create_JavaLangDouble_initWithDouble_(JavaLangDouble_POSITIVE_INFINITY)];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(testArray);
  methods[2].selector = @selector(testNestedArray);
  methods[3].selector = @selector(testObject);
  methods[4].selector = @selector(testNestedObject);
  methods[5].selector = @selector(testWriteAfterClose);
  methods[6].selector = @selector(testPrematureClose);
  methods[7].selector = @selector(testSerializeNullsFalse);
  methods[8].selector = @selector(testSerializeNullsTrue);
  methods[9].selector = @selector(testEmptyWriter);
  methods[10].selector = @selector(testLenientNansAndInfinities);
  methods[11].selector = @selector(testStrictNansAndInfinities);
  methods[12].selector = @selector(testStrictBoxedNansAndInfinities);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoIOException;", "LJavaLangException;" };
  static const J2ObjcClassInfo _ComGoogleGsonInternalBindJsonTreeWriterTest = { "JsonTreeWriterTest", "com.google.gson.internal.bind", ptrTable, methods, NULL, 7, 0x11, 13, 0, -1, -1, -1, -1, -1 };
  return &_ComGoogleGsonInternalBindJsonTreeWriterTest;
}

@end

void ComGoogleGsonInternalBindJsonTreeWriterTest_init(ComGoogleGsonInternalBindJsonTreeWriterTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComGoogleGsonInternalBindJsonTreeWriterTest *new_ComGoogleGsonInternalBindJsonTreeWriterTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonInternalBindJsonTreeWriterTest, init)
}

ComGoogleGsonInternalBindJsonTreeWriterTest *create_ComGoogleGsonInternalBindJsonTreeWriterTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonInternalBindJsonTreeWriterTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonInternalBindJsonTreeWriterTest)
