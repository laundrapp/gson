//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java
//

#include "J2ObjC_source.h"
#include "com/google/gson/JsonElement.h"
#include "com/google/gson/JsonParser.h"
#include "com/google/gson/internal/bind/JsonElementReaderTest.h"
#include "com/google/gson/internal/bind/JsonTreeReader.h"
#include "com/google/gson/stream/JsonToken.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NumberFormatException.h"
#include "junit/framework/TestCase.h"

@implementation ComGoogleGsonInternalBindJsonElementReaderTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComGoogleGsonInternalBindJsonElementReaderTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)testNumbers {
  ComGoogleGsonJsonElement *element = [create_ComGoogleGsonJsonParser_init() parseWithNSString:@"[1, 2, 3]"];
  ComGoogleGsonInternalBindJsonTreeReader *reader = create_ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(element);
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(1, [reader nextInt]);
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(2LL, [reader nextLong]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(3.0), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  [reader endArray];
}

- (void)testLenientNansAndInfinities {
  ComGoogleGsonJsonElement *element = [create_ComGoogleGsonJsonParser_init() parseWithNSString:@"[NaN, -Infinity, Infinity]"];
  ComGoogleGsonInternalBindJsonTreeReader *reader = create_ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(element);
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertTrueWithBoolean_(JavaLangDouble_isNaNWithDouble_([reader nextDouble]));
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(JavaLangDouble_NEGATIVE_INFINITY), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(JavaLangDouble_POSITIVE_INFINITY), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  [reader endArray];
}

- (void)testStrictNansAndInfinities {
  ComGoogleGsonJsonElement *element = [create_ComGoogleGsonJsonParser_init() parseWithNSString:@"[NaN, -Infinity, Infinity]"];
  ComGoogleGsonInternalBindJsonTreeReader *reader = create_ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(element);
  [reader setLenientWithBoolean:false];
  [reader beginArray];
  @try {
    [reader nextDouble];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangNumberFormatException *e) {
  }
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"NaN", [reader nextString]);
  @try {
    [reader nextDouble];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangNumberFormatException *e) {
  }
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"-Infinity", [reader nextString]);
  @try {
    [reader nextDouble];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangNumberFormatException *e) {
  }
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"Infinity", [reader nextString]);
  [reader endArray];
}

- (void)testNumbersFromStrings {
  ComGoogleGsonJsonElement *element = [create_ComGoogleGsonJsonParser_init() parseWithNSString:@"[\"1\", \"2\", \"3\"]"];
  ComGoogleGsonInternalBindJsonTreeReader *reader = create_ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(element);
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(1, [reader nextInt]);
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(2LL, [reader nextLong]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(3.0), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  [reader endArray];
}

- (void)testStringsFromNumbers {
  ComGoogleGsonJsonElement *element = [create_ComGoogleGsonJsonParser_init() parseWithNSString:@"[1]"];
  ComGoogleGsonInternalBindJsonTreeReader *reader = create_ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(element);
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"1", [reader nextString]);
  [reader endArray];
}

- (void)testBooleans {
  ComGoogleGsonJsonElement *element = [create_ComGoogleGsonJsonParser_init() parseWithNSString:@"[true, false]"];
  ComGoogleGsonInternalBindJsonTreeReader *reader = create_ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(element);
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(false, [reader nextBoolean]);
  [reader endArray];
}

- (void)testNulls {
  ComGoogleGsonJsonElement *element = [create_ComGoogleGsonJsonParser_init() parseWithNSString:@"[null,null]"];
  ComGoogleGsonInternalBindJsonTreeReader *reader = create_ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(element);
  [reader beginArray];
  [reader nextNull];
  [reader nextNull];
  [reader endArray];
}

- (void)testStrings {
  ComGoogleGsonJsonElement *element = [create_ComGoogleGsonJsonParser_init() parseWithNSString:@"[\"A\",\"B\"]"];
  ComGoogleGsonInternalBindJsonTreeReader *reader = create_ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(element);
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"A", [reader nextString]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"B", [reader nextString]);
  [reader endArray];
}

- (void)testArray {
  ComGoogleGsonJsonElement *element = [create_ComGoogleGsonJsonParser_init() parseWithNSString:@"[1, 2, 3]"];
  ComGoogleGsonInternalBindJsonTreeReader *reader = create_ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(element);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_ARRAY), [reader peek]);
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER), [reader peek]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(1, [reader nextInt]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER), [reader peek]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(2, [reader nextInt]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER), [reader peek]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(3, [reader nextInt]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_ARRAY), [reader peek]);
  [reader endArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testObject {
  ComGoogleGsonJsonElement *element = [create_ComGoogleGsonJsonParser_init() parseWithNSString:@"{\"A\": 1, \"B\": 2}"];
  ComGoogleGsonInternalBindJsonTreeReader *reader = create_ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(element);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), [reader peek]);
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), [reader peek]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"A", [reader nextName]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER), [reader peek]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(1, [reader nextInt]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), [reader peek]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"B", [reader nextName]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER), [reader peek]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(2, [reader nextInt]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_OBJECT), [reader peek]);
  [reader endObject];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testEmptyArray {
  ComGoogleGsonJsonElement *element = [create_ComGoogleGsonJsonParser_init() parseWithNSString:@"[]"];
  ComGoogleGsonInternalBindJsonTreeReader *reader = create_ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(element);
  [reader beginArray];
  [reader endArray];
}

- (void)testNestedArrays {
  ComGoogleGsonJsonElement *element = [create_ComGoogleGsonJsonParser_init() parseWithNSString:@"[[],[[]]]"];
  ComGoogleGsonInternalBindJsonTreeReader *reader = create_ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(element);
  [reader beginArray];
  [reader beginArray];
  [reader endArray];
  [reader beginArray];
  [reader beginArray];
  [reader endArray];
  [reader endArray];
  [reader endArray];
}

- (void)testNestedObjects {
  ComGoogleGsonJsonElement *element = [create_ComGoogleGsonJsonParser_init() parseWithNSString:@"{\"A\":{},\"B\":{\"C\":{}}}"];
  ComGoogleGsonInternalBindJsonTreeReader *reader = create_ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(element);
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"A", [reader nextName]);
  [reader beginObject];
  [reader endObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"B", [reader nextName]);
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"C", [reader nextName]);
  [reader beginObject];
  [reader endObject];
  [reader endObject];
  [reader endObject];
}

- (void)testEmptyObject {
  ComGoogleGsonJsonElement *element = [create_ComGoogleGsonJsonParser_init() parseWithNSString:@"{}"];
  ComGoogleGsonInternalBindJsonTreeReader *reader = create_ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(element);
  [reader beginObject];
  [reader endObject];
}

- (void)testSkipValue {
  ComGoogleGsonJsonElement *element = [create_ComGoogleGsonJsonParser_init() parseWithNSString:@"[\"A\",{\"B\":[[]]},\"C\",[[]],\"D\",null]"];
  ComGoogleGsonInternalBindJsonTreeReader *reader = create_ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(element);
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"A", [reader nextString]);
  [reader skipValue];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"C", [reader nextString]);
  [reader skipValue];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"D", [reader nextString]);
  [reader skipValue];
  [reader endArray];
}

- (void)testWrongType {
  ComGoogleGsonJsonElement *element = [create_ComGoogleGsonJsonParser_init() parseWithNSString:@"[[],\"A\"]"];
  ComGoogleGsonInternalBindJsonTreeReader *reader = create_ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(element);
  [reader beginArray];
  @try {
    [reader nextBoolean];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    [reader nextNull];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    [reader nextString];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    [reader nextInt];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    [reader nextLong];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    [reader nextDouble];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    [reader nextName];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    [reader beginObject];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    [reader endArray];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    [reader endObject];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  [reader beginArray];
  [reader endArray];
  @try {
    [reader nextBoolean];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    [reader nextNull];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    [reader nextInt];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangNumberFormatException *expected) {
  }
  @try {
    [reader nextLong];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangNumberFormatException *expected) {
  }
  @try {
    [reader nextDouble];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangNumberFormatException *expected) {
  }
  @try {
    [reader nextName];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"A", [reader nextString]);
  [reader endArray];
}

- (void)testEarlyClose {
  ComGoogleGsonJsonElement *element = [create_ComGoogleGsonJsonParser_init() parseWithNSString:@"[1, 2, 3]"];
  ComGoogleGsonInternalBindJsonTreeReader *reader = create_ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(element);
  [reader beginArray];
  [reader close];
  @try {
    [reader peek];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(testNumbers);
  methods[2].selector = @selector(testLenientNansAndInfinities);
  methods[3].selector = @selector(testStrictNansAndInfinities);
  methods[4].selector = @selector(testNumbersFromStrings);
  methods[5].selector = @selector(testStringsFromNumbers);
  methods[6].selector = @selector(testBooleans);
  methods[7].selector = @selector(testNulls);
  methods[8].selector = @selector(testStrings);
  methods[9].selector = @selector(testArray);
  methods[10].selector = @selector(testObject);
  methods[11].selector = @selector(testEmptyArray);
  methods[12].selector = @selector(testNestedArrays);
  methods[13].selector = @selector(testNestedObjects);
  methods[14].selector = @selector(testEmptyObject);
  methods[15].selector = @selector(testSkipValue);
  methods[16].selector = @selector(testWrongType);
  methods[17].selector = @selector(testEarlyClose);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoIOException;" };
  static const J2ObjcClassInfo _ComGoogleGsonInternalBindJsonElementReaderTest = { "JsonElementReaderTest", "com.google.gson.internal.bind", ptrTable, methods, NULL, 7, 0x11, 18, 0, -1, -1, -1, -1, -1 };
  return &_ComGoogleGsonInternalBindJsonElementReaderTest;
}

@end

void ComGoogleGsonInternalBindJsonElementReaderTest_init(ComGoogleGsonInternalBindJsonElementReaderTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComGoogleGsonInternalBindJsonElementReaderTest *new_ComGoogleGsonInternalBindJsonElementReaderTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonInternalBindJsonElementReaderTest, init)
}

ComGoogleGsonInternalBindJsonElementReaderTest *create_ComGoogleGsonInternalBindJsonElementReaderTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonInternalBindJsonElementReaderTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonInternalBindJsonElementReaderTest)
