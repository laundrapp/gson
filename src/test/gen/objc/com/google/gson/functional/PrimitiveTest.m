//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/gson/Gson.h"
#include "com/google/gson/GsonBuilder.h"
#include "com/google/gson/JsonPrimitive.h"
#include "com/google/gson/JsonSyntaxException.h"
#include "com/google/gson/LongSerializationPolicy.h"
#include "com/google/gson/functional/PrimitiveTest.h"
#include "com/google/gson/reflect/TypeToken.h"
#include "java/io/Serializable.h"
#include "java/io/StringReader.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/lang/reflect/Type.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "junit/framework/TestCase.h"

@interface ComGoogleGsonFunctionalPrimitiveTest () {
 @public
  ComGoogleGsonGson *gson_;
}

- (NSString *)extractElementFromArrayWithNSString:(NSString *)json;

@end

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalPrimitiveTest, gson_, ComGoogleGsonGson *)

__attribute__((unused)) static NSString *ComGoogleGsonFunctionalPrimitiveTest_extractElementFromArrayWithNSString_(ComGoogleGsonFunctionalPrimitiveTest *self, NSString *json);

@interface ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField : NSObject {
 @public
  JavaLangInteger *i_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField)

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField, i_, JavaLangInteger *)

__attribute__((unused)) static void ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField_init(ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField *self);

__attribute__((unused)) static ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField *new_ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField *create_ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField)

@interface ComGoogleGsonFunctionalPrimitiveTest_1 : ComGoogleGsonReflectTypeToken

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalPrimitiveTest_1)

__attribute__((unused)) static void ComGoogleGsonFunctionalPrimitiveTest_1_init(ComGoogleGsonFunctionalPrimitiveTest_1 *self);

__attribute__((unused)) static ComGoogleGsonFunctionalPrimitiveTest_1 *new_ComGoogleGsonFunctionalPrimitiveTest_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalPrimitiveTest_1 *create_ComGoogleGsonFunctionalPrimitiveTest_1_init(void);

@implementation ComGoogleGsonFunctionalPrimitiveTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalPrimitiveTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  [super setUp];
  JreStrongAssignAndConsume(&gson_, new_ComGoogleGsonGson_init());
}

- (void)testPrimitiveIntegerAutoboxedSerialization {
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"1", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangInteger_valueOfWithInt_(1)]);
}

- (void)testPrimitiveIntegerAutoboxedDeserialization {
  jint expected = 1;
  jint actual = [((JavaLangInteger *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"1" withIOSClass:[IOSClass intClass]])) intValue];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(expected, actual);
  actual = [((JavaLangInteger *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"1" withIOSClass:JavaLangInteger_class_()])) intValue];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(expected, actual);
}

- (void)testByteSerialization {
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"1", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangInteger_valueOfWithInt_(1) withJavaLangReflectType:[IOSClass byteClass]]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"1", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangInteger_valueOfWithInt_(1) withJavaLangReflectType:JavaLangByte_class_()]);
}

- (void)testShortSerialization {
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"1", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangInteger_valueOfWithInt_(1) withJavaLangReflectType:[IOSClass shortClass]]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"1", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangInteger_valueOfWithInt_(1) withJavaLangReflectType:JavaLangShort_class_()]);
}

- (void)testByteDeserialization {
  JavaLangByte *target = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"1" withIOSClass:JavaLangByte_class_()];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(1, [((JavaLangByte *) nil_chk(target)) charValue]);
  jbyte primitive = [((JavaLangByte *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"1" withIOSClass:[IOSClass byteClass]])) charValue];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(1, primitive);
}

- (void)testPrimitiveIntegerAutoboxedInASingleElementArraySerialization {
  IOSIntArray *target = [IOSIntArray arrayWithInts:(jint[]){ -9332 } count:1];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[-9332]", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[-9332]", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target withJavaLangReflectType:IOSClass_intArray(1)]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[-9332]", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target withJavaLangReflectType:IOSClass_arrayType(JavaLangInteger_class_(), 1)]);
}

- (void)testReallyLongValuesSerialization {
  jlong value = 333961828784581LL;
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"333961828784581", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangLong_valueOfWithLong_(value)]);
}

- (void)testReallyLongValuesDeserialization {
  NSString *json = @"333961828784581";
  jlong value = [((JavaLangLong *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:JavaLangLong_class_()])) longLongValue];
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(333961828784581LL, value);
}

- (void)testPrimitiveLongAutoboxedSerialization {
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"1", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangLong_valueOfWithLong_(1LL) withJavaLangReflectType:[IOSClass longClass]]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"1", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangLong_valueOfWithLong_(1LL) withJavaLangReflectType:JavaLangLong_class_()]);
}

- (void)testPrimitiveLongAutoboxedDeserialization {
  jlong expected = 1LL;
  jlong actual = [((JavaLangLong *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"1" withIOSClass:[IOSClass longClass]])) longLongValue];
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(expected, actual);
  actual = [((JavaLangLong *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"1" withIOSClass:JavaLangLong_class_()])) longLongValue];
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(expected, actual);
}

- (void)testPrimitiveLongAutoboxedInASingleElementArraySerialization {
  IOSLongArray *target = [IOSLongArray arrayWithLongs:(jlong[]){ -23LL } count:1];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[-23]", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[-23]", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target withJavaLangReflectType:IOSClass_longArray(1)]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[-23]", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target withJavaLangReflectType:IOSClass_arrayType(JavaLangLong_class_(), 1)]);
}

- (void)testPrimitiveBooleanAutoboxedSerialization {
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"true", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangBoolean_valueOfWithBoolean_(true)]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"false", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangBoolean_valueOfWithBoolean_(false)]);
}

- (void)testBooleanDeserialization {
  jboolean value = [((JavaLangBoolean *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"false" withIOSClass:[IOSClass booleanClass]])) booleanValue];
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(false, value);
  value = [((JavaLangBoolean *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"true" withIOSClass:[IOSClass booleanClass]])) booleanValue];
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, value);
}

- (void)testPrimitiveBooleanAutoboxedInASingleElementArraySerialization {
  IOSBooleanArray *target = [IOSBooleanArray arrayWithBooleans:(jboolean[]){ false } count:1];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[false]", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[false]", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target withJavaLangReflectType:IOSClass_booleanArray(1)]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[false]", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target withJavaLangReflectType:IOSClass_arrayType(JavaLangBoolean_class_(), 1)]);
}

- (void)testNumberSerialization {
  NSNumber *expected = JavaLangLong_valueOfWithLong_(1LL);
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:expected];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_([expected description], json);
  json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:expected withJavaLangReflectType:NSNumber_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_([expected description], json);
}

- (void)testNumberDeserialization {
  NSString *json = @"1";
  NSNumber *expected = create_JavaLangInteger_initWithNSString_(json);
  NSNumber *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:NSNumber_class_()];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_([expected intValue], [((NSNumber *) nil_chk(actual)) intValue]);
  json = NSString_java_valueOfLong_(JavaLangLong_MAX_VALUE);
  expected = create_JavaLangLong_initWithNSString_(json);
  actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:NSNumber_class_()];
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_([expected longLongValue], [((NSNumber *) nil_chk(actual)) longLongValue]);
  json = @"1.0";
  actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:NSNumber_class_()];
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(1LL, [((NSNumber *) nil_chk(actual)) longLongValue]);
}

- (void)testPrimitiveDoubleAutoboxedSerialization {
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"-122.08234335", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangDouble_valueOfWithDouble_(-122.08234335)]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"122.08112002", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:create_JavaLangDouble_initWithDouble_(122.08112002)]);
}

- (void)testPrimitiveDoubleAutoboxedDeserialization {
  jdouble actual = [((JavaLangDouble *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"-122.08858585" withIOSClass:[IOSClass doubleClass]])) doubleValue];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(-122.08858585), JavaLangDouble_valueOfWithDouble_(actual));
  actual = [((JavaLangDouble *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"122.023900008000" withIOSClass:JavaLangDouble_class_()])) doubleValue];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(122.023900008), JavaLangDouble_valueOfWithDouble_(actual));
}

- (void)testPrimitiveDoubleAutoboxedInASingleElementArraySerialization {
  IOSDoubleArray *target = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ -122.08 } count:1];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[-122.08]", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[-122.08]", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target withJavaLangReflectType:IOSClass_doubleArray(1)]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[-122.08]", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target withJavaLangReflectType:IOSClass_arrayType(JavaLangDouble_class_(), 1)]);
}

- (void)testDoubleAsStringRepresentationDeserialization {
  NSString *doubleValue = @"1.0043E+5";
  JavaLangDouble *expected = JavaLangDouble_valueOfWithNSString_(doubleValue);
  JavaLangDouble *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:doubleValue withIOSClass:JavaLangDouble_class_()];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(expected, actual);
  jdouble actual1 = [((JavaLangDouble *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:doubleValue withIOSClass:[IOSClass doubleClass]])) doubleValue];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_([((JavaLangDouble *) nil_chk(expected)) doubleValue]), JavaLangDouble_valueOfWithDouble_(actual1));
}

- (void)testDoubleNoFractAsStringRepresentationDeserialization {
  NSString *doubleValue = @"1E+5";
  JavaLangDouble *expected = JavaLangDouble_valueOfWithNSString_(doubleValue);
  JavaLangDouble *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:doubleValue withIOSClass:JavaLangDouble_class_()];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(expected, actual);
  jdouble actual1 = [((JavaLangDouble *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:doubleValue withIOSClass:[IOSClass doubleClass]])) doubleValue];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_([((JavaLangDouble *) nil_chk(expected)) doubleValue]), JavaLangDouble_valueOfWithDouble_(actual1));
}

- (void)testLargeDoubleDeserialization {
  NSString *doubleValue = @"1.234567899E8";
  JavaLangDouble *expected = JavaLangDouble_valueOfWithNSString_(doubleValue);
  JavaLangDouble *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:doubleValue withIOSClass:JavaLangDouble_class_()];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(expected, actual);
  jdouble actual1 = [((JavaLangDouble *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:doubleValue withIOSClass:[IOSClass doubleClass]])) doubleValue];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_([((JavaLangDouble *) nil_chk(expected)) doubleValue]), JavaLangDouble_valueOfWithDouble_(actual1));
}

- (void)testBigDecimalSerialization {
  JavaMathBigDecimal *target = create_JavaMathBigDecimal_initWithNSString_(@"-122.0e-21");
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(target, create_JavaMathBigDecimal_initWithNSString_(json));
}

- (void)testBigDecimalDeserialization {
  JavaMathBigDecimal *target = create_JavaMathBigDecimal_initWithNSString_(@"-122.0e-21");
  NSString *json = @"-122.0e-21";
  JunitFrameworkTestCase_assertEqualsWithId_withId_(target, [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:JavaMathBigDecimal_class_()]);
}

- (void)testBigDecimalInASingleElementArraySerialization {
  IOSObjectArray *target = [IOSObjectArray arrayWithObjects:(id[]){ create_JavaMathBigDecimal_initWithNSString_(@"-122.08e-21") } count:1 type:JavaMathBigDecimal_class_()];
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target];
  NSString *actual = ComGoogleGsonFunctionalPrimitiveTest_extractElementFromArrayWithNSString_(self, json);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(IOSObjectArray_Get(target, 0), create_JavaMathBigDecimal_initWithNSString_(actual));
  json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target withJavaLangReflectType:IOSClass_arrayType(JavaMathBigDecimal_class_(), 1)];
  actual = ComGoogleGsonFunctionalPrimitiveTest_extractElementFromArrayWithNSString_(self, json);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(IOSObjectArray_Get(target, 0), create_JavaMathBigDecimal_initWithNSString_(actual));
}

- (void)testSmallValueForBigDecimalSerialization {
  JavaMathBigDecimal *target = create_JavaMathBigDecimal_initWithNSString_(@"1.55");
  NSString *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_([target description], actual);
}

- (void)testSmallValueForBigDecimalDeserialization {
  JavaMathBigDecimal *expected = create_JavaMathBigDecimal_initWithNSString_(@"1.55");
  JavaMathBigDecimal *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"1.55" withIOSClass:JavaMathBigDecimal_class_()];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(expected, actual);
}

- (void)testBigDecimalPreservePrecisionSerialization {
  NSString *expectedValue = @"1.000";
  JavaMathBigDecimal *obj = create_JavaMathBigDecimal_initWithNSString_(expectedValue);
  NSString *actualValue = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:obj];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(expectedValue, actualValue);
}

- (void)testBigDecimalPreservePrecisionDeserialization {
  NSString *json = @"1.000";
  JavaMathBigDecimal *expected = create_JavaMathBigDecimal_initWithNSString_(json);
  JavaMathBigDecimal *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:JavaMathBigDecimal_class_()];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(expected, actual);
}

- (void)testBigDecimalAsStringRepresentationDeserialization {
  NSString *doubleValue = @"0.05E+5";
  JavaMathBigDecimal *expected = create_JavaMathBigDecimal_initWithNSString_(doubleValue);
  JavaMathBigDecimal *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:doubleValue withIOSClass:JavaMathBigDecimal_class_()];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(expected, actual);
}

- (void)testBigDecimalNoFractAsStringRepresentationDeserialization {
  NSString *doubleValue = @"5E+5";
  JavaMathBigDecimal *expected = create_JavaMathBigDecimal_initWithNSString_(doubleValue);
  JavaMathBigDecimal *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:doubleValue withIOSClass:JavaMathBigDecimal_class_()];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(expected, actual);
}

- (void)testBigIntegerSerialization {
  JavaMathBigInteger *target = create_JavaMathBigInteger_initWithNSString_(@"12121211243123245845384534687435634558945453489543985435");
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_([target description], [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target]);
}

- (void)testBigIntegerDeserialization {
  NSString *json = @"12121211243123245845384534687435634558945453489543985435";
  JavaMathBigInteger *target = create_JavaMathBigInteger_initWithNSString_(json);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(target, [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:JavaMathBigInteger_class_()]);
}

- (void)testBigIntegerInASingleElementArraySerialization {
  IOSObjectArray *target = [IOSObjectArray arrayWithObjects:(id[]){ create_JavaMathBigInteger_initWithNSString_(@"1212121243434324323254365345367456456456465464564564") } count:1 type:JavaMathBigInteger_class_()];
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target];
  NSString *actual = ComGoogleGsonFunctionalPrimitiveTest_extractElementFromArrayWithNSString_(self, json);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(IOSObjectArray_Get(target, 0), create_JavaMathBigInteger_initWithNSString_(actual));
  json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target withJavaLangReflectType:IOSClass_arrayType(JavaMathBigInteger_class_(), 1)];
  actual = ComGoogleGsonFunctionalPrimitiveTest_extractElementFromArrayWithNSString_(self, json);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(IOSObjectArray_Get(target, 0), create_JavaMathBigInteger_initWithNSString_(actual));
}

- (void)testSmallValueForBigIntegerSerialization {
  JavaMathBigInteger *target = create_JavaMathBigInteger_initWithNSString_(@"15");
  NSString *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_([target description], actual);
}

- (void)testSmallValueForBigIntegerDeserialization {
  JavaMathBigInteger *expected = create_JavaMathBigInteger_initWithNSString_(@"15");
  JavaMathBigInteger *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"15" withIOSClass:JavaMathBigInteger_class_()];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(expected, actual);
}

- (void)testBadValueForBigIntegerDeserialization {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"15.099" withIOSClass:JavaMathBigInteger_class_()];
    JunitFrameworkTestCase_failWithNSString_(@"BigInteger can not be decimal values.");
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testMoreSpecificSerialization {
  ComGoogleGsonGson *gson = create_ComGoogleGsonGson_init();
  NSString *expected = @"This is a string";
  NSString *expectedJson = [gson toJsonWithId:expected];
  id<JavaIoSerializable> serializableString = expected;
  NSString *actualJson = [gson toJsonWithId:serializableString withJavaLangReflectType:JavaIoSerializable_class_()];
  JunitFrameworkTestCase_assertFalseWithBoolean_([((NSString *) nil_chk(expectedJson)) isEqual:actualJson]);
}

- (NSString *)extractElementFromArrayWithNSString:(NSString *)json {
  return ComGoogleGsonFunctionalPrimitiveTest_extractElementFromArrayWithNSString_(self, json);
}

- (void)testDoubleNaNSerializationNotSupportedByDefault {
  @try {
    jdouble nan = JavaLangDouble_NaN;
    [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangDouble_valueOfWithDouble_(nan)];
    JunitFrameworkTestCase_failWithNSString_(@"Gson should not accept NaN for serialization");
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangDouble_valueOfWithDouble_(JavaLangDouble_NaN)];
    JunitFrameworkTestCase_failWithNSString_(@"Gson should not accept NaN for serialization");
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
}

- (void)testDoubleNaNSerialization {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() serializeSpecialFloatingPointValues])) create];
  jdouble nan = JavaLangDouble_NaN;
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"NaN", [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:JavaLangDouble_valueOfWithDouble_(nan)]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"NaN", [gson toJsonWithId:JavaLangDouble_valueOfWithDouble_(JavaLangDouble_NaN)]);
}

- (void)testDoubleNaNDeserialization {
  JunitFrameworkTestCase_assertTrueWithBoolean_(JavaLangDouble_isNaNWithDouble_([((JavaLangDouble *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"NaN" withIOSClass:JavaLangDouble_class_()])) doubleValue]));
  JunitFrameworkTestCase_assertTrueWithBoolean_(JavaLangDouble_isNaNWithDouble_([((JavaLangDouble *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"NaN" withIOSClass:[IOSClass doubleClass]])) doubleValue]));
}

- (void)testFloatNaNSerializationNotSupportedByDefault {
  @try {
    jfloat nan = JavaLangFloat_NaN;
    [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangFloat_valueOfWithFloat_(nan)];
    JunitFrameworkTestCase_failWithNSString_(@"Gson should not accept NaN for serialization");
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangFloat_valueOfWithFloat_(JavaLangFloat_NaN)];
    JunitFrameworkTestCase_failWithNSString_(@"Gson should not accept NaN for serialization");
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
}

- (void)testFloatNaNSerialization {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() serializeSpecialFloatingPointValues])) create];
  jfloat nan = JavaLangFloat_NaN;
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"NaN", [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:JavaLangFloat_valueOfWithFloat_(nan)]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"NaN", [gson toJsonWithId:JavaLangFloat_valueOfWithFloat_(JavaLangFloat_NaN)]);
}

- (void)testFloatNaNDeserialization {
  JunitFrameworkTestCase_assertTrueWithBoolean_(JavaLangFloat_isNaNWithFloat_([((JavaLangFloat *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"NaN" withIOSClass:JavaLangFloat_class_()])) floatValue]));
  JunitFrameworkTestCase_assertTrueWithBoolean_(JavaLangFloat_isNaNWithFloat_([((JavaLangFloat *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"NaN" withIOSClass:[IOSClass floatClass]])) floatValue]));
}

- (void)testBigDecimalNaNDeserializationNotSupported {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"NaN" withIOSClass:JavaMathBigDecimal_class_()];
    JunitFrameworkTestCase_failWithNSString_(@"Gson should not accept NaN for deserialization by default.");
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDoubleInfinitySerializationNotSupportedByDefault {
  @try {
    jdouble infinity = JavaLangDouble_POSITIVE_INFINITY;
    [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangDouble_valueOfWithDouble_(infinity)];
    JunitFrameworkTestCase_failWithNSString_(@"Gson should not accept positive infinity for serialization by default.");
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangDouble_valueOfWithDouble_(JavaLangDouble_POSITIVE_INFINITY)];
    JunitFrameworkTestCase_failWithNSString_(@"Gson should not accept positive infinity for serialization by default.");
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
}

- (void)testDoubleInfinitySerialization {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() serializeSpecialFloatingPointValues])) create];
  jdouble infinity = JavaLangDouble_POSITIVE_INFINITY;
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"Infinity", [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:JavaLangDouble_valueOfWithDouble_(infinity)]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"Infinity", [gson toJsonWithId:JavaLangDouble_valueOfWithDouble_(JavaLangDouble_POSITIVE_INFINITY)]);
}

- (void)testDoubleInfinityDeserialization {
  JunitFrameworkTestCase_assertTrueWithBoolean_(JavaLangDouble_isInfiniteWithDouble_([((JavaLangDouble *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"Infinity" withIOSClass:JavaLangDouble_class_()])) doubleValue]));
  JunitFrameworkTestCase_assertTrueWithBoolean_(JavaLangDouble_isInfiniteWithDouble_([((JavaLangDouble *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"Infinity" withIOSClass:[IOSClass doubleClass]])) doubleValue]));
}

- (void)testFloatInfinitySerializationNotSupportedByDefault {
  @try {
    jfloat infinity = JavaLangFloat_POSITIVE_INFINITY;
    [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangFloat_valueOfWithFloat_(infinity)];
    JunitFrameworkTestCase_failWithNSString_(@"Gson should not accept positive infinity for serialization by default");
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangFloat_valueOfWithFloat_(JavaLangFloat_POSITIVE_INFINITY)];
    JunitFrameworkTestCase_failWithNSString_(@"Gson should not accept positive infinity for serialization by default");
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
}

- (void)testFloatInfinitySerialization {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() serializeSpecialFloatingPointValues])) create];
  jfloat infinity = JavaLangFloat_POSITIVE_INFINITY;
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"Infinity", [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:JavaLangFloat_valueOfWithFloat_(infinity)]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"Infinity", [gson toJsonWithId:JavaLangFloat_valueOfWithFloat_(JavaLangFloat_POSITIVE_INFINITY)]);
}

- (void)testFloatInfinityDeserialization {
  JunitFrameworkTestCase_assertTrueWithBoolean_(JavaLangFloat_isInfiniteWithFloat_([((JavaLangFloat *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"Infinity" withIOSClass:JavaLangFloat_class_()])) floatValue]));
  JunitFrameworkTestCase_assertTrueWithBoolean_(JavaLangFloat_isInfiniteWithFloat_([((JavaLangFloat *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"Infinity" withIOSClass:[IOSClass floatClass]])) floatValue]));
}

- (void)testBigDecimalInfinityDeserializationNotSupported {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"Infinity" withIOSClass:JavaMathBigDecimal_class_()];
    JunitFrameworkTestCase_failWithNSString_(@"Gson should not accept positive infinity for deserialization with BigDecimal");
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testNegativeInfinitySerializationNotSupportedByDefault {
  @try {
    jdouble negativeInfinity_ = JavaLangDouble_NEGATIVE_INFINITY;
    [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangDouble_valueOfWithDouble_(negativeInfinity_)];
    JunitFrameworkTestCase_failWithNSString_(@"Gson should not accept negative infinity for serialization by default");
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangDouble_valueOfWithDouble_(JavaLangDouble_NEGATIVE_INFINITY)];
    JunitFrameworkTestCase_failWithNSString_(@"Gson should not accept negative infinity for serialization by default");
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
}

- (void)testNegativeInfinitySerialization {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() serializeSpecialFloatingPointValues])) create];
  jdouble negativeInfinity_ = JavaLangDouble_NEGATIVE_INFINITY;
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"-Infinity", [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:JavaLangDouble_valueOfWithDouble_(negativeInfinity_)]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"-Infinity", [gson toJsonWithId:JavaLangDouble_valueOfWithDouble_(JavaLangDouble_NEGATIVE_INFINITY)]);
}

- (void)testNegativeInfinityDeserialization {
  JunitFrameworkTestCase_assertTrueWithBoolean_(JavaLangDouble_isInfiniteWithDouble_([((JavaLangDouble *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"-Infinity" withIOSClass:[IOSClass doubleClass]])) doubleValue]));
  JunitFrameworkTestCase_assertTrueWithBoolean_(JavaLangDouble_isInfiniteWithDouble_([((JavaLangDouble *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"-Infinity" withIOSClass:JavaLangDouble_class_()])) doubleValue]));
}

- (void)testNegativeInfinityFloatSerializationNotSupportedByDefault {
  @try {
    jfloat negativeInfinity_ = JavaLangFloat_NEGATIVE_INFINITY;
    [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangFloat_valueOfWithFloat_(negativeInfinity_)];
    JunitFrameworkTestCase_failWithNSString_(@"Gson should not accept negative infinity for serialization by default");
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangFloat_valueOfWithFloat_(JavaLangFloat_NEGATIVE_INFINITY)];
    JunitFrameworkTestCase_failWithNSString_(@"Gson should not accept negative infinity for serialization by default");
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
}

- (void)testNegativeInfinityFloatSerialization {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() serializeSpecialFloatingPointValues])) create];
  jfloat negativeInfinity_ = JavaLangFloat_NEGATIVE_INFINITY;
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"-Infinity", [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:JavaLangFloat_valueOfWithFloat_(negativeInfinity_)]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"-Infinity", [gson toJsonWithId:JavaLangFloat_valueOfWithFloat_(JavaLangFloat_NEGATIVE_INFINITY)]);
}

- (void)testNegativeInfinityFloatDeserialization {
  JunitFrameworkTestCase_assertTrueWithBoolean_(JavaLangFloat_isInfiniteWithFloat_([((JavaLangFloat *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"-Infinity" withIOSClass:[IOSClass floatClass]])) floatValue]));
  JunitFrameworkTestCase_assertTrueWithBoolean_(JavaLangFloat_isInfiniteWithFloat_([((JavaLangFloat *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"-Infinity" withIOSClass:JavaLangFloat_class_()])) floatValue]));
}

- (void)testBigDecimalNegativeInfinityDeserializationNotSupported {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"-Infinity" withIOSClass:JavaMathBigDecimal_class_()];
    JunitFrameworkTestCase_failWithNSString_(@"Gson should not accept positive infinity for deserialization");
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testLongAsStringSerialization {
  JreStrongAssign(&gson_, [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() setLongSerializationPolicyWithComGoogleGsonLongSerializationPolicy:JreLoadEnum(ComGoogleGsonLongSerializationPolicy, STRING)])) create]);
  NSString *result = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangLong_valueOfWithLong_(15LL)];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"15\"", result);
  result = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangInteger_valueOfWithInt_(2)];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"2", result);
}

- (void)testLongAsStringDeserialization {
  jlong value = [((JavaLangLong *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"\"15\"" withIOSClass:[IOSClass longClass]])) longLongValue];
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(15, value);
  JreStrongAssign(&gson_, [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() setLongSerializationPolicyWithComGoogleGsonLongSerializationPolicy:JreLoadEnum(ComGoogleGsonLongSerializationPolicy, STRING)])) create]);
  value = [((JavaLangLong *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"\"25\"" withIOSClass:[IOSClass longClass]])) longLongValue];
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(25, value);
}

- (void)testQuotedStringSerializationAndDeserialization {
  NSString *value = @"String Blah Blah Blah...1, 2, 3";
  NSString *serializedForm = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:value];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(JreStrcat("C$C", '"', value, '"'), serializedForm);
  NSString *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:serializedForm withIOSClass:NSString_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(value, actual);
}

- (void)testUnquotedStringDeserializationFails {
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"UnquotedSingleWord", [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"UnquotedSingleWord" withIOSClass:NSString_class_()]);
  NSString *value = @"String Blah Blah Blah...1, 2, 3";
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:value withIOSClass:NSString_class_()];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testHtmlCharacterSerialization {
  NSString *target = @"<script>var a = 12;</script>";
  NSString *result = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target];
  JunitFrameworkTestCase_assertFalseWithBoolean_([((NSString *) nil_chk(result)) isEqual:JreStrcat("C$C", '"', target, '"')]);
  JreStrongAssign(&gson_, [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() disableHtmlEscaping])) create]);
  result = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target];
  JunitFrameworkTestCase_assertTrueWithBoolean_([((NSString *) nil_chk(result)) isEqual:JreStrcat("C$C", '"', target, '"')]);
}

- (void)testDeserializePrimitiveWrapperAsObjectField {
  NSString *json = @"{i:10}";
  ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField *target = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField_class_()];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(10, [((JavaLangInteger *) nil_chk(((ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField *) nil_chk(target))->i_)) intValue]);
}

- (void)testPrimitiveClassLiteral {
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(1, [((JavaLangInteger *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"1" withIOSClass:[IOSClass intClass]])) intValue]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(1, [((JavaLangInteger *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithJavaIoReader:create_JavaIoStringReader_initWithNSString_(@"1") withIOSClass:[IOSClass intClass]])) intValue]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(1, [((JavaLangInteger *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithComGoogleGsonJsonElement:create_ComGoogleGsonJsonPrimitive_initWithNSNumber_(JavaLangInteger_valueOfWithInt_(1)) withIOSClass:[IOSClass intClass]])) intValue]);
}

- (void)testDeserializeJsonObjectAsLongPrimitive {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"{'abc':1}" withIOSClass:[IOSClass longClass]];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializeJsonArrayAsLongWrapper {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"[1,2,3]" withIOSClass:JavaLangLong_class_()];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializeJsonArrayAsInt {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"[1, 2, 3, 4]" withIOSClass:[IOSClass intClass]];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializeJsonObjectAsInteger {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"{}" withIOSClass:JavaLangInteger_class_()];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializeJsonObjectAsShortPrimitive {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"{'abc':1}" withIOSClass:[IOSClass shortClass]];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializeJsonArrayAsShortWrapper {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"['a','b']" withIOSClass:JavaLangShort_class_()];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializeJsonArrayAsDoublePrimitive {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"[1,2]" withIOSClass:[IOSClass doubleClass]];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializeJsonObjectAsDoubleWrapper {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"{'abc':1}" withIOSClass:JavaLangDouble_class_()];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializeJsonObjectAsFloatPrimitive {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"{'abc':1}" withIOSClass:[IOSClass floatClass]];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializeJsonArrayAsFloatWrapper {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"[1,2,3]" withIOSClass:JavaLangFloat_class_()];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializeJsonObjectAsBytePrimitive {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"{'abc':1}" withIOSClass:[IOSClass byteClass]];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializeJsonArrayAsByteWrapper {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"[1,2,3,4]" withIOSClass:JavaLangByte_class_()];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializeJsonObjectAsBooleanPrimitive {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"{'abc':1}" withIOSClass:[IOSClass booleanClass]];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializeJsonArrayAsBooleanWrapper {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"[1,2,3,4]" withIOSClass:JavaLangBoolean_class_()];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializeJsonArrayAsBigDecimal {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"[1,2,3,4]" withIOSClass:JavaMathBigDecimal_class_()];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializeJsonObjectAsBigDecimal {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"{'a':1}" withIOSClass:JavaMathBigDecimal_class_()];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializeJsonArrayAsBigInteger {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"[1,2,3,4]" withIOSClass:JavaMathBigInteger_class_()];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializeJsonObjectAsBigInteger {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"{'c':2}" withIOSClass:JavaMathBigInteger_class_()];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializeJsonArrayAsNumber {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"[1,2,3,4]" withIOSClass:NSNumber_class_()];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializeJsonObjectAsNumber {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"{'c':2}" withIOSClass:NSNumber_class_()];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializingDecimalPointValueZeroSucceeds {
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(1, [((JavaLangInteger *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"1.0" withIOSClass:JavaLangInteger_class_()])) intValue]);
}

- (void)testDeserializingNonZeroDecimalPointValuesAsIntegerFails {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"1.02" withIOSClass:JavaLangByte_class_()];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"1.02" withIOSClass:JavaLangShort_class_()];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"1.02" withIOSClass:JavaLangInteger_class_()];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"1.02" withIOSClass:JavaLangLong_class_()];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializingBigDecimalAsIntegerFails {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"-122.08e-213" withIOSClass:JavaLangInteger_class_()];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializingBigIntegerAsInteger {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"12121211243123245845384534687435634558945453489543985435" withIOSClass:JavaLangInteger_class_()];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializingBigIntegerAsLong {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"12121211243123245845384534687435634558945453489543985435" withIOSClass:JavaLangLong_class_()];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testValueVeryCloseToZeroIsZero {
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(0, [((JavaLangByte *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"-122.08e-2132" withIOSClass:[IOSClass byteClass]])) charValue]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(0, [((JavaLangShort *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"-122.08e-2132" withIOSClass:[IOSClass shortClass]])) shortValue]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(0, [((JavaLangInteger *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"-122.08e-2132" withIOSClass:[IOSClass intClass]])) intValue]);
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(0, [((JavaLangLong *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"-122.08e-2132" withIOSClass:[IOSClass longClass]])) longLongValue]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangFloat_valueOfWithFloat_(-0.0f), [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"-122.08e-2132" withIOSClass:[IOSClass floatClass]]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(-0.0), [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"-122.08e-2132" withIOSClass:[IOSClass doubleClass]]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangFloat_valueOfWithFloat_(0.0f), [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"122.08e-2132" withIOSClass:[IOSClass floatClass]]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(0.0), [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"122.08e-2132" withIOSClass:[IOSClass doubleClass]]);
}

- (void)testDeserializingBigDecimalAsFloat {
  NSString *json = @"-122.08e-2132332";
  jfloat actual = [((JavaLangFloat *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:[IOSClass floatClass]])) floatValue];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangFloat_valueOfWithFloat_(-0.0f), JavaLangFloat_valueOfWithFloat_(actual));
}

- (void)testDeserializingBigDecimalAsDouble {
  NSString *json = @"-122.08e-2132332";
  jdouble actual = [((JavaLangDouble *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:[IOSClass doubleClass]])) doubleValue];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(-0.0), JavaLangDouble_valueOfWithDouble_(actual));
}

- (void)testDeserializingBigDecimalAsBigIntegerFails {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"-122.08e-213" withIOSClass:JavaMathBigInteger_class_()];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testDeserializingBigIntegerAsBigDecimal {
  JavaMathBigDecimal *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"12121211243123245845384534687435634558945453489543985435" withIOSClass:JavaMathBigDecimal_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"12121211243123245845384534687435634558945453489543985435", [((JavaMathBigDecimal *) nil_chk(actual)) toPlainString]);
}

- (void)testStringsAsBooleans {
  NSString *json = @"['true', 'false', 'TRUE', 'yes', '1']";
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangBoolean_valueOfWithBoolean_(true), JavaLangBoolean_valueOfWithBoolean_(false), JavaLangBoolean_valueOfWithBoolean_(true), JavaLangBoolean_valueOfWithBoolean_(false), JavaLangBoolean_valueOfWithBoolean_(false) } count:5 type:JavaLangBoolean_class_()]), [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withJavaLangReflectType:[create_ComGoogleGsonFunctionalPrimitiveTest_1_init() getType]]);
}

- (void)dealloc {
  RELEASE_(gson_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(testPrimitiveIntegerAutoboxedSerialization);
  methods[3].selector = @selector(testPrimitiveIntegerAutoboxedDeserialization);
  methods[4].selector = @selector(testByteSerialization);
  methods[5].selector = @selector(testShortSerialization);
  methods[6].selector = @selector(testByteDeserialization);
  methods[7].selector = @selector(testPrimitiveIntegerAutoboxedInASingleElementArraySerialization);
  methods[8].selector = @selector(testReallyLongValuesSerialization);
  methods[9].selector = @selector(testReallyLongValuesDeserialization);
  methods[10].selector = @selector(testPrimitiveLongAutoboxedSerialization);
  methods[11].selector = @selector(testPrimitiveLongAutoboxedDeserialization);
  methods[12].selector = @selector(testPrimitiveLongAutoboxedInASingleElementArraySerialization);
  methods[13].selector = @selector(testPrimitiveBooleanAutoboxedSerialization);
  methods[14].selector = @selector(testBooleanDeserialization);
  methods[15].selector = @selector(testPrimitiveBooleanAutoboxedInASingleElementArraySerialization);
  methods[16].selector = @selector(testNumberSerialization);
  methods[17].selector = @selector(testNumberDeserialization);
  methods[18].selector = @selector(testPrimitiveDoubleAutoboxedSerialization);
  methods[19].selector = @selector(testPrimitiveDoubleAutoboxedDeserialization);
  methods[20].selector = @selector(testPrimitiveDoubleAutoboxedInASingleElementArraySerialization);
  methods[21].selector = @selector(testDoubleAsStringRepresentationDeserialization);
  methods[22].selector = @selector(testDoubleNoFractAsStringRepresentationDeserialization);
  methods[23].selector = @selector(testLargeDoubleDeserialization);
  methods[24].selector = @selector(testBigDecimalSerialization);
  methods[25].selector = @selector(testBigDecimalDeserialization);
  methods[26].selector = @selector(testBigDecimalInASingleElementArraySerialization);
  methods[27].selector = @selector(testSmallValueForBigDecimalSerialization);
  methods[28].selector = @selector(testSmallValueForBigDecimalDeserialization);
  methods[29].selector = @selector(testBigDecimalPreservePrecisionSerialization);
  methods[30].selector = @selector(testBigDecimalPreservePrecisionDeserialization);
  methods[31].selector = @selector(testBigDecimalAsStringRepresentationDeserialization);
  methods[32].selector = @selector(testBigDecimalNoFractAsStringRepresentationDeserialization);
  methods[33].selector = @selector(testBigIntegerSerialization);
  methods[34].selector = @selector(testBigIntegerDeserialization);
  methods[35].selector = @selector(testBigIntegerInASingleElementArraySerialization);
  methods[36].selector = @selector(testSmallValueForBigIntegerSerialization);
  methods[37].selector = @selector(testSmallValueForBigIntegerDeserialization);
  methods[38].selector = @selector(testBadValueForBigIntegerDeserialization);
  methods[39].selector = @selector(testMoreSpecificSerialization);
  methods[40].selector = @selector(extractElementFromArrayWithNSString:);
  methods[41].selector = @selector(testDoubleNaNSerializationNotSupportedByDefault);
  methods[42].selector = @selector(testDoubleNaNSerialization);
  methods[43].selector = @selector(testDoubleNaNDeserialization);
  methods[44].selector = @selector(testFloatNaNSerializationNotSupportedByDefault);
  methods[45].selector = @selector(testFloatNaNSerialization);
  methods[46].selector = @selector(testFloatNaNDeserialization);
  methods[47].selector = @selector(testBigDecimalNaNDeserializationNotSupported);
  methods[48].selector = @selector(testDoubleInfinitySerializationNotSupportedByDefault);
  methods[49].selector = @selector(testDoubleInfinitySerialization);
  methods[50].selector = @selector(testDoubleInfinityDeserialization);
  methods[51].selector = @selector(testFloatInfinitySerializationNotSupportedByDefault);
  methods[52].selector = @selector(testFloatInfinitySerialization);
  methods[53].selector = @selector(testFloatInfinityDeserialization);
  methods[54].selector = @selector(testBigDecimalInfinityDeserializationNotSupported);
  methods[55].selector = @selector(testNegativeInfinitySerializationNotSupportedByDefault);
  methods[56].selector = @selector(testNegativeInfinitySerialization);
  methods[57].selector = @selector(testNegativeInfinityDeserialization);
  methods[58].selector = @selector(testNegativeInfinityFloatSerializationNotSupportedByDefault);
  methods[59].selector = @selector(testNegativeInfinityFloatSerialization);
  methods[60].selector = @selector(testNegativeInfinityFloatDeserialization);
  methods[61].selector = @selector(testBigDecimalNegativeInfinityDeserializationNotSupported);
  methods[62].selector = @selector(testLongAsStringSerialization);
  methods[63].selector = @selector(testLongAsStringDeserialization);
  methods[64].selector = @selector(testQuotedStringSerializationAndDeserialization);
  methods[65].selector = @selector(testUnquotedStringDeserializationFails);
  methods[66].selector = @selector(testHtmlCharacterSerialization);
  methods[67].selector = @selector(testDeserializePrimitiveWrapperAsObjectField);
  methods[68].selector = @selector(testPrimitiveClassLiteral);
  methods[69].selector = @selector(testDeserializeJsonObjectAsLongPrimitive);
  methods[70].selector = @selector(testDeserializeJsonArrayAsLongWrapper);
  methods[71].selector = @selector(testDeserializeJsonArrayAsInt);
  methods[72].selector = @selector(testDeserializeJsonObjectAsInteger);
  methods[73].selector = @selector(testDeserializeJsonObjectAsShortPrimitive);
  methods[74].selector = @selector(testDeserializeJsonArrayAsShortWrapper);
  methods[75].selector = @selector(testDeserializeJsonArrayAsDoublePrimitive);
  methods[76].selector = @selector(testDeserializeJsonObjectAsDoubleWrapper);
  methods[77].selector = @selector(testDeserializeJsonObjectAsFloatPrimitive);
  methods[78].selector = @selector(testDeserializeJsonArrayAsFloatWrapper);
  methods[79].selector = @selector(testDeserializeJsonObjectAsBytePrimitive);
  methods[80].selector = @selector(testDeserializeJsonArrayAsByteWrapper);
  methods[81].selector = @selector(testDeserializeJsonObjectAsBooleanPrimitive);
  methods[82].selector = @selector(testDeserializeJsonArrayAsBooleanWrapper);
  methods[83].selector = @selector(testDeserializeJsonArrayAsBigDecimal);
  methods[84].selector = @selector(testDeserializeJsonObjectAsBigDecimal);
  methods[85].selector = @selector(testDeserializeJsonArrayAsBigInteger);
  methods[86].selector = @selector(testDeserializeJsonObjectAsBigInteger);
  methods[87].selector = @selector(testDeserializeJsonArrayAsNumber);
  methods[88].selector = @selector(testDeserializeJsonObjectAsNumber);
  methods[89].selector = @selector(testDeserializingDecimalPointValueZeroSucceeds);
  methods[90].selector = @selector(testDeserializingNonZeroDecimalPointValuesAsIntegerFails);
  methods[91].selector = @selector(testDeserializingBigDecimalAsIntegerFails);
  methods[92].selector = @selector(testDeserializingBigIntegerAsInteger);
  methods[93].selector = @selector(testDeserializingBigIntegerAsLong);
  methods[94].selector = @selector(testValueVeryCloseToZeroIsZero);
  methods[95].selector = @selector(testDeserializingBigDecimalAsFloat);
  methods[96].selector = @selector(testDeserializingBigDecimalAsDouble);
  methods[97].selector = @selector(testDeserializingBigDecimalAsBigIntegerFails);
  methods[98].selector = @selector(testDeserializingBigIntegerAsBigDecimal);
  methods[99].selector = @selector(testStringsAsBooleans);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "gson_", "LComGoogleGsonGson;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "extractElementFromArray", "LNSString;", "LComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalPrimitiveTest = { "PrimitiveTest", "com.google.gson.functional", ptrTable, methods, fields, 7, 0x1, 100, 1, -1, 3, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalPrimitiveTest;
}

@end

void ComGoogleGsonFunctionalPrimitiveTest_init(ComGoogleGsonFunctionalPrimitiveTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComGoogleGsonFunctionalPrimitiveTest *new_ComGoogleGsonFunctionalPrimitiveTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalPrimitiveTest, init)
}

ComGoogleGsonFunctionalPrimitiveTest *create_ComGoogleGsonFunctionalPrimitiveTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalPrimitiveTest, init)
}

NSString *ComGoogleGsonFunctionalPrimitiveTest_extractElementFromArrayWithNSString_(ComGoogleGsonFunctionalPrimitiveTest *self, NSString *json) {
  return [((NSString *) nil_chk(json)) java_substring:[json java_indexOf:'['] + 1 endIndex:[json java_indexOf:']']];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalPrimitiveTest)

@implementation ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(i_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "i_", "LJavaLangInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleGsonFunctionalPrimitiveTest;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField = { "ClassWithIntegerField", "com.google.gson.functional", ptrTable, methods, fields, 7, 0xa, 1, 1, 0, -1, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField;
}

@end

void ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField_init(ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField *self) {
  NSObject_init(self);
}

ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField *new_ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField, init)
}

ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField *create_ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalPrimitiveTest_ClassWithIntegerField)

@implementation ComGoogleGsonFunctionalPrimitiveTest_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalPrimitiveTest_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleGsonFunctionalPrimitiveTest;", "testStringsAsBooleans", "Lcom/google/gson/reflect/TypeToken<Ljava/util/List<Ljava/lang/Boolean;>;>;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalPrimitiveTest_1 = { "", "com.google.gson.functional", ptrTable, methods, NULL, 7, 0x8018, 1, 0, 0, -1, 1, 2, -1 };
  return &_ComGoogleGsonFunctionalPrimitiveTest_1;
}

@end

void ComGoogleGsonFunctionalPrimitiveTest_1_init(ComGoogleGsonFunctionalPrimitiveTest_1 *self) {
  ComGoogleGsonReflectTypeToken_init(self);
}

ComGoogleGsonFunctionalPrimitiveTest_1 *new_ComGoogleGsonFunctionalPrimitiveTest_1_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalPrimitiveTest_1, init)
}

ComGoogleGsonFunctionalPrimitiveTest_1 *create_ComGoogleGsonFunctionalPrimitiveTest_1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalPrimitiveTest_1, init)
}
