//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/functional/EscapingTest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleGsonFunctionalEscapingTest")
#ifdef RESTRICT_ComGoogleGsonFunctionalEscapingTest
#define INCLUDE_ALL_ComGoogleGsonFunctionalEscapingTest 0
#else
#define INCLUDE_ALL_ComGoogleGsonFunctionalEscapingTest 1
#endif
#undef RESTRICT_ComGoogleGsonFunctionalEscapingTest

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleGsonFunctionalEscapingTest_) && (INCLUDE_ALL_ComGoogleGsonFunctionalEscapingTest || defined(INCLUDE_ComGoogleGsonFunctionalEscapingTest))
#define ComGoogleGsonFunctionalEscapingTest_

#define RESTRICT_JunitFrameworkTestCase 1
#define INCLUDE_JunitFrameworkTestCase 1
#include "junit/framework/TestCase.h"

/*!
 @brief Performs some functional test involving JSON output escaping.
 @author Inderjeet Singh
 @author Joel Leitch
 */
@interface ComGoogleGsonFunctionalEscapingTest : JunitFrameworkTestCase

#pragma mark Public

- (instancetype __nonnull)init;

- (void)testEscapeAllHtmlCharacters;

- (void)testEscapingObjectFields;

- (void)testEscapingQuotesInStringArray;

- (void)testGsonAcceptsEscapedAndNonEscapedJsonDeserialization;

- (void)testGsonDoubleDeserialization;

#pragma mark Protected

- (void)setUp;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalEscapingTest)

FOUNDATION_EXPORT void ComGoogleGsonFunctionalEscapingTest_init(ComGoogleGsonFunctionalEscapingTest *self);

FOUNDATION_EXPORT ComGoogleGsonFunctionalEscapingTest *new_ComGoogleGsonFunctionalEscapingTest_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleGsonFunctionalEscapingTest *create_ComGoogleGsonFunctionalEscapingTest_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonFunctionalEscapingTest)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComGoogleGsonFunctionalEscapingTest")
