//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/gson/Gson.h"
#include "com/google/gson/GsonBuilder.h"
#include "com/google/gson/JsonElement.h"
#include "com/google/gson/JsonStreamParser.h"
#include "com/google/gson/JsonSyntaxException.h"
#include "com/google/gson/common/TestTypes.h"
#include "com/google/gson/functional/ReadersWritersTest.h"
#include "com/google/gson/reflect/TypeToken.h"
#include "java/io/CharArrayReader.h"
#include "java/io/CharArrayWriter.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Integer.h"
#include "java/lang/reflect/Type.h"
#include "junit/framework/TestCase.h"

@interface ComGoogleGsonFunctionalReadersWritersTest () {
 @public
  ComGoogleGsonGson *gson_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalReadersWritersTest, gson_, ComGoogleGsonGson *)

@interface ComGoogleGsonFunctionalReadersWritersTest_1 : ComGoogleGsonReflectTypeToken

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalReadersWritersTest_1)

__attribute__((unused)) static void ComGoogleGsonFunctionalReadersWritersTest_1_init(ComGoogleGsonFunctionalReadersWritersTest_1 *self);

__attribute__((unused)) static ComGoogleGsonFunctionalReadersWritersTest_1 *new_ComGoogleGsonFunctionalReadersWritersTest_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalReadersWritersTest_1 *create_ComGoogleGsonFunctionalReadersWritersTest_1_init(void);

@interface ComGoogleGsonFunctionalReadersWritersTest_2 : ComGoogleGsonReflectTypeToken

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalReadersWritersTest_2)

__attribute__((unused)) static void ComGoogleGsonFunctionalReadersWritersTest_2_init(ComGoogleGsonFunctionalReadersWritersTest_2 *self);

__attribute__((unused)) static ComGoogleGsonFunctionalReadersWritersTest_2 *new_ComGoogleGsonFunctionalReadersWritersTest_2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalReadersWritersTest_2 *create_ComGoogleGsonFunctionalReadersWritersTest_2_init(void);

@implementation ComGoogleGsonFunctionalReadersWritersTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalReadersWritersTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  [super setUp];
  JreStrongAssignAndConsume(&gson_, new_ComGoogleGsonGson_init());
}

- (void)testWriterForSerialization {
  JavaIoWriter *writer = create_JavaIoStringWriter_init();
  ComGoogleGsonCommonTestTypes_BagOfPrimitives *src = create_ComGoogleGsonCommonTestTypes_BagOfPrimitives_init();
  [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:src withJavaLangAppendable:writer];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_([src getExpectedJson], [writer description]);
}

- (void)testReaderForDeserialization {
  ComGoogleGsonCommonTestTypes_BagOfPrimitives *expected = create_ComGoogleGsonCommonTestTypes_BagOfPrimitives_init();
  JavaIoReader *json = create_JavaIoStringReader_initWithNSString_([expected getExpectedJson]);
  ComGoogleGsonCommonTestTypes_BagOfPrimitives *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithJavaIoReader:json withIOSClass:ComGoogleGsonCommonTestTypes_BagOfPrimitives_class_()];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(expected, actual);
}

- (void)testTopLevelNullObjectSerializationWithWriter {
  JavaIoStringWriter *writer = create_JavaIoStringWriter_init();
  [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithComGoogleGsonJsonElement:nil withJavaLangAppendable:writer];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"null", [writer description]);
}

- (void)testTopLevelNullObjectDeserializationWithReader {
  JavaIoStringReader *reader = create_JavaIoStringReader_initWithNSString_(@"null");
  JavaLangInteger *nullIntObject = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithJavaIoReader:reader withIOSClass:JavaLangInteger_class_()];
  JunitFrameworkTestCase_assertNullWithId_(nullIntObject);
}

- (void)testTopLevelNullObjectSerializationWithWriterAndSerializeNulls {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() serializeNulls])) create];
  JavaIoStringWriter *writer = create_JavaIoStringWriter_init();
  [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithComGoogleGsonJsonElement:nil withJavaLangAppendable:writer];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"null", [writer description]);
}

- (void)testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() serializeNulls])) create];
  JavaIoStringReader *reader = create_JavaIoStringReader_initWithNSString_(@"null");
  JavaLangInteger *nullIntObject = [((ComGoogleGsonGson *) nil_chk(gson)) fromJsonWithJavaIoReader:reader withIOSClass:JavaLangInteger_class_()];
  JunitFrameworkTestCase_assertNullWithId_(nullIntObject);
}

- (void)testReadWriteTwoStrings {
  ComGoogleGsonGson *gson = create_ComGoogleGsonGson_init();
  JavaIoCharArrayWriter *writer = create_JavaIoCharArrayWriter_init();
  [writer writeWithCharArray:[((NSString *) nil_chk([gson toJsonWithId:@"one"])) java_toCharArray]];
  [writer writeWithCharArray:[((NSString *) nil_chk([gson toJsonWithId:@"two"])) java_toCharArray]];
  JavaIoCharArrayReader *reader = create_JavaIoCharArrayReader_initWithCharArray_([writer toCharArray]);
  ComGoogleGsonJsonStreamParser *parser = create_ComGoogleGsonJsonStreamParser_initWithJavaIoReader_(reader);
  NSString *actualOne = [gson fromJsonWithComGoogleGsonJsonElement:[parser next] withIOSClass:NSString_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"one", actualOne);
  NSString *actualTwo = [gson fromJsonWithComGoogleGsonJsonElement:[parser next] withIOSClass:NSString_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"two", actualTwo);
}

- (void)testReadWriteTwoObjects {
  ComGoogleGsonGson *gson = create_ComGoogleGsonGson_init();
  JavaIoCharArrayWriter *writer = create_JavaIoCharArrayWriter_init();
  ComGoogleGsonCommonTestTypes_BagOfPrimitives *expectedOne = create_ComGoogleGsonCommonTestTypes_BagOfPrimitives_initWithLong_withInt_withBoolean_withNSString_(1, 1, true, @"one");
  [writer writeWithCharArray:[((NSString *) nil_chk([gson toJsonWithId:expectedOne])) java_toCharArray]];
  ComGoogleGsonCommonTestTypes_BagOfPrimitives *expectedTwo = create_ComGoogleGsonCommonTestTypes_BagOfPrimitives_initWithLong_withInt_withBoolean_withNSString_(2, 2, false, @"two");
  [writer writeWithCharArray:[((NSString *) nil_chk([gson toJsonWithId:expectedTwo])) java_toCharArray]];
  JavaIoCharArrayReader *reader = create_JavaIoCharArrayReader_initWithCharArray_([writer toCharArray]);
  ComGoogleGsonJsonStreamParser *parser = create_ComGoogleGsonJsonStreamParser_initWithJavaIoReader_(reader);
  ComGoogleGsonCommonTestTypes_BagOfPrimitives *actualOne = [gson fromJsonWithComGoogleGsonJsonElement:[parser next] withIOSClass:ComGoogleGsonCommonTestTypes_BagOfPrimitives_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"one", ((ComGoogleGsonCommonTestTypes_BagOfPrimitives *) nil_chk(actualOne))->stringValue_);
  ComGoogleGsonCommonTestTypes_BagOfPrimitives *actualTwo = [gson fromJsonWithComGoogleGsonJsonElement:[parser next] withIOSClass:ComGoogleGsonCommonTestTypes_BagOfPrimitives_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"two", ((ComGoogleGsonCommonTestTypes_BagOfPrimitives *) nil_chk(actualTwo))->stringValue_);
  JunitFrameworkTestCase_assertFalseWithBoolean_([parser hasNext]);
}

- (void)testTypeMismatchThrowsJsonSyntaxExceptionForStrings {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"true" withJavaLangReflectType:[create_ComGoogleGsonFunctionalReadersWritersTest_1_init() getType]];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testTypeMismatchThrowsJsonSyntaxExceptionForReaders {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithJavaIoReader:create_JavaIoStringReader_initWithNSString_(@"true") withJavaLangReflectType:[create_ComGoogleGsonFunctionalReadersWritersTest_2_init() getType]];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)dealloc {
  RELEASE_(gson_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(testWriterForSerialization);
  methods[3].selector = @selector(testReaderForDeserialization);
  methods[4].selector = @selector(testTopLevelNullObjectSerializationWithWriter);
  methods[5].selector = @selector(testTopLevelNullObjectDeserializationWithReader);
  methods[6].selector = @selector(testTopLevelNullObjectSerializationWithWriterAndSerializeNulls);
  methods[7].selector = @selector(testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls);
  methods[8].selector = @selector(testReadWriteTwoStrings);
  methods[9].selector = @selector(testReadWriteTwoObjects);
  methods[10].selector = @selector(testTypeMismatchThrowsJsonSyntaxExceptionForStrings);
  methods[11].selector = @selector(testTypeMismatchThrowsJsonSyntaxExceptionForReaders);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "gson_", "LComGoogleGsonGson;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalReadersWritersTest = { "ReadersWritersTest", "com.google.gson.functional", ptrTable, methods, fields, 7, 0x1, 12, 1, -1, -1, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalReadersWritersTest;
}

@end

void ComGoogleGsonFunctionalReadersWritersTest_init(ComGoogleGsonFunctionalReadersWritersTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComGoogleGsonFunctionalReadersWritersTest *new_ComGoogleGsonFunctionalReadersWritersTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalReadersWritersTest, init)
}

ComGoogleGsonFunctionalReadersWritersTest *create_ComGoogleGsonFunctionalReadersWritersTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalReadersWritersTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalReadersWritersTest)

@implementation ComGoogleGsonFunctionalReadersWritersTest_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalReadersWritersTest_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleGsonFunctionalReadersWritersTest;", "testTypeMismatchThrowsJsonSyntaxExceptionForStrings", "Lcom/google/gson/reflect/TypeToken<Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalReadersWritersTest_1 = { "", "com.google.gson.functional", ptrTable, methods, NULL, 7, 0x8018, 1, 0, 0, -1, 1, 2, -1 };
  return &_ComGoogleGsonFunctionalReadersWritersTest_1;
}

@end

void ComGoogleGsonFunctionalReadersWritersTest_1_init(ComGoogleGsonFunctionalReadersWritersTest_1 *self) {
  ComGoogleGsonReflectTypeToken_init(self);
}

ComGoogleGsonFunctionalReadersWritersTest_1 *new_ComGoogleGsonFunctionalReadersWritersTest_1_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalReadersWritersTest_1, init)
}

ComGoogleGsonFunctionalReadersWritersTest_1 *create_ComGoogleGsonFunctionalReadersWritersTest_1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalReadersWritersTest_1, init)
}

@implementation ComGoogleGsonFunctionalReadersWritersTest_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalReadersWritersTest_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleGsonFunctionalReadersWritersTest;", "testTypeMismatchThrowsJsonSyntaxExceptionForReaders", "Lcom/google/gson/reflect/TypeToken<Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalReadersWritersTest_2 = { "", "com.google.gson.functional", ptrTable, methods, NULL, 7, 0x8018, 1, 0, 0, -1, 1, 2, -1 };
  return &_ComGoogleGsonFunctionalReadersWritersTest_2;
}

@end

void ComGoogleGsonFunctionalReadersWritersTest_2_init(ComGoogleGsonFunctionalReadersWritersTest_2 *self) {
  ComGoogleGsonReflectTypeToken_init(self);
}

ComGoogleGsonFunctionalReadersWritersTest_2 *new_ComGoogleGsonFunctionalReadersWritersTest_2_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalReadersWritersTest_2, init)
}

ComGoogleGsonFunctionalReadersWritersTest_2 *create_ComGoogleGsonFunctionalReadersWritersTest_2_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalReadersWritersTest_2, init)
}
