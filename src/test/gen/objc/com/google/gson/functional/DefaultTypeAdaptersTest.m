//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/gson/Gson.h"
#include "com/google/gson/GsonBuilder.h"
#include "com/google/gson/JsonArray.h"
#include "com/google/gson/JsonDeserializationContext.h"
#include "com/google/gson/JsonDeserializer.h"
#include "com/google/gson/JsonElement.h"
#include "com/google/gson/JsonNull.h"
#include "com/google/gson/JsonObject.h"
#include "com/google/gson/JsonParseException.h"
#include "com/google/gson/JsonPrimitive.h"
#include "com/google/gson/TypeAdapter.h"
#include "com/google/gson/functional/DefaultTypeAdaptersTest.h"
#include "com/google/gson/reflect/TypeToken.h"
#include "com/google/gson/stream/JsonReader.h"
#include "com/google/gson/stream/JsonWriter.h"
#include "java/io/IOException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/Type.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/net/InetAddress.h"
#include "java/net/URI.h"
#include "java/net/URL.h"
#include "java/sql/Date.h"
#include "java/sql/Time.h"
#include "java/sql/Timestamp.h"
#include "java/text/DateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/BitSet.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/TimeZone.h"
#include "java/util/TreeSet.h"
#include "java/util/UUID.h"
#include "junit/framework/TestCase.h"

@class JavaIoReader;

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ComGoogleGsonFunctionalDefaultTypeAdaptersTest () {
 @public
  ComGoogleGsonGson *gson_;
  JavaUtilTimeZone *oldTimeZone_;
}

- (void)testNullSerializationAndDeserializationWithIOSClass:(IOSClass *)c;

- (void)assertEqualsDateWithJavaUtilDate:(JavaUtilDate *)date
                                 withInt:(jint)year
                                 withInt:(jint)month
                                 withInt:(jint)day;

- (void)assertEqualsTimeWithJavaUtilDate:(JavaUtilDate *)date
                                 withInt:(jint)hours
                                 withInt:(jint)minutes
                                 withInt:(jint)seconds;

@end

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalDefaultTypeAdaptersTest, gson_, ComGoogleGsonGson *)
J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalDefaultTypeAdaptersTest, oldTimeZone_, JavaUtilTimeZone *)

__attribute__((unused)) static void ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(ComGoogleGsonFunctionalDefaultTypeAdaptersTest *self, IOSClass *c);

__attribute__((unused)) static void ComGoogleGsonFunctionalDefaultTypeAdaptersTest_assertEqualsDateWithJavaUtilDate_withInt_withInt_withInt_(ComGoogleGsonFunctionalDefaultTypeAdaptersTest *self, JavaUtilDate *date, jint year, jint month, jint day);

__attribute__((unused)) static void ComGoogleGsonFunctionalDefaultTypeAdaptersTest_assertEqualsTimeWithJavaUtilDate_withInt_withInt_withInt_(ComGoogleGsonFunctionalDefaultTypeAdaptersTest *self, JavaUtilDate *date, jint hours, jint minutes, jint seconds);

@interface ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField : NSObject {
 @public
  JavaNetURL *url_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField)

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField, url_, JavaNetURL *)

__attribute__((unused)) static void ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField_init(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField *self);

__attribute__((unused)) static ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField *new_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField *create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField)

@interface ComGoogleGsonFunctionalDefaultTypeAdaptersTest_1 : NSObject < ComGoogleGsonJsonDeserializer >

- (instancetype)init;

- (JavaUtilDate *)deserializeWithComGoogleGsonJsonElement:(ComGoogleGsonJsonElement *)json
                                  withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT
              withComGoogleGsonJsonDeserializationContext:(id<ComGoogleGsonJsonDeserializationContext>)context;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_1)

__attribute__((unused)) static void ComGoogleGsonFunctionalDefaultTypeAdaptersTest_1_init(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_1 *self);

__attribute__((unused)) static ComGoogleGsonFunctionalDefaultTypeAdaptersTest_1 *new_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalDefaultTypeAdaptersTest_1 *create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_1_init(void);

@interface ComGoogleGsonFunctionalDefaultTypeAdaptersTest_2 : ComGoogleGsonReflectTypeToken

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_2)

__attribute__((unused)) static void ComGoogleGsonFunctionalDefaultTypeAdaptersTest_2_init(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_2 *self);

__attribute__((unused)) static ComGoogleGsonFunctionalDefaultTypeAdaptersTest_2 *new_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalDefaultTypeAdaptersTest_2 *create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_2_init(void);

@interface ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal : NSObject {
 @public
  JavaMathBigDecimal *value_;
}

- (instancetype)initWithNSString:(NSString *)value;

- (NSString *)getExpectedJson;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal)

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal, value_, JavaMathBigDecimal *)

__attribute__((unused)) static void ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal_initWithNSString_(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal *self, NSString *value);

__attribute__((unused)) static ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal *new_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal_initWithNSString_(NSString *value) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal *create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal_initWithNSString_(NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal)

@interface ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger : NSObject {
 @public
  JavaMathBigInteger *value_;
}

- (instancetype)initWithNSString:(NSString *)value;

- (NSString *)getExpectedJson;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger)

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger, value_, JavaMathBigInteger *)

__attribute__((unused)) static void ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger_initWithNSString_(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger *self, NSString *value);

__attribute__((unused)) static ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger *new_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger_initWithNSString_(NSString *value) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger *create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger_initWithNSString_(NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger)

@interface ComGoogleGsonFunctionalDefaultTypeAdaptersTest_3 : ComGoogleGsonReflectTypeToken

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_3)

__attribute__((unused)) static void ComGoogleGsonFunctionalDefaultTypeAdaptersTest_3_init(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_3 *self);

__attribute__((unused)) static ComGoogleGsonFunctionalDefaultTypeAdaptersTest_3 *new_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_3_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalDefaultTypeAdaptersTest_3 *create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_3_init(void);

@interface ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter : ComGoogleGsonTypeAdapter

- (instancetype)init;

- (void)writeWithComGoogleGsonStreamJsonWriter:(ComGoogleGsonStreamJsonWriter *)outArg
                                        withId:(IOSClass *)value;

- (IOSClass *)readWithComGoogleGsonStreamJsonReader:(ComGoogleGsonStreamJsonReader *)inArg;

- (IOSClass *)fromJsonWithJavaIoReader:(JavaIoReader *)arg0;

- (IOSClass *)fromJsonTreeWithComGoogleGsonJsonElement:(ComGoogleGsonJsonElement *)arg0;

- (IOSClass *)fromJsonWithNSString:(NSString *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter)

__attribute__((unused)) static void ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter_init(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter *self);

__attribute__((unused)) static ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter *new_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter *create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter)

@interface ComGoogleGsonFunctionalDefaultTypeAdaptersTest_NumberAsStringAdapter () {
 @public
  JavaLangReflectConstructor *constructor_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_NumberAsStringAdapter, constructor_, JavaLangReflectConstructor *)

@implementation ComGoogleGsonFunctionalDefaultTypeAdaptersTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  [super setUp];
  JreStrongAssign(&self->oldTimeZone_, JavaUtilTimeZone_getDefault());
  JavaUtilTimeZone_setDefaultWithJavaUtilTimeZone_(JavaUtilTimeZone_getTimeZoneWithNSString_(@"America/Los_Angeles"));
  JavaUtilLocale_setDefaultWithJavaUtilLocale_(JreLoadStatic(JavaUtilLocale, US));
  JreStrongAssignAndConsume(&gson_, new_ComGoogleGsonGson_init());
}

- (void)tearDown {
  JavaUtilTimeZone_setDefaultWithJavaUtilTimeZone_(oldTimeZone_);
  [super tearDown];
}

- (void)testClassSerialization {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:NSString_class_()];
  }
  @catch (JavaLangUnsupportedOperationException *expected) {
  }
  JreStrongAssign(&gson_, [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() registerTypeAdapterWithJavaLangReflectType:IOSClass_class_() withId:create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter_init()])) create]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"java.lang.String\"", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:NSString_class_()]);
}

- (void)testClassDeserialization {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"String.class" withIOSClass:[NSString_class_() java_getClass]];
  }
  @catch (JavaLangUnsupportedOperationException *expected) {
  }
  JreStrongAssign(&gson_, [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() registerTypeAdapterWithJavaLangReflectType:IOSClass_class_() withId:create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter_init()])) create]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(NSString_class_(), [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"java.lang.String" withIOSClass:IOSClass_class_()]);
}

- (void)testUrlSerialization {
  NSString *urlValue = @"http://google.com/";
  JavaNetURL *url = create_JavaNetURL_initWithNSString_(urlValue);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"http://google.com/\"", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:url]);
}

- (void)testUrlDeserialization {
  NSString *urlValue = @"http://google.com/";
  NSString *json = @"'http:\\/\\/google.com\\/'";
  JavaNetURL *target = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:JavaNetURL_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(urlValue, [((JavaNetURL *) nil_chk(target)) toExternalForm]);
  [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:JreStrcat("C$C", '"', urlValue, '"') withIOSClass:JavaNetURL_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(urlValue, [target toExternalForm]);
}

- (void)testUrlNullSerialization {
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField *target = create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField_init();
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"{}", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target]);
}

- (void)testUrlNullDeserialization {
  NSString *json = @"{}";
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField *target = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField_class_()];
  JunitFrameworkTestCase_assertNullWithId_(((ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField *) nil_chk(target))->url_);
}

- (void)testUriSerialization {
  NSString *uriValue = @"http://google.com/";
  JavaNetURI *uri = create_JavaNetURI_initWithNSString_(uriValue);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"http://google.com/\"", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:uri]);
}

- (void)testUriDeserialization {
  NSString *uriValue = @"http://google.com/";
  NSString *json = JreStrcat("C$C", '"', uriValue, '"');
  JavaNetURI *target = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:JavaNetURI_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(uriValue, [((JavaNetURI *) nil_chk(target)) toASCIIString]);
}

- (void)testNullSerialization {
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaLangBoolean_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaLangByte_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaLangShort_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaLangInteger_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaLangLong_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaLangDouble_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaLangFloat_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, NSNumber_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaLangCharacter_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, NSString_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaLangStringBuilder_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaLangStringBuffer_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaMathBigDecimal_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaMathBigInteger_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaUtilTreeSet_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaUtilArrayList_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaUtilHashSet_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaUtilProperties_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaNetURL_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaNetURI_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaUtilUUID_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaUtilLocale_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaNetInetAddress_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaUtilBitSet_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaUtilDate_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaUtilGregorianCalendar_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaUtilCalendar_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaSqlTime_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaSqlTimestamp_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaSqlDate_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, JavaLangEnum_class_());
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, IOSClass_class_());
}

- (void)testNullSerializationAndDeserializationWithIOSClass:(IOSClass *)c {
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(self, c);
}

- (void)testUuidSerialization {
  NSString *uuidValue = @"c237bec1-19ef-4858-a98e-521cf0aad4c0";
  JavaUtilUUID *uuid = JavaUtilUUID_fromStringWithNSString_(uuidValue);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(JreStrcat("C$C", '"', uuidValue, '"'), [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:uuid]);
}

- (void)testUuidDeserialization {
  NSString *uuidValue = @"c237bec1-19ef-4858-a98e-521cf0aad4c0";
  NSString *json = JreStrcat("C$C", '"', uuidValue, '"');
  JavaUtilUUID *target = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:JavaUtilUUID_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(uuidValue, [((JavaUtilUUID *) nil_chk(target)) description]);
}

- (void)testLocaleSerializationWithLanguage {
  JavaUtilLocale *target = create_JavaUtilLocale_initWithNSString_(@"en");
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"en\"", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target]);
}

- (void)testLocaleDeserializationWithLanguage {
  NSString *json = @"\"en\"";
  JavaUtilLocale *locale = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:JavaUtilLocale_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"en", [((JavaUtilLocale *) nil_chk(locale)) getLanguage]);
}

- (void)testLocaleSerializationWithLanguageCountry {
  JavaUtilLocale *target = JreLoadStatic(JavaUtilLocale, CANADA_FRENCH);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"fr_CA\"", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target]);
}

- (void)testLocaleDeserializationWithLanguageCountry {
  NSString *json = @"\"fr_CA\"";
  JavaUtilLocale *locale = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:JavaUtilLocale_class_()];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadStatic(JavaUtilLocale, CANADA_FRENCH), locale);
}

- (void)testLocaleSerializationWithLanguageCountryVariant {
  JavaUtilLocale *target = create_JavaUtilLocale_initWithNSString_withNSString_withNSString_(@"de", @"DE", @"EURO");
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"de_DE_EURO\"", json);
}

- (void)testLocaleDeserializationWithLanguageCountryVariant {
  NSString *json = @"\"de_DE_EURO\"";
  JavaUtilLocale *locale = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:JavaUtilLocale_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"de", [((JavaUtilLocale *) nil_chk(locale)) getLanguage]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"DE", [locale getCountry]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"EURO", [locale getVariant]);
}

- (void)testBigDecimalFieldSerialization {
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal *target = create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal_initWithNSString_(@"-122.01e-21");
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target];
  NSString *actual = [((NSString *) nil_chk(json)) java_substring:[json java_indexOf:':'] + 1 endIndex:[json java_indexOf:'}']];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(target->value_, create_JavaMathBigDecimal_initWithNSString_(actual));
}

- (void)testBigDecimalFieldDeserialization {
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal *expected = create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal_initWithNSString_(@"-122.01e-21");
  NSString *json = [expected getExpectedJson];
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal_class_()];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(expected->value_, ((ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal *) nil_chk(actual))->value_);
}

- (void)testBadValueForBigDecimalDeserialization {
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"{\"value\"=1.5e-1.0031}" withIOSClass:ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal_class_()];
    JunitFrameworkTestCase_failWithNSString_(@"Exponent of a BigDecimal must be an integer value.");
  }
  @catch (ComGoogleGsonJsonParseException *expected) {
  }
}

- (void)testBigIntegerFieldSerialization {
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger *target = create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger_initWithNSString_(@"23232323215323234234324324324324324324");
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_([target getExpectedJson], json);
}

- (void)testBigIntegerFieldDeserialization {
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger *expected = create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger_initWithNSString_(@"879697697697697697697697697697697697");
  NSString *json = [expected getExpectedJson];
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger_class_()];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(expected->value_, ((ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger *) nil_chk(actual))->value_);
}

- (void)testOverrideBigIntegerTypeAdapter {
  JreStrongAssign(&gson_, [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() registerTypeAdapterWithJavaLangReflectType:JavaMathBigInteger_class_() withId:create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_NumberAsStringAdapter_initWithIOSClass_(JavaMathBigInteger_class_())])) create]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"123\"", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:create_JavaMathBigInteger_initWithNSString_(@"123") withJavaLangReflectType:JavaMathBigInteger_class_()]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(create_JavaMathBigInteger_initWithNSString_(@"123"), [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"\"123\"" withIOSClass:JavaMathBigInteger_class_()]);
}

- (void)testOverrideBigDecimalTypeAdapter {
  JreStrongAssign(&gson_, [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() registerTypeAdapterWithJavaLangReflectType:JavaMathBigDecimal_class_() withId:create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_NumberAsStringAdapter_initWithIOSClass_(JavaMathBigDecimal_class_())])) create]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"1.1\"", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:create_JavaMathBigDecimal_initWithNSString_(@"1.1") withJavaLangReflectType:JavaMathBigDecimal_class_()]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(create_JavaMathBigDecimal_initWithNSString_(@"1.1"), [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"\"1.1\"" withIOSClass:JavaMathBigDecimal_class_()]);
}

- (void)testSetSerialization {
  ComGoogleGsonGson *gson = create_ComGoogleGsonGson_init();
  JavaUtilHashSet *s = create_JavaUtilHashSet_init();
  [s addWithId:@"blah"];
  NSString *json = [gson toJsonWithId:s];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[\"blah\"]", json);
  json = [gson toJsonWithId:s withJavaLangReflectType:JavaUtilSet_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[\"blah\"]", json);
}

- (void)testBitSetSerialization {
  ComGoogleGsonGson *gson = create_ComGoogleGsonGson_init();
  JavaUtilBitSet *bits = create_JavaUtilBitSet_init();
  [bits setWithInt:1];
  [bits setWithInt:3 withInt:6];
  [bits setWithInt:9];
  NSString *json = [gson toJsonWithId:bits];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[0,1,0,1,1,1,0,0,0,1]", json);
}

- (void)testBitSetDeserialization {
  JavaUtilBitSet *expected = create_JavaUtilBitSet_init();
  [expected setWithInt:0];
  [expected setWithInt:2 withInt:6];
  [expected setWithInt:8];
  ComGoogleGsonGson *gson = create_ComGoogleGsonGson_init();
  NSString *json = [gson toJsonWithId:expected];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(expected, [gson fromJsonWithNSString:json withIOSClass:JavaUtilBitSet_class_()]);
  json = @"[1,0,1,1,1,1,0,0,1,0,0,0]";
  JunitFrameworkTestCase_assertEqualsWithId_withId_(expected, [gson fromJsonWithNSString:json withIOSClass:JavaUtilBitSet_class_()]);
  json = @"[\"1\",\"0\",\"1\",\"1\",\"1\",\"1\",\"0\",\"0\",\"1\"]";
  JunitFrameworkTestCase_assertEqualsWithId_withId_(expected, [gson fromJsonWithNSString:json withIOSClass:JavaUtilBitSet_class_()]);
  json = @"[true,false,true,true,true,true,false,false,true,false,false]";
  JunitFrameworkTestCase_assertEqualsWithId_withId_(expected, [gson fromJsonWithNSString:json withIOSClass:JavaUtilBitSet_class_()]);
}

- (void)testDefaultDateSerialization {
  JavaUtilDate *now = create_JavaUtilDate_initWithLong_(1315806903103LL);
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:now];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"Sep 11, 2011 10:55:03 PM\"", json);
}

- (void)testDefaultDateDeserialization {
  NSString *json = @"'Dec 13, 2009 07:18:02 AM'";
  JavaUtilDate *extracted = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:JavaUtilDate_class_()];
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_assertEqualsDateWithJavaUtilDate_withInt_withInt_withInt_(self, extracted, 2009, 11, 13);
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_assertEqualsTimeWithJavaUtilDate_withInt_withInt_withInt_(self, extracted, 7, 18, 2);
}

- (void)assertEqualsDateWithJavaUtilDate:(JavaUtilDate *)date
                                 withInt:(jint)year
                                 withInt:(jint)month
                                 withInt:(jint)day {
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_assertEqualsDateWithJavaUtilDate_withInt_withInt_withInt_(self, date, year, month, day);
}

- (void)assertEqualsTimeWithJavaUtilDate:(JavaUtilDate *)date
                                 withInt:(jint)hours
                                 withInt:(jint)minutes
                                 withInt:(jint)seconds {
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_assertEqualsTimeWithJavaUtilDate_withInt_withInt_withInt_(self, date, hours, minutes, seconds);
}

- (void)testDefaultJavaSqlDateSerialization {
  JavaSqlDate *instant = create_JavaSqlDate_initWithLong_(1259875082000LL);
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:instant];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"Dec 3, 2009\"", json);
}

- (void)testDefaultJavaSqlDateDeserialization {
  NSString *json = @"'Dec 3, 2009'";
  JavaSqlDate *extracted = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:JavaSqlDate_class_()];
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_assertEqualsDateWithJavaUtilDate_withInt_withInt_withInt_(self, extracted, 2009, 11, 3);
}

- (void)testDefaultJavaSqlTimestampSerialization {
  JavaSqlTimestamp *now = create_JavaSqlTimestamp_initWithLong_(1259875082000LL);
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:now];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"Dec 3, 2009 1:18:02 PM\"", json);
}

- (void)testDefaultJavaSqlTimestampDeserialization {
  NSString *json = @"'Dec 3, 2009 1:18:02 PM'";
  JavaSqlTimestamp *extracted = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:JavaSqlTimestamp_class_()];
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_assertEqualsDateWithJavaUtilDate_withInt_withInt_withInt_(self, extracted, 2009, 11, 3);
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_assertEqualsTimeWithJavaUtilDate_withInt_withInt_withInt_(self, extracted, 13, 18, 2);
}

- (void)testDefaultJavaSqlTimeSerialization {
  JavaSqlTime *now = create_JavaSqlTime_initWithLong_(1259875082000LL);
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:now];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"01:18:02 PM\"", json);
}

- (void)testDefaultJavaSqlTimeDeserialization {
  NSString *json = @"'1:18:02 PM'";
  JavaSqlTime *extracted = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:JavaSqlTime_class_()];
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_assertEqualsTimeWithJavaUtilDate_withInt_withInt_withInt_(self, extracted, 13, 18, 2);
}

- (void)testDefaultDateSerializationUsingBuilder {
  ComGoogleGsonGson *gson = [create_ComGoogleGsonGsonBuilder_init() create];
  JavaUtilDate *now = create_JavaUtilDate_initWithLong_(1315806903103LL);
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:now];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"Sep 11, 2011 10:55:03 PM\"", json);
}

- (void)testDefaultDateDeserializationUsingBuilder {
  ComGoogleGsonGson *gson = [create_ComGoogleGsonGsonBuilder_init() create];
  JavaUtilDate *now = create_JavaUtilDate_initWithLong_(1315806903103LL);
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:now];
  JavaUtilDate *extracted = [gson fromJsonWithNSString:json withIOSClass:JavaUtilDate_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_([now description], [((JavaUtilDate *) nil_chk(extracted)) description]);
}

- (void)testDefaultCalendarSerialization {
  ComGoogleGsonGson *gson = [create_ComGoogleGsonGsonBuilder_init() create];
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:JavaUtilCalendar_getInstance()];
  JunitFrameworkTestCase_assertTrueWithBoolean_([((NSString *) nil_chk(json)) java_contains:@"year"]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([json java_contains:@"month"]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([json java_contains:@"dayOfMonth"]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([json java_contains:@"hourOfDay"]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([json java_contains:@"minute"]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([json java_contains:@"second"]);
}

- (void)testDefaultCalendarDeserialization {
  ComGoogleGsonGson *gson = [create_ComGoogleGsonGsonBuilder_init() create];
  NSString *json = @"{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}";
  JavaUtilCalendar *cal = [((ComGoogleGsonGson *) nil_chk(gson)) fromJsonWithNSString:json withIOSClass:JavaUtilCalendar_class_()];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(2009, [((JavaUtilCalendar *) nil_chk(cal)) getWithInt:JavaUtilCalendar_YEAR]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(2, [cal getWithInt:JavaUtilCalendar_MONTH]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(11, [cal getWithInt:JavaUtilCalendar_DAY_OF_MONTH]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(14, [cal getWithInt:JavaUtilCalendar_HOUR_OF_DAY]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(29, [cal getWithInt:JavaUtilCalendar_MINUTE]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(23, [cal getWithInt:JavaUtilCalendar_SECOND]);
}

- (void)testDefaultGregorianCalendarSerialization {
  ComGoogleGsonGson *gson = [create_ComGoogleGsonGsonBuilder_init() create];
  JavaUtilGregorianCalendar *cal = create_JavaUtilGregorianCalendar_init();
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:cal];
  JunitFrameworkTestCase_assertTrueWithBoolean_([((NSString *) nil_chk(json)) java_contains:@"year"]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([json java_contains:@"month"]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([json java_contains:@"dayOfMonth"]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([json java_contains:@"hourOfDay"]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([json java_contains:@"minute"]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([json java_contains:@"second"]);
}

- (void)testDefaultGregorianCalendarDeserialization {
  ComGoogleGsonGson *gson = [create_ComGoogleGsonGsonBuilder_init() create];
  NSString *json = @"{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}";
  JavaUtilGregorianCalendar *cal = [((ComGoogleGsonGson *) nil_chk(gson)) fromJsonWithNSString:json withIOSClass:JavaUtilGregorianCalendar_class_()];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(2009, [((JavaUtilGregorianCalendar *) nil_chk(cal)) getWithInt:JavaUtilCalendar_YEAR]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(2, [cal getWithInt:JavaUtilCalendar_MONTH]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(11, [cal getWithInt:JavaUtilCalendar_DAY_OF_MONTH]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(14, [cal getWithInt:JavaUtilCalendar_HOUR_OF_DAY]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(29, [cal getWithInt:JavaUtilCalendar_MINUTE]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(23, [cal getWithInt:JavaUtilCalendar_SECOND]);
}

- (void)testDateSerializationWithPattern {
  NSString *pattern = @"yyyy-MM-dd";
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() setDateFormatWithInt:JavaTextDateFormat_FULL])) setDateFormatWithNSString:pattern])) create];
  JavaUtilDate *now = create_JavaUtilDate_initWithLong_(1315806903103LL);
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:now];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"2011-09-11\"", json);
}

- (void)testDateDeserializationWithPattern {
  NSString *pattern = @"yyyy-MM-dd";
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() setDateFormatWithInt:JavaTextDateFormat_FULL])) setDateFormatWithNSString:pattern])) create];
  JavaUtilDate *now = create_JavaUtilDate_initWithLong_(1315806903103LL);
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:now];
  JavaUtilDate *extracted = [gson fromJsonWithNSString:json withIOSClass:JavaUtilDate_class_()];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_([now getYear], [((JavaUtilDate *) nil_chk(extracted)) getYear]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_([now getMonth], [extracted getMonth]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_([now getDay], [extracted getDay]);
}

- (void)testDateSerializationWithPatternNotOverridenByTypeAdapter {
  NSString *pattern = @"yyyy-MM-dd";
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() setDateFormatWithNSString:pattern])) registerTypeAdapterWithJavaLangReflectType:JavaUtilDate_class_() withId:create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_1_init()])) create];
  JavaUtilDate *now = create_JavaUtilDate_initWithLong_(1315806903103LL);
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:now];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"2011-09-11\"", json);
}

- (void)testDateSerializationInCollection {
  id<JavaLangReflectType> listOfDates = [create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_2_init() getType];
  JavaUtilTimeZone *defaultTimeZone = JavaUtilTimeZone_getDefault();
  JavaUtilTimeZone_setDefaultWithJavaUtilTimeZone_(JavaUtilTimeZone_getTimeZoneWithNSString_(@"UTC"));
  JavaUtilLocale *defaultLocale = JavaUtilLocale_getDefault();
  JavaUtilLocale_setDefaultWithJavaUtilLocale_(JreLoadStatic(JavaUtilLocale, US));
  @try {
    ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() setDateFormatWithNSString:@"yyyy-MM-dd"])) create];
    id<JavaUtilList> dates = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ create_JavaUtilDate_initWithLong_(0) } count:1 type:JavaUtilDate_class_()]);
    NSString *json = [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:dates withJavaLangReflectType:listOfDates];
    JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[\"1970-01-01\"]", json);
    JunitFrameworkTestCase_assertEqualsWithLong_withLong_(0LL, [((JavaUtilDate *) nil_chk([((id<JavaUtilList>) nil_chk([gson fromJsonWithNSString:@"[\"1970-01-01\"]" withJavaLangReflectType:listOfDates])) getWithInt:0])) getTime]);
  }
  @finally {
    JavaUtilTimeZone_setDefaultWithJavaUtilTimeZone_(defaultTimeZone);
    JavaUtilLocale_setDefaultWithJavaUtilLocale_(defaultLocale);
  }
}

- (void)testTimestampSerialization {
  JavaUtilTimeZone *defaultTimeZone = JavaUtilTimeZone_getDefault();
  JavaUtilTimeZone_setDefaultWithJavaUtilTimeZone_(JavaUtilTimeZone_getTimeZoneWithNSString_(@"UTC"));
  JavaUtilLocale *defaultLocale = JavaUtilLocale_getDefault();
  JavaUtilLocale_setDefaultWithJavaUtilLocale_(JreLoadStatic(JavaUtilLocale, US));
  @try {
    JavaSqlTimestamp *timestamp = create_JavaSqlTimestamp_initWithLong_(0LL);
    ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() setDateFormatWithNSString:@"yyyy-MM-dd"])) create];
    NSString *json = [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:timestamp withJavaLangReflectType:JavaSqlTimestamp_class_()];
    JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"1970-01-01\"", json);
    JunitFrameworkTestCase_assertEqualsWithLong_withLong_(0, [((JavaSqlTimestamp *) nil_chk([gson fromJsonWithNSString:@"\"1970-01-01\"" withIOSClass:JavaSqlTimestamp_class_()])) getTime]);
  }
  @finally {
    JavaUtilTimeZone_setDefaultWithJavaUtilTimeZone_(defaultTimeZone);
    JavaUtilLocale_setDefaultWithJavaUtilLocale_(defaultLocale);
  }
}

- (void)testSqlDateSerialization {
  JavaUtilTimeZone *defaultTimeZone = JavaUtilTimeZone_getDefault();
  JavaUtilTimeZone_setDefaultWithJavaUtilTimeZone_(JavaUtilTimeZone_getTimeZoneWithNSString_(@"UTC"));
  JavaUtilLocale *defaultLocale = JavaUtilLocale_getDefault();
  JavaUtilLocale_setDefaultWithJavaUtilLocale_(JreLoadStatic(JavaUtilLocale, US));
  @try {
    JavaSqlDate *sqlDate = create_JavaSqlDate_initWithLong_(0LL);
    ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() setDateFormatWithNSString:@"yyyy-MM-dd"])) create];
    NSString *json = [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:sqlDate withJavaLangReflectType:JavaSqlTimestamp_class_()];
    JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"1970-01-01\"", json);
    JunitFrameworkTestCase_assertEqualsWithLong_withLong_(0, [((JavaSqlDate *) nil_chk([gson fromJsonWithNSString:@"\"1970-01-01\"" withIOSClass:JavaSqlDate_class_()])) getTime]);
  }
  @finally {
    JavaUtilTimeZone_setDefaultWithJavaUtilTimeZone_(defaultTimeZone);
    JavaUtilLocale_setDefaultWithJavaUtilLocale_(defaultLocale);
  }
}

- (void)testJsonPrimitiveSerialization {
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"5", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:create_ComGoogleGsonJsonPrimitive_initWithNSNumber_(JavaLangInteger_valueOfWithInt_(5)) withJavaLangReflectType:ComGoogleGsonJsonElement_class_()]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"true", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:create_ComGoogleGsonJsonPrimitive_initWithJavaLangBoolean_(JavaLangBoolean_valueOfWithBoolean_(true)) withJavaLangReflectType:ComGoogleGsonJsonElement_class_()]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"foo\"", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:create_ComGoogleGsonJsonPrimitive_initWithNSString_(@"foo") withJavaLangReflectType:ComGoogleGsonJsonElement_class_()]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"a\"", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:create_ComGoogleGsonJsonPrimitive_initWithJavaLangCharacter_(JavaLangCharacter_valueOfWithChar_('a')) withJavaLangReflectType:ComGoogleGsonJsonElement_class_()]);
}

- (void)testJsonPrimitiveDeserialization {
  JunitFrameworkTestCase_assertEqualsWithId_withId_(create_ComGoogleGsonJsonPrimitive_initWithNSNumber_(JavaLangInteger_valueOfWithInt_(5)), [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"5" withIOSClass:ComGoogleGsonJsonElement_class_()]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(create_ComGoogleGsonJsonPrimitive_initWithNSNumber_(JavaLangInteger_valueOfWithInt_(5)), [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"5" withIOSClass:ComGoogleGsonJsonPrimitive_class_()]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(create_ComGoogleGsonJsonPrimitive_initWithJavaLangBoolean_(JavaLangBoolean_valueOfWithBoolean_(true)), [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"true" withIOSClass:ComGoogleGsonJsonElement_class_()]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(create_ComGoogleGsonJsonPrimitive_initWithJavaLangBoolean_(JavaLangBoolean_valueOfWithBoolean_(true)), [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"true" withIOSClass:ComGoogleGsonJsonPrimitive_class_()]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(create_ComGoogleGsonJsonPrimitive_initWithNSString_(@"foo"), [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"\"foo\"" withIOSClass:ComGoogleGsonJsonElement_class_()]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(create_ComGoogleGsonJsonPrimitive_initWithNSString_(@"foo"), [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"\"foo\"" withIOSClass:ComGoogleGsonJsonPrimitive_class_()]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(create_ComGoogleGsonJsonPrimitive_initWithJavaLangCharacter_(JavaLangCharacter_valueOfWithChar_('a')), [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"\"a\"" withIOSClass:ComGoogleGsonJsonElement_class_()]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(create_ComGoogleGsonJsonPrimitive_initWithJavaLangCharacter_(JavaLangCharacter_valueOfWithChar_('a')), [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"\"a\"" withIOSClass:ComGoogleGsonJsonPrimitive_class_()]);
}

- (void)testJsonNullSerialization {
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"null", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JreLoadStatic(ComGoogleGsonJsonNull, INSTANCE) withJavaLangReflectType:ComGoogleGsonJsonElement_class_()]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"null", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JreLoadStatic(ComGoogleGsonJsonNull, INSTANCE) withJavaLangReflectType:ComGoogleGsonJsonNull_class_()]);
}

- (void)testNullJsonElementSerialization {
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"null", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:nil withJavaLangReflectType:ComGoogleGsonJsonElement_class_()]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"null", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:nil withJavaLangReflectType:ComGoogleGsonJsonNull_class_()]);
}

- (void)testJsonArraySerialization {
  ComGoogleGsonJsonArray *array = create_ComGoogleGsonJsonArray_init();
  [array addWithComGoogleGsonJsonElement:create_ComGoogleGsonJsonPrimitive_initWithNSNumber_(JavaLangInteger_valueOfWithInt_(1))];
  [array addWithComGoogleGsonJsonElement:create_ComGoogleGsonJsonPrimitive_initWithNSNumber_(JavaLangInteger_valueOfWithInt_(2))];
  [array addWithComGoogleGsonJsonElement:create_ComGoogleGsonJsonPrimitive_initWithNSNumber_(JavaLangInteger_valueOfWithInt_(3))];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[1,2,3]", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:array withJavaLangReflectType:ComGoogleGsonJsonElement_class_()]);
}

- (void)testJsonArrayDeserialization {
  ComGoogleGsonJsonArray *array = create_ComGoogleGsonJsonArray_init();
  [array addWithComGoogleGsonJsonElement:create_ComGoogleGsonJsonPrimitive_initWithNSNumber_(JavaLangInteger_valueOfWithInt_(1))];
  [array addWithComGoogleGsonJsonElement:create_ComGoogleGsonJsonPrimitive_initWithNSNumber_(JavaLangInteger_valueOfWithInt_(2))];
  [array addWithComGoogleGsonJsonElement:create_ComGoogleGsonJsonPrimitive_initWithNSNumber_(JavaLangInteger_valueOfWithInt_(3))];
  NSString *json = @"[1,2,3]";
  JunitFrameworkTestCase_assertEqualsWithId_withId_(array, [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:ComGoogleGsonJsonElement_class_()]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(array, [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:ComGoogleGsonJsonArray_class_()]);
}

- (void)testJsonObjectSerialization {
  ComGoogleGsonJsonObject *object = create_ComGoogleGsonJsonObject_init();
  [object addWithNSString:@"foo" withComGoogleGsonJsonElement:create_ComGoogleGsonJsonPrimitive_initWithNSNumber_(JavaLangInteger_valueOfWithInt_(1))];
  [object addWithNSString:@"bar" withComGoogleGsonJsonElement:create_ComGoogleGsonJsonPrimitive_initWithNSNumber_(JavaLangInteger_valueOfWithInt_(2))];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"{\"foo\":1,\"bar\":2}", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:object withJavaLangReflectType:ComGoogleGsonJsonElement_class_()]);
}

- (void)testJsonObjectDeserialization {
  ComGoogleGsonJsonObject *object = create_ComGoogleGsonJsonObject_init();
  [object addWithNSString:@"foo" withComGoogleGsonJsonElement:create_ComGoogleGsonJsonPrimitive_initWithNSNumber_(JavaLangInteger_valueOfWithInt_(1))];
  [object addWithNSString:@"bar" withComGoogleGsonJsonElement:create_ComGoogleGsonJsonPrimitive_initWithNSNumber_(JavaLangInteger_valueOfWithInt_(2))];
  NSString *json = @"{\"foo\":1,\"bar\":2}";
  ComGoogleGsonJsonElement *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:ComGoogleGsonJsonElement_class_()];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(object, actual);
  ComGoogleGsonJsonObject *actualObj = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:ComGoogleGsonJsonObject_class_()];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(object, actualObj);
}

- (void)testJsonNullDeserialization {
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadStatic(ComGoogleGsonJsonNull, INSTANCE), [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"null" withIOSClass:ComGoogleGsonJsonElement_class_()]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadStatic(ComGoogleGsonJsonNull, INSTANCE), [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"null" withIOSClass:ComGoogleGsonJsonNull_class_()]);
}

- (void)testPropertiesSerialization {
  JavaUtilProperties *props = create_JavaUtilProperties_init();
  [props setPropertyWithNSString:@"foo" withNSString:@"bar"];
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:props];
  NSString *expected = @"{\"foo\":\"bar\"}";
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(expected, json);
}

- (void)testPropertiesDeserialization {
  NSString *json = @"{foo:'bar'}";
  JavaUtilProperties *props = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:JavaUtilProperties_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"bar", [((JavaUtilProperties *) nil_chk(props)) getPropertyWithNSString:@"foo"]);
}

- (void)testTreeSetSerialization {
  JavaUtilTreeSet *treeSet = create_JavaUtilTreeSet_init();
  [treeSet addWithId:@"Value1"];
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:treeSet];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[\"Value1\"]", json);
}

- (void)testTreeSetDeserialization {
  NSString *json = @"['Value1']";
  id<JavaLangReflectType> type = [create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_3_init() getType];
  JavaUtilTreeSet *treeSet = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withJavaLangReflectType:type];
  JunitFrameworkTestCase_assertTrueWithBoolean_([((JavaUtilTreeSet *) nil_chk(treeSet)) containsWithId:@"Value1"]);
}

- (void)testStringBuilderSerialization {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithNSString_(@"abc");
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:sb];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"abc\"", json);
}

- (void)testStringBuilderDeserialization {
  JavaLangStringBuilder *sb = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"'abc'" withIOSClass:JavaLangStringBuilder_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"abc", [((JavaLangStringBuilder *) nil_chk(sb)) description]);
}

- (void)testStringBufferSerialization {
  JavaLangStringBuffer *sb = create_JavaLangStringBuffer_initWithNSString_(@"abc");
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:sb];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"abc\"", json);
}

- (void)testStringBufferDeserialization {
  JavaLangStringBuffer *sb = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"'abc'" withIOSClass:JavaLangStringBuffer_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"abc", [((JavaLangStringBuffer *) nil_chk(sb)) description]);
}

- (void)dealloc {
  RELEASE_(gson_);
  RELEASE_(oldTimeZone_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(tearDown);
  methods[3].selector = @selector(testClassSerialization);
  methods[4].selector = @selector(testClassDeserialization);
  methods[5].selector = @selector(testUrlSerialization);
  methods[6].selector = @selector(testUrlDeserialization);
  methods[7].selector = @selector(testUrlNullSerialization);
  methods[8].selector = @selector(testUrlNullDeserialization);
  methods[9].selector = @selector(testUriSerialization);
  methods[10].selector = @selector(testUriDeserialization);
  methods[11].selector = @selector(testNullSerialization);
  methods[12].selector = @selector(testNullSerializationAndDeserializationWithIOSClass:);
  methods[13].selector = @selector(testUuidSerialization);
  methods[14].selector = @selector(testUuidDeserialization);
  methods[15].selector = @selector(testLocaleSerializationWithLanguage);
  methods[16].selector = @selector(testLocaleDeserializationWithLanguage);
  methods[17].selector = @selector(testLocaleSerializationWithLanguageCountry);
  methods[18].selector = @selector(testLocaleDeserializationWithLanguageCountry);
  methods[19].selector = @selector(testLocaleSerializationWithLanguageCountryVariant);
  methods[20].selector = @selector(testLocaleDeserializationWithLanguageCountryVariant);
  methods[21].selector = @selector(testBigDecimalFieldSerialization);
  methods[22].selector = @selector(testBigDecimalFieldDeserialization);
  methods[23].selector = @selector(testBadValueForBigDecimalDeserialization);
  methods[24].selector = @selector(testBigIntegerFieldSerialization);
  methods[25].selector = @selector(testBigIntegerFieldDeserialization);
  methods[26].selector = @selector(testOverrideBigIntegerTypeAdapter);
  methods[27].selector = @selector(testOverrideBigDecimalTypeAdapter);
  methods[28].selector = @selector(testSetSerialization);
  methods[29].selector = @selector(testBitSetSerialization);
  methods[30].selector = @selector(testBitSetDeserialization);
  methods[31].selector = @selector(testDefaultDateSerialization);
  methods[32].selector = @selector(testDefaultDateDeserialization);
  methods[33].selector = @selector(assertEqualsDateWithJavaUtilDate:withInt:withInt:withInt:);
  methods[34].selector = @selector(assertEqualsTimeWithJavaUtilDate:withInt:withInt:withInt:);
  methods[35].selector = @selector(testDefaultJavaSqlDateSerialization);
  methods[36].selector = @selector(testDefaultJavaSqlDateDeserialization);
  methods[37].selector = @selector(testDefaultJavaSqlTimestampSerialization);
  methods[38].selector = @selector(testDefaultJavaSqlTimestampDeserialization);
  methods[39].selector = @selector(testDefaultJavaSqlTimeSerialization);
  methods[40].selector = @selector(testDefaultJavaSqlTimeDeserialization);
  methods[41].selector = @selector(testDefaultDateSerializationUsingBuilder);
  methods[42].selector = @selector(testDefaultDateDeserializationUsingBuilder);
  methods[43].selector = @selector(testDefaultCalendarSerialization);
  methods[44].selector = @selector(testDefaultCalendarDeserialization);
  methods[45].selector = @selector(testDefaultGregorianCalendarSerialization);
  methods[46].selector = @selector(testDefaultGregorianCalendarDeserialization);
  methods[47].selector = @selector(testDateSerializationWithPattern);
  methods[48].selector = @selector(testDateDeserializationWithPattern);
  methods[49].selector = @selector(testDateSerializationWithPatternNotOverridenByTypeAdapter);
  methods[50].selector = @selector(testDateSerializationInCollection);
  methods[51].selector = @selector(testTimestampSerialization);
  methods[52].selector = @selector(testSqlDateSerialization);
  methods[53].selector = @selector(testJsonPrimitiveSerialization);
  methods[54].selector = @selector(testJsonPrimitiveDeserialization);
  methods[55].selector = @selector(testJsonNullSerialization);
  methods[56].selector = @selector(testNullJsonElementSerialization);
  methods[57].selector = @selector(testJsonArraySerialization);
  methods[58].selector = @selector(testJsonArrayDeserialization);
  methods[59].selector = @selector(testJsonObjectSerialization);
  methods[60].selector = @selector(testJsonObjectDeserialization);
  methods[61].selector = @selector(testJsonNullDeserialization);
  methods[62].selector = @selector(testPropertiesSerialization);
  methods[63].selector = @selector(testPropertiesDeserialization);
  methods[64].selector = @selector(testTreeSetSerialization);
  methods[65].selector = @selector(testTreeSetDeserialization);
  methods[66].selector = @selector(testStringBuilderSerialization);
  methods[67].selector = @selector(testStringBuilderDeserialization);
  methods[68].selector = @selector(testStringBufferSerialization);
  methods[69].selector = @selector(testStringBufferDeserialization);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "gson_", "LComGoogleGsonGson;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "oldTimeZone_", "LJavaUtilTimeZone;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "testNullSerializationAndDeserialization", "LIOSClass;", "(Ljava/lang/Class<*>;)V", "assertEqualsDate", "LJavaUtilDate;III", "assertEqualsTime", "LComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField;LComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal;LComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger;LComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter;LComGoogleGsonFunctionalDefaultTypeAdaptersTest_NumberAsStringAdapter;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalDefaultTypeAdaptersTest = { "DefaultTypeAdaptersTest", "com.google.gson.functional", ptrTable, methods, fields, 7, 0x1, 70, 2, -1, 7, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalDefaultTypeAdaptersTest;
}

@end

void ComGoogleGsonFunctionalDefaultTypeAdaptersTest_init(ComGoogleGsonFunctionalDefaultTypeAdaptersTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComGoogleGsonFunctionalDefaultTypeAdaptersTest *new_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalDefaultTypeAdaptersTest, init)
}

ComGoogleGsonFunctionalDefaultTypeAdaptersTest *create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalDefaultTypeAdaptersTest, init)
}

void ComGoogleGsonFunctionalDefaultTypeAdaptersTest_testNullSerializationAndDeserializationWithIOSClass_(ComGoogleGsonFunctionalDefaultTypeAdaptersTest *self, IOSClass *c) {
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"null", [((ComGoogleGsonGson *) nil_chk(self->gson_)) toJsonWithId:nil withJavaLangReflectType:c]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(nil, [((ComGoogleGsonGson *) nil_chk(self->gson_)) fromJsonWithNSString:@"null" withIOSClass:c]);
}

void ComGoogleGsonFunctionalDefaultTypeAdaptersTest_assertEqualsDateWithJavaUtilDate_withInt_withInt_withInt_(ComGoogleGsonFunctionalDefaultTypeAdaptersTest *self, JavaUtilDate *date, jint year, jint month, jint day) {
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(year - 1900, [((JavaUtilDate *) nil_chk(date)) getYear]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(month, [date getMonth]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(day, [date getDate]);
}

void ComGoogleGsonFunctionalDefaultTypeAdaptersTest_assertEqualsTimeWithJavaUtilDate_withInt_withInt_withInt_(ComGoogleGsonFunctionalDefaultTypeAdaptersTest *self, JavaUtilDate *date, jint hours, jint minutes, jint seconds) {
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(hours, [((JavaUtilDate *) nil_chk(date)) getHours]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(minutes, [date getMinutes]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(seconds, [date getSeconds]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalDefaultTypeAdaptersTest)

@implementation ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(url_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "url_", "LJavaNetURL;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleGsonFunctionalDefaultTypeAdaptersTest;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField = { "ClassWithUrlField", "com.google.gson.functional", ptrTable, methods, fields, 7, 0xa, 1, 1, 0, -1, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField;
}

@end

void ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField_init(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField *self) {
  NSObject_init(self);
}

ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField *new_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField, init)
}

ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField *create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithUrlField)

@implementation ComGoogleGsonFunctionalDefaultTypeAdaptersTest_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaUtilDate *)deserializeWithComGoogleGsonJsonElement:(ComGoogleGsonJsonElement *)json
                                  withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT
              withComGoogleGsonJsonDeserializationContext:(id<ComGoogleGsonJsonDeserializationContext>)context {
  return create_JavaUtilDate_initWithLong_(1315806903103LL);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(deserializeWithComGoogleGsonJsonElement:withJavaLangReflectType:withComGoogleGsonJsonDeserializationContext:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "deserialize", "LComGoogleGsonJsonElement;LJavaLangReflectType;LComGoogleGsonJsonDeserializationContext;", "LComGoogleGsonJsonParseException;", "LComGoogleGsonFunctionalDefaultTypeAdaptersTest;", "testDateSerializationWithPatternNotOverridenByTypeAdapter", "Ljava/lang/Object;Lcom/google/gson/JsonDeserializer<Ljava/util/Date;>;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalDefaultTypeAdaptersTest_1 = { "", "com.google.gson.functional", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 3, -1, 4, 5, -1 };
  return &_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_1;
}

@end

void ComGoogleGsonFunctionalDefaultTypeAdaptersTest_1_init(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_1 *self) {
  NSObject_init(self);
}

ComGoogleGsonFunctionalDefaultTypeAdaptersTest_1 *new_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_1_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_1, init)
}

ComGoogleGsonFunctionalDefaultTypeAdaptersTest_1 *create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_1, init)
}

@implementation ComGoogleGsonFunctionalDefaultTypeAdaptersTest_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleGsonFunctionalDefaultTypeAdaptersTest;", "testDateSerializationInCollection", "Lcom/google/gson/reflect/TypeToken<Ljava/util/List<Ljava/util/Date;>;>;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalDefaultTypeAdaptersTest_2 = { "", "com.google.gson.functional", ptrTable, methods, NULL, 7, 0x8018, 1, 0, 0, -1, 1, 2, -1 };
  return &_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_2;
}

@end

void ComGoogleGsonFunctionalDefaultTypeAdaptersTest_2_init(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_2 *self) {
  ComGoogleGsonReflectTypeToken_init(self);
}

ComGoogleGsonFunctionalDefaultTypeAdaptersTest_2 *new_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_2_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_2, init)
}

ComGoogleGsonFunctionalDefaultTypeAdaptersTest_2 *create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_2_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_2, init)
}

@implementation ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal

- (instancetype)initWithNSString:(NSString *)value {
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal_initWithNSString_(self, value);
  return self;
}

- (NSString *)getExpectedJson {
  return JreStrcat("$$C", @"{\"value\":", [((JavaMathBigDecimal *) nil_chk(value_)) toEngineeringString], '}');
}

- (void)dealloc {
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(getExpectedJson);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LJavaMathBigDecimal;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LComGoogleGsonFunctionalDefaultTypeAdaptersTest;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal = { "ClassWithBigDecimal", "com.google.gson.functional", ptrTable, methods, fields, 7, 0xa, 2, 1, 1, -1, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal;
}

@end

void ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal_initWithNSString_(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal *self, NSString *value) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->value_, new_JavaMathBigDecimal_initWithNSString_(value));
}

ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal *new_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal_initWithNSString_(NSString *value) {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal, initWithNSString_, value)
}

ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal *create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal_initWithNSString_(NSString *value) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal, initWithNSString_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigDecimal)

@implementation ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger

- (instancetype)initWithNSString:(NSString *)value {
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger_initWithNSString_(self, value);
  return self;
}

- (NSString *)getExpectedJson {
  return JreStrcat("$@C", @"{\"value\":", value_, '}');
}

- (void)dealloc {
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(getExpectedJson);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LComGoogleGsonFunctionalDefaultTypeAdaptersTest;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger = { "ClassWithBigInteger", "com.google.gson.functional", ptrTable, methods, fields, 7, 0xa, 2, 1, 1, -1, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger;
}

@end

void ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger_initWithNSString_(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger *self, NSString *value) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->value_, new_JavaMathBigInteger_initWithNSString_(value));
}

ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger *new_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger_initWithNSString_(NSString *value) {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger, initWithNSString_, value)
}

ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger *create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger_initWithNSString_(NSString *value) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger, initWithNSString_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_ClassWithBigInteger)

@implementation ComGoogleGsonFunctionalDefaultTypeAdaptersTest_3

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleGsonFunctionalDefaultTypeAdaptersTest;", "testTreeSetDeserialization", "Lcom/google/gson/reflect/TypeToken<Ljava/util/TreeSet<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalDefaultTypeAdaptersTest_3 = { "", "com.google.gson.functional", ptrTable, methods, NULL, 7, 0x8018, 1, 0, 0, -1, 1, 2, -1 };
  return &_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_3;
}

@end

void ComGoogleGsonFunctionalDefaultTypeAdaptersTest_3_init(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_3 *self) {
  ComGoogleGsonReflectTypeToken_init(self);
}

ComGoogleGsonFunctionalDefaultTypeAdaptersTest_3 *new_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_3_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_3, init)
}

ComGoogleGsonFunctionalDefaultTypeAdaptersTest_3 *create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_3_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_3, init)
}

@implementation ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)writeWithComGoogleGsonStreamJsonWriter:(ComGoogleGsonStreamJsonWriter *)outArg
                                        withId:(IOSClass *)value {
  [((ComGoogleGsonStreamJsonWriter *) nil_chk(outArg)) valueWithNSString:[((IOSClass *) nil_chk(value)) getName]];
}

- (IOSClass *)readWithComGoogleGsonStreamJsonReader:(ComGoogleGsonStreamJsonReader *)inArg {
  NSString *className_ = [((ComGoogleGsonStreamJsonReader *) nil_chk(inArg)) nextString];
  @try {
    return IOSClass_forName_(className_);
  }
  @catch (JavaLangClassNotFoundException *e) {
    @throw create_JavaIoIOException_initWithJavaLangThrowable_(e);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(writeWithComGoogleGsonStreamJsonWriter:withId:);
  methods[2].selector = @selector(readWithComGoogleGsonStreamJsonReader:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "write", "LComGoogleGsonStreamJsonWriter;LIOSClass;", "LJavaIoIOException;", "read", "LComGoogleGsonStreamJsonReader;", "LComGoogleGsonFunctionalDefaultTypeAdaptersTest;", "Lcom/google/gson/TypeAdapter<Ljava/lang/Class;>;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter = { "MyClassTypeAdapter", "com.google.gson.functional", ptrTable, methods, NULL, 7, 0xa, 3, 0, 5, -1, -1, 6, -1 };
  return &_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter;
}

@end

void ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter_init(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter *self) {
  ComGoogleGsonTypeAdapter_init(self);
}

ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter *new_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter, init)
}

ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter *create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_MyClassTypeAdapter)

@implementation ComGoogleGsonFunctionalDefaultTypeAdaptersTest_NumberAsStringAdapter

- (instancetype)initWithIOSClass:(IOSClass *)type {
  ComGoogleGsonFunctionalDefaultTypeAdaptersTest_NumberAsStringAdapter_initWithIOSClass_(self, type);
  return self;
}

- (void)writeWithComGoogleGsonStreamJsonWriter:(ComGoogleGsonStreamJsonWriter *)outArg
                                        withId:(NSNumber *)value {
  [((ComGoogleGsonStreamJsonWriter *) nil_chk(outArg)) valueWithNSString:[((NSNumber *) nil_chk(value)) description]];
}

- (NSNumber *)readWithComGoogleGsonStreamJsonReader:(ComGoogleGsonStreamJsonReader *)inArg {
  @try {
    return [((JavaLangReflectConstructor *) nil_chk(constructor_)) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [((ComGoogleGsonStreamJsonReader *) nil_chk(inArg)) nextString] } count:1 type:NSObject_class_()]];
  }
  @catch (JavaLangException *e) {
    @throw create_JavaLangAssertionError_initWithId_(e);
  }
}

- (void)dealloc {
  RELEASE_(constructor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "LNSNumber;", 0x1, 6, 7, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIOSClass:);
  methods[1].selector = @selector(writeWithComGoogleGsonStreamJsonWriter:withId:);
  methods[2].selector = @selector(readWithComGoogleGsonStreamJsonReader:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "constructor_", "LJavaLangReflectConstructor;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;", "LJavaLangException;", "(Ljava/lang/Class<+Ljava/lang/Number;>;)V", "write", "LComGoogleGsonStreamJsonWriter;LNSNumber;", "LJavaIoIOException;", "read", "LComGoogleGsonStreamJsonReader;", "Ljava/lang/reflect/Constructor<+Ljava/lang/Number;>;", "LComGoogleGsonFunctionalDefaultTypeAdaptersTest;", "Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalDefaultTypeAdaptersTest_NumberAsStringAdapter = { "NumberAsStringAdapter", "com.google.gson.functional", ptrTable, methods, fields, 7, 0x8, 3, 1, 9, -1, -1, 10, -1 };
  return &_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_NumberAsStringAdapter;
}

@end

void ComGoogleGsonFunctionalDefaultTypeAdaptersTest_NumberAsStringAdapter_initWithIOSClass_(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_NumberAsStringAdapter *self, IOSClass *type) {
  ComGoogleGsonTypeAdapter_init(self);
  JreStrongAssign(&self->constructor_, [((IOSClass *) nil_chk(type)) getConstructor:[IOSObjectArray arrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()]]);
}

ComGoogleGsonFunctionalDefaultTypeAdaptersTest_NumberAsStringAdapter *new_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_NumberAsStringAdapter_initWithIOSClass_(IOSClass *type) {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_NumberAsStringAdapter, initWithIOSClass_, type)
}

ComGoogleGsonFunctionalDefaultTypeAdaptersTest_NumberAsStringAdapter *create_ComGoogleGsonFunctionalDefaultTypeAdaptersTest_NumberAsStringAdapter_initWithIOSClass_(IOSClass *type) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_NumberAsStringAdapter, initWithIOSClass_, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalDefaultTypeAdaptersTest_NumberAsStringAdapter)
