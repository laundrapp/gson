//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/gson/FieldNamingPolicy.h"
#include "com/google/gson/FieldNamingStrategy.h"
#include "com/google/gson/Gson.h"
#include "com/google/gson/GsonBuilder.h"
#include "com/google/gson/annotations/SerializedName.h"
#include "com/google/gson/common/TestTypes.h"
#include "com/google/gson/functional/NamingPolicyTest.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Field.h"
#include "junit/framework/TestCase.h"

@interface ComGoogleGsonFunctionalNamingPolicyTest () {
 @public
  ComGoogleGsonGsonBuilder *builder_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalNamingPolicyTest, builder_, ComGoogleGsonGsonBuilder *)

__attribute__((unused)) static IOSObjectArray *ComGoogleGsonFunctionalNamingPolicyTest_AtName__Annotations$0(void);

@interface ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy : NSObject < ComGoogleGsonFieldNamingStrategy >

- (instancetype)init;

- (NSString *)translateNameWithJavaLangReflectField:(JavaLangReflectField *)f;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy)

__attribute__((unused)) static void ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy_init(ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy *self);

__attribute__((unused)) static ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy *new_ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy *create_ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy)

@interface ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields : NSObject {
 @public
  JavaLangInteger *a_;
  JavaLangDouble *b_;
}

- (instancetype)initWithJavaLangInteger:(JavaLangInteger *)a;

- (instancetype)initWithJavaLangDouble:(JavaLangDouble *)b;

- (instancetype)initWithJavaLangInteger:(JavaLangInteger *)a
                     withJavaLangDouble:(JavaLangDouble *)b;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields)

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields, a_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields, b_, JavaLangDouble *)

__attribute__((unused)) static void ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangInteger_(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields *self, JavaLangInteger *a);

__attribute__((unused)) static ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields *new_ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangInteger_(JavaLangInteger *a) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields *create_ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangInteger_(JavaLangInteger *a);

__attribute__((unused)) static void ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangDouble_(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields *self, JavaLangDouble *b);

__attribute__((unused)) static ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields *new_ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangDouble_(JavaLangDouble *b) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields *create_ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangDouble_(JavaLangDouble *b);

__attribute__((unused)) static void ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangInteger_withJavaLangDouble_(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields *self, JavaLangInteger *a, JavaLangDouble *b);

__attribute__((unused)) static ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields *new_ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangInteger_withJavaLangDouble_(JavaLangInteger *a, JavaLangDouble *b) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields *create_ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangInteger_withJavaLangDouble_(JavaLangInteger *a, JavaLangDouble *b);

__attribute__((unused)) static IOSObjectArray *ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields__Annotations$0(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields)

@interface ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName : NSObject {
 @public
  jlong value_;
}

- (instancetype)initWithLong:(jlong)value;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName)

__attribute__((unused)) static void ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName_initWithLong_(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName *self, jlong value);

__attribute__((unused)) static ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName *new_ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName_initWithLong_(jlong value) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName *create_ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName_initWithLong_(jlong value);

__attribute__((unused)) static IOSObjectArray *ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName__Annotations$0(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName)

@implementation ComGoogleGsonFunctionalNamingPolicyTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalNamingPolicyTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  [super setUp];
  JreStrongAssignAndConsume(&builder_, new_ComGoogleGsonGsonBuilder_init());
}

- (void)testGsonWithNonDefaultFieldNamingPolicySerialization {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([((ComGoogleGsonGsonBuilder *) nil_chk(builder_)) setFieldNamingPolicyWithComGoogleGsonFieldNamingPolicy:JreLoadEnum(ComGoogleGsonFieldNamingPolicy, UPPER_CAMEL_CASE)])) create];
  ComGoogleGsonCommonTestTypes_StringWrapper *target = create_ComGoogleGsonCommonTestTypes_StringWrapper_initWithNSString_(@"blah");
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(JreStrcat("$$$", @"{\"SomeConstantStringInstanceField\":\"", target->someConstantStringInstanceField_, @"\"}"), [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:target]);
}

- (void)testGsonWithNonDefaultFieldNamingPolicyDeserialiation {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([((ComGoogleGsonGsonBuilder *) nil_chk(builder_)) setFieldNamingPolicyWithComGoogleGsonFieldNamingPolicy:JreLoadEnum(ComGoogleGsonFieldNamingPolicy, UPPER_CAMEL_CASE)])) create];
  NSString *target = @"{\"SomeConstantStringInstanceField\":\"someValue\"}";
  ComGoogleGsonCommonTestTypes_StringWrapper *deserializedObject = [((ComGoogleGsonGson *) nil_chk(gson)) fromJsonWithNSString:target withIOSClass:ComGoogleGsonCommonTestTypes_StringWrapper_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"someValue", ((ComGoogleGsonCommonTestTypes_StringWrapper *) nil_chk(deserializedObject))->someConstantStringInstanceField_);
}

- (void)testGsonWithLowerCaseDashPolicySerialization {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([((ComGoogleGsonGsonBuilder *) nil_chk(builder_)) setFieldNamingPolicyWithComGoogleGsonFieldNamingPolicy:JreLoadEnum(ComGoogleGsonFieldNamingPolicy, LOWER_CASE_WITH_DASHES)])) create];
  ComGoogleGsonCommonTestTypes_StringWrapper *target = create_ComGoogleGsonCommonTestTypes_StringWrapper_initWithNSString_(@"blah");
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(JreStrcat("$$$", @"{\"some-constant-string-instance-field\":\"", target->someConstantStringInstanceField_, @"\"}"), [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:target]);
}

- (void)testGsonWithLowerCaseDashPolicyDeserialiation {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([((ComGoogleGsonGsonBuilder *) nil_chk(builder_)) setFieldNamingPolicyWithComGoogleGsonFieldNamingPolicy:JreLoadEnum(ComGoogleGsonFieldNamingPolicy, LOWER_CASE_WITH_DASHES)])) create];
  NSString *target = @"{\"some-constant-string-instance-field\":\"someValue\"}";
  ComGoogleGsonCommonTestTypes_StringWrapper *deserializedObject = [((ComGoogleGsonGson *) nil_chk(gson)) fromJsonWithNSString:target withIOSClass:ComGoogleGsonCommonTestTypes_StringWrapper_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"someValue", ((ComGoogleGsonCommonTestTypes_StringWrapper *) nil_chk(deserializedObject))->someConstantStringInstanceField_);
}

- (void)testGsonWithLowerCaseUnderscorePolicySerialization {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([((ComGoogleGsonGsonBuilder *) nil_chk(builder_)) setFieldNamingPolicyWithComGoogleGsonFieldNamingPolicy:JreLoadEnum(ComGoogleGsonFieldNamingPolicy, LOWER_CASE_WITH_UNDERSCORES)])) create];
  ComGoogleGsonCommonTestTypes_StringWrapper *target = create_ComGoogleGsonCommonTestTypes_StringWrapper_initWithNSString_(@"blah");
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(JreStrcat("$$$", @"{\"some_constant_string_instance_field\":\"", target->someConstantStringInstanceField_, @"\"}"), [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:target]);
}

- (void)testGsonWithLowerCaseUnderscorePolicyDeserialiation {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([((ComGoogleGsonGsonBuilder *) nil_chk(builder_)) setFieldNamingPolicyWithComGoogleGsonFieldNamingPolicy:JreLoadEnum(ComGoogleGsonFieldNamingPolicy, LOWER_CASE_WITH_UNDERSCORES)])) create];
  NSString *target = @"{\"some_constant_string_instance_field\":\"someValue\"}";
  ComGoogleGsonCommonTestTypes_StringWrapper *deserializedObject = [((ComGoogleGsonGson *) nil_chk(gson)) fromJsonWithNSString:target withIOSClass:ComGoogleGsonCommonTestTypes_StringWrapper_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"someValue", ((ComGoogleGsonCommonTestTypes_StringWrapper *) nil_chk(deserializedObject))->someConstantStringInstanceField_);
}

- (void)testGsonWithSerializedNameFieldNamingPolicySerialization {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk(builder_)) create];
  ComGoogleGsonCommonTestTypes_ClassWithSerializedNameFields *expected = create_ComGoogleGsonCommonTestTypes_ClassWithSerializedNameFields_initWithInt_withInt_(5, 6);
  NSString *actual = [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:expected];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_([expected getExpectedJson], actual);
}

- (void)testGsonWithSerializedNameFieldNamingPolicyDeserialization {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk(builder_)) create];
  ComGoogleGsonCommonTestTypes_ClassWithSerializedNameFields *expected = create_ComGoogleGsonCommonTestTypes_ClassWithSerializedNameFields_initWithInt_withInt_(5, 7);
  ComGoogleGsonCommonTestTypes_ClassWithSerializedNameFields *actual = [((ComGoogleGsonGson *) nil_chk(gson)) fromJsonWithNSString:[expected getExpectedJson] withIOSClass:ComGoogleGsonCommonTestTypes_ClassWithSerializedNameFields_class_()];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(expected->f_, ((ComGoogleGsonCommonTestTypes_ClassWithSerializedNameFields *) nil_chk(actual))->f_);
}

- (void)testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk(builder_)) create];
  @try {
    ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields *target = create_ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangInteger_(JavaLangInteger_valueOfWithInt_(10));
    [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:target];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
}

- (void)testGsonWithUpperCamelCaseSpacesPolicySerialiation {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([((ComGoogleGsonGsonBuilder *) nil_chk(builder_)) setFieldNamingPolicyWithComGoogleGsonFieldNamingPolicy:JreLoadEnum(ComGoogleGsonFieldNamingPolicy, UPPER_CAMEL_CASE_WITH_SPACES)])) create];
  ComGoogleGsonCommonTestTypes_StringWrapper *target = create_ComGoogleGsonCommonTestTypes_StringWrapper_initWithNSString_(@"blah");
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(JreStrcat("$$$", @"{\"Some Constant String Instance Field\":\"", target->someConstantStringInstanceField_, @"\"}"), [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:target]);
}

- (void)testGsonWithUpperCamelCaseSpacesPolicyDeserialiation {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([((ComGoogleGsonGsonBuilder *) nil_chk(builder_)) setFieldNamingPolicyWithComGoogleGsonFieldNamingPolicy:JreLoadEnum(ComGoogleGsonFieldNamingPolicy, UPPER_CAMEL_CASE_WITH_SPACES)])) create];
  NSString *target = @"{\"Some Constant String Instance Field\":\"someValue\"}";
  ComGoogleGsonCommonTestTypes_StringWrapper *deserializedObject = [((ComGoogleGsonGson *) nil_chk(gson)) fromJsonWithNSString:target withIOSClass:ComGoogleGsonCommonTestTypes_StringWrapper_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"someValue", ((ComGoogleGsonCommonTestTypes_StringWrapper *) nil_chk(deserializedObject))->someConstantStringInstanceField_);
}

- (void)testDeprecatedNamingStrategy {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([((ComGoogleGsonGsonBuilder *) nil_chk(builder_)) setFieldNamingStrategyWithComGoogleGsonFieldNamingStrategy:create_ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy_init()])) create];
  ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields *target = create_ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangInteger_(JavaLangInteger_valueOfWithInt_(10));
  NSString *actual = [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:target];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"{\"A\":10}", actual);
}

- (void)testComplexFieldNameStrategy {
  ComGoogleGsonGson *gson = create_ComGoogleGsonGson_init();
  NSString *json = [gson toJsonWithId:create_ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName_initWithLong_(10)];
  NSString *escapedFieldName = @"@value\\\"_s$\\\\";
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(JreStrcat("$$$", @"{\"", escapedFieldName, @"\":10}"), json);
  ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName *obj = [gson fromJsonWithNSString:json withIOSClass:ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName_class_()];
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(10, ((ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName *) nil_chk(obj))->value_);
}

- (void)testAtSignInSerializedName {
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"{\"@foo\":\"bar\"}", [create_ComGoogleGsonGson_init() toJsonWithId:create_ComGoogleGsonFunctionalNamingPolicyTest_AtName_init()]);
}

- (void)dealloc {
  RELEASE_(builder_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(testGsonWithNonDefaultFieldNamingPolicySerialization);
  methods[3].selector = @selector(testGsonWithNonDefaultFieldNamingPolicyDeserialiation);
  methods[4].selector = @selector(testGsonWithLowerCaseDashPolicySerialization);
  methods[5].selector = @selector(testGsonWithLowerCaseDashPolicyDeserialiation);
  methods[6].selector = @selector(testGsonWithLowerCaseUnderscorePolicySerialization);
  methods[7].selector = @selector(testGsonWithLowerCaseUnderscorePolicyDeserialiation);
  methods[8].selector = @selector(testGsonWithSerializedNameFieldNamingPolicySerialization);
  methods[9].selector = @selector(testGsonWithSerializedNameFieldNamingPolicyDeserialization);
  methods[10].selector = @selector(testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization);
  methods[11].selector = @selector(testGsonWithUpperCamelCaseSpacesPolicySerialiation);
  methods[12].selector = @selector(testGsonWithUpperCamelCaseSpacesPolicyDeserialiation);
  methods[13].selector = @selector(testDeprecatedNamingStrategy);
  methods[14].selector = @selector(testComplexFieldNameStrategy);
  methods[15].selector = @selector(testAtSignInSerializedName);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "builder_", "LComGoogleGsonGsonBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LComGoogleGsonFunctionalNamingPolicyTest_AtName;LComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy;LComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields;LComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalNamingPolicyTest = { "NamingPolicyTest", "com.google.gson.functional", ptrTable, methods, fields, 7, 0x1, 16, 1, -1, 1, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalNamingPolicyTest;
}

@end

void ComGoogleGsonFunctionalNamingPolicyTest_init(ComGoogleGsonFunctionalNamingPolicyTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComGoogleGsonFunctionalNamingPolicyTest *new_ComGoogleGsonFunctionalNamingPolicyTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalNamingPolicyTest, init)
}

ComGoogleGsonFunctionalNamingPolicyTest *create_ComGoogleGsonFunctionalNamingPolicyTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalNamingPolicyTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalNamingPolicyTest)

@implementation ComGoogleGsonFunctionalNamingPolicyTest_AtName

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalNamingPolicyTest_AtName_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(f_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "f_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, 0 },
  };
  static const void *ptrTable[] = { (void *)&ComGoogleGsonFunctionalNamingPolicyTest_AtName__Annotations$0, "LComGoogleGsonFunctionalNamingPolicyTest;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalNamingPolicyTest_AtName = { "AtName", "com.google.gson.functional", ptrTable, methods, fields, 7, 0x8, 1, 1, 1, -1, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalNamingPolicyTest_AtName;
}

@end

void ComGoogleGsonFunctionalNamingPolicyTest_AtName_init(ComGoogleGsonFunctionalNamingPolicyTest_AtName *self) {
  NSObject_init(self);
  JreStrongAssign(&self->f_, @"bar");
}

ComGoogleGsonFunctionalNamingPolicyTest_AtName *new_ComGoogleGsonFunctionalNamingPolicyTest_AtName_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalNamingPolicyTest_AtName, init)
}

ComGoogleGsonFunctionalNamingPolicyTest_AtName *create_ComGoogleGsonFunctionalNamingPolicyTest_AtName_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalNamingPolicyTest_AtName, init)
}

IOSObjectArray *ComGoogleGsonFunctionalNamingPolicyTest_AtName__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_ComGoogleGsonAnnotationsSerializedName(@"@foo") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalNamingPolicyTest_AtName)

@implementation ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)translateNameWithJavaLangReflectField:(JavaLangReflectField *)f {
  return [((NSString *) nil_chk([((JavaLangReflectField *) nil_chk(f)) getName])) uppercaseString];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(translateNameWithJavaLangReflectField:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "translateName", "LJavaLangReflectField;", "LComGoogleGsonFunctionalNamingPolicyTest;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy = { "UpperCaseNamingStrategy", "com.google.gson.functional", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy;
}

@end

void ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy_init(ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy *self) {
  NSObject_init(self);
}

ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy *new_ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy, init)
}

ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy *create_ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalNamingPolicyTest_UpperCaseNamingStrategy)

@implementation ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields

- (instancetype)initWithJavaLangInteger:(JavaLangInteger *)a {
  ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangInteger_(self, a);
  return self;
}

- (instancetype)initWithJavaLangDouble:(JavaLangDouble *)b {
  ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangDouble_(self, b);
  return self;
}

- (instancetype)initWithJavaLangInteger:(JavaLangInteger *)a
                     withJavaLangDouble:(JavaLangDouble *)b {
  ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangInteger_withJavaLangDouble_(self, a, b);
  return self;
}

- (void)dealloc {
  RELEASE_(a_);
  RELEASE_(b_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangInteger:);
  methods[1].selector = @selector(initWithJavaLangDouble:);
  methods[2].selector = @selector(initWithJavaLangInteger:withJavaLangDouble:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "a_", "LJavaLangInteger;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "b_", "LJavaLangDouble;", .constantValue.asLong = 0, 0x1, -1, -1, -1, 3 },
  };
  static const void *ptrTable[] = { "LJavaLangInteger;", "LJavaLangDouble;", "LJavaLangInteger;LJavaLangDouble;", (void *)&ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields__Annotations$0, "LComGoogleGsonFunctionalNamingPolicyTest;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields = { "ClassWithDuplicateFields", "com.google.gson.functional", ptrTable, methods, fields, 7, 0xa, 3, 2, 4, -1, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields;
}

@end

void ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangInteger_(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields *self, JavaLangInteger *a) {
  ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangInteger_withJavaLangDouble_(self, a, nil);
}

ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields *new_ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangInteger_(JavaLangInteger *a) {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields, initWithJavaLangInteger_, a)
}

ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields *create_ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangInteger_(JavaLangInteger *a) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields, initWithJavaLangInteger_, a)
}

void ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangDouble_(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields *self, JavaLangDouble *b) {
  ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangInteger_withJavaLangDouble_(self, nil, b);
}

ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields *new_ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangDouble_(JavaLangDouble *b) {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields, initWithJavaLangDouble_, b)
}

ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields *create_ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangDouble_(JavaLangDouble *b) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields, initWithJavaLangDouble_, b)
}

void ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangInteger_withJavaLangDouble_(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields *self, JavaLangInteger *a, JavaLangDouble *b) {
  NSObject_init(self);
  JreStrongAssign(&self->a_, a);
  JreStrongAssign(&self->b_, b);
}

ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields *new_ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangInteger_withJavaLangDouble_(JavaLangInteger *a, JavaLangDouble *b) {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields, initWithJavaLangInteger_withJavaLangDouble_, a, b)
}

ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields *create_ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields_initWithJavaLangInteger_withJavaLangDouble_(JavaLangInteger *a, JavaLangDouble *b) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields, initWithJavaLangInteger_withJavaLangDouble_, a, b)
}

IOSObjectArray *ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_ComGoogleGsonAnnotationsSerializedName(@"a") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithDuplicateFields)

@implementation ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName

- (instancetype)initWithLong:(jlong)value {
  ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName_initWithLong_(self, value);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "J", .constantValue.asLong = 0, 0x11, -1, -1, -1, 1 },
  };
  static const void *ptrTable[] = { "J", (void *)&ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName__Annotations$0, "LComGoogleGsonFunctionalNamingPolicyTest;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName = { "ClassWithComplexFieldName", "com.google.gson.functional", ptrTable, methods, fields, 7, 0xa, 1, 1, 2, -1, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName;
}

@end

void ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName_initWithLong_(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName *self, jlong value) {
  NSObject_init(self);
  self->value_ = value;
}

ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName *new_ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName_initWithLong_(jlong value) {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName, initWithLong_, value)
}

ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName *create_ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName_initWithLong_(jlong value) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName, initWithLong_, value)
}

IOSObjectArray *ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_ComGoogleGsonAnnotationsSerializedName(@"@value\"_s$\\") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalNamingPolicyTest_ClassWithComplexFieldName)
