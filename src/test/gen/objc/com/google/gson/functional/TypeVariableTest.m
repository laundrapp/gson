//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/functional/TypeVariableTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/gson/Gson.h"
#include "com/google/gson/functional/TypeVariableTest.h"
#include "com/google/gson/reflect/TypeToken.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/reflect/Type.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "junit/framework/TestCase.h"

@interface ComGoogleGsonFunctionalTypeVariableTest_1 : ComGoogleGsonReflectTypeToken

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalTypeVariableTest_1)

__attribute__((unused)) static void ComGoogleGsonFunctionalTypeVariableTest_1_init(ComGoogleGsonFunctionalTypeVariableTest_1 *self);

__attribute__((unused)) static ComGoogleGsonFunctionalTypeVariableTest_1 *new_ComGoogleGsonFunctionalTypeVariableTest_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalTypeVariableTest_1 *create_ComGoogleGsonFunctionalTypeVariableTest_1_init(void);

@interface ComGoogleGsonFunctionalTypeVariableTest_Foo () {
 @public
  id someSField_;
  id someTField_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalTypeVariableTest_Foo, someSField_, id)
J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalTypeVariableTest_Foo, someTField_, id)

@implementation ComGoogleGsonFunctionalTypeVariableTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComGoogleGsonFunctionalTypeVariableTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)testAdvancedTypeVariables {
  ComGoogleGsonGson *gson = create_ComGoogleGsonGson_init();
  ComGoogleGsonFunctionalTypeVariableTest_Bar *bar1 = create_ComGoogleGsonFunctionalTypeVariableTest_Bar_initWithNSString_withJavaLangInteger_withBoolean_(@"someString", JavaLangInteger_valueOfWithInt_(1), true);
  JavaUtilArrayList *arrayList = create_JavaUtilArrayList_init();
  [arrayList addWithId:JavaLangInteger_valueOfWithInt_(1)];
  [arrayList addWithId:JavaLangInteger_valueOfWithInt_(2)];
  [arrayList addWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<JavaUtilMap>) nil_chk(bar1->map_)) putWithId:@"key1" withId:arrayList];
  [bar1->map_ putWithId:@"key2" withId:create_JavaUtilArrayList_init()];
  NSString *json = [gson toJsonWithId:bar1];
  ComGoogleGsonFunctionalTypeVariableTest_Bar *bar2 = [gson fromJsonWithNSString:json withIOSClass:ComGoogleGsonFunctionalTypeVariableTest_Bar_class_()];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(bar1, bar2);
}

- (void)testTypeVariablesViaTypeParameter {
  ComGoogleGsonGson *gson = create_ComGoogleGsonGson_init();
  ComGoogleGsonFunctionalTypeVariableTest_Foo *original = create_ComGoogleGsonFunctionalTypeVariableTest_Foo_initWithId_withId_withJavaLangBoolean_(@"e", JavaLangInteger_valueOfWithInt_(5), JavaLangBoolean_valueOfWithBoolean_(false));
  [((id<JavaUtilMap>) nil_chk(original->map_)) putWithId:@"f" withId:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7) } count:2 type:JavaLangInteger_class_()])];
  id<JavaLangReflectType> type = [create_ComGoogleGsonFunctionalTypeVariableTest_1_init() getType];
  NSString *json = [gson toJsonWithId:original withJavaLangReflectType:type];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"{\"someSField\":\"e\",\"someTField\":5,\"map\":{\"f\":[6,7]},\"redField\":false}", json);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(original, [gson fromJsonWithNSString:json withJavaLangReflectType:type]);
}

- (void)testBasicTypeVariables {
  ComGoogleGsonGson *gson = create_ComGoogleGsonGson_init();
  ComGoogleGsonFunctionalTypeVariableTest_Blue *blue1 = create_ComGoogleGsonFunctionalTypeVariableTest_Blue_initWithBoolean_(true);
  NSString *json = [gson toJsonWithId:blue1];
  ComGoogleGsonFunctionalTypeVariableTest_Blue *blue2 = [gson fromJsonWithNSString:json withIOSClass:ComGoogleGsonFunctionalTypeVariableTest_Blue_class_()];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(blue1, blue2);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(testAdvancedTypeVariables);
  methods[2].selector = @selector(testTypeVariablesViaTypeParameter);
  methods[3].selector = @selector(testBasicTypeVariables);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangException;", "LComGoogleGsonFunctionalTypeVariableTest_Blue;LComGoogleGsonFunctionalTypeVariableTest_Red;LComGoogleGsonFunctionalTypeVariableTest_Foo;LComGoogleGsonFunctionalTypeVariableTest_Bar;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalTypeVariableTest = { "TypeVariableTest", "com.google.gson.functional", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, 1, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalTypeVariableTest;
}

@end

void ComGoogleGsonFunctionalTypeVariableTest_init(ComGoogleGsonFunctionalTypeVariableTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComGoogleGsonFunctionalTypeVariableTest *new_ComGoogleGsonFunctionalTypeVariableTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalTypeVariableTest, init)
}

ComGoogleGsonFunctionalTypeVariableTest *create_ComGoogleGsonFunctionalTypeVariableTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalTypeVariableTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalTypeVariableTest)

@implementation ComGoogleGsonFunctionalTypeVariableTest_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComGoogleGsonFunctionalTypeVariableTest_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleGsonFunctionalTypeVariableTest;", "testTypeVariablesViaTypeParameter", "Lcom/google/gson/reflect/TypeToken<Lcom/google/gson/functional/TypeVariableTest$Foo<Ljava/lang/String;Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalTypeVariableTest_1 = { "", "com.google.gson.functional", ptrTable, methods, NULL, 7, 0x8018, 1, 0, 0, -1, 1, 2, -1 };
  return &_ComGoogleGsonFunctionalTypeVariableTest_1;
}

@end

void ComGoogleGsonFunctionalTypeVariableTest_1_init(ComGoogleGsonFunctionalTypeVariableTest_1 *self) {
  ComGoogleGsonReflectTypeToken_init(self);
}

ComGoogleGsonFunctionalTypeVariableTest_1 *new_ComGoogleGsonFunctionalTypeVariableTest_1_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalTypeVariableTest_1, init)
}

ComGoogleGsonFunctionalTypeVariableTest_1 *create_ComGoogleGsonFunctionalTypeVariableTest_1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalTypeVariableTest_1, init)
}

@implementation ComGoogleGsonFunctionalTypeVariableTest_Red

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComGoogleGsonFunctionalTypeVariableTest_Red_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithId:(id)redField {
  ComGoogleGsonFunctionalTypeVariableTest_Red_initWithId_(self, redField);
  return self;
}

- (void)dealloc {
  RELEASE_(redField_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "redField_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;", "(TS;)V", "TS;", "LComGoogleGsonFunctionalTypeVariableTest;", "<S:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalTypeVariableTest_Red = { "Red", "com.google.gson.functional", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, 4, -1 };
  return &_ComGoogleGsonFunctionalTypeVariableTest_Red;
}

@end

void ComGoogleGsonFunctionalTypeVariableTest_Red_init(ComGoogleGsonFunctionalTypeVariableTest_Red *self) {
  NSObject_init(self);
}

ComGoogleGsonFunctionalTypeVariableTest_Red *new_ComGoogleGsonFunctionalTypeVariableTest_Red_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalTypeVariableTest_Red, init)
}

ComGoogleGsonFunctionalTypeVariableTest_Red *create_ComGoogleGsonFunctionalTypeVariableTest_Red_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalTypeVariableTest_Red, init)
}

void ComGoogleGsonFunctionalTypeVariableTest_Red_initWithId_(ComGoogleGsonFunctionalTypeVariableTest_Red *self, id redField) {
  NSObject_init(self);
  JreStrongAssign(&self->redField_, redField);
}

ComGoogleGsonFunctionalTypeVariableTest_Red *new_ComGoogleGsonFunctionalTypeVariableTest_Red_initWithId_(id redField) {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalTypeVariableTest_Red, initWithId_, redField)
}

ComGoogleGsonFunctionalTypeVariableTest_Red *create_ComGoogleGsonFunctionalTypeVariableTest_Red_initWithId_(id redField) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalTypeVariableTest_Red, initWithId_, redField)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalTypeVariableTest_Red)

@implementation ComGoogleGsonFunctionalTypeVariableTest_Blue

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComGoogleGsonFunctionalTypeVariableTest_Blue_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithBoolean:(jboolean)value {
  ComGoogleGsonFunctionalTypeVariableTest_Blue_initWithBoolean_(self, value);
  return self;
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[ComGoogleGsonFunctionalTypeVariableTest_Blue class]])) {
    return false;
  }
  ComGoogleGsonFunctionalTypeVariableTest_Blue *blue = (ComGoogleGsonFunctionalTypeVariableTest_Blue *) cast_chk(o, [ComGoogleGsonFunctionalTypeVariableTest_Blue class]);
  return [((JavaLangBoolean *) nil_chk(redField_)) isEqual:((ComGoogleGsonFunctionalTypeVariableTest_Blue *) nil_chk(blue))->redField_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithBoolean:);
  methods[2].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "Z", "equals", "LNSObject;", "LComGoogleGsonFunctionalTypeVariableTest;", "Lcom/google/gson/functional/TypeVariableTest$Red<Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalTypeVariableTest_Blue = { "Blue", "com.google.gson.functional", ptrTable, methods, NULL, 7, 0x9, 3, 0, 3, -1, -1, 4, -1 };
  return &_ComGoogleGsonFunctionalTypeVariableTest_Blue;
}

@end

void ComGoogleGsonFunctionalTypeVariableTest_Blue_init(ComGoogleGsonFunctionalTypeVariableTest_Blue *self) {
  ComGoogleGsonFunctionalTypeVariableTest_Red_initWithId_(self, JavaLangBoolean_valueOfWithBoolean_(false));
}

ComGoogleGsonFunctionalTypeVariableTest_Blue *new_ComGoogleGsonFunctionalTypeVariableTest_Blue_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalTypeVariableTest_Blue, init)
}

ComGoogleGsonFunctionalTypeVariableTest_Blue *create_ComGoogleGsonFunctionalTypeVariableTest_Blue_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalTypeVariableTest_Blue, init)
}

void ComGoogleGsonFunctionalTypeVariableTest_Blue_initWithBoolean_(ComGoogleGsonFunctionalTypeVariableTest_Blue *self, jboolean value) {
  ComGoogleGsonFunctionalTypeVariableTest_Red_initWithId_(self, JavaLangBoolean_valueOfWithBoolean_(value));
}

ComGoogleGsonFunctionalTypeVariableTest_Blue *new_ComGoogleGsonFunctionalTypeVariableTest_Blue_initWithBoolean_(jboolean value) {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalTypeVariableTest_Blue, initWithBoolean_, value)
}

ComGoogleGsonFunctionalTypeVariableTest_Blue *create_ComGoogleGsonFunctionalTypeVariableTest_Blue_initWithBoolean_(jboolean value) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalTypeVariableTest_Blue, initWithBoolean_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalTypeVariableTest_Blue)

@implementation ComGoogleGsonFunctionalTypeVariableTest_Foo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComGoogleGsonFunctionalTypeVariableTest_Foo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithId:(id)sValue
                              withId:(id)tValue
                 withJavaLangBoolean:(JavaLangBoolean *)redField {
  ComGoogleGsonFunctionalTypeVariableTest_Foo_initWithId_withId_withJavaLangBoolean_(self, sValue, tValue, redField);
  return self;
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[ComGoogleGsonFunctionalTypeVariableTest_Foo class]])) {
    return false;
  }
  ComGoogleGsonFunctionalTypeVariableTest_Foo *realFoo = (ComGoogleGsonFunctionalTypeVariableTest_Foo *) cast_chk(o, [ComGoogleGsonFunctionalTypeVariableTest_Foo class]);
  return [((JavaLangBoolean *) nil_chk(redField_)) isEqual:((ComGoogleGsonFunctionalTypeVariableTest_Foo *) nil_chk(realFoo))->redField_] && [nil_chk(someTField_) isEqual:realFoo->someTField_] && [nil_chk(someSField_) isEqual:realFoo->someSField_] && [((id<JavaUtilMap>) nil_chk(map_)) isEqual:realFoo->map_];
}

- (void)dealloc {
  RELEASE_(someSField_);
  RELEASE_(someTField_);
  RELEASE_(map_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithId:withId:withJavaLangBoolean:);
  methods[2].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "someSField_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, 4, -1 },
    { "someTField_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, 5, -1 },
    { "map_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x11, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LNSObject;LJavaLangBoolean;", "(TS;TT;Ljava/lang/Boolean;)V", "equals", "LNSObject;", "TS;", "TT;", "Ljava/util/Map<TS;Ljava/util/List<TT;>;>;", "LComGoogleGsonFunctionalTypeVariableTest;", "<S:Ljava/lang/Object;T:Ljava/lang/Object;>Lcom/google/gson/functional/TypeVariableTest$Red<Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalTypeVariableTest_Foo = { "Foo", "com.google.gson.functional", ptrTable, methods, fields, 7, 0x9, 3, 3, 7, -1, -1, 8, -1 };
  return &_ComGoogleGsonFunctionalTypeVariableTest_Foo;
}

@end

void ComGoogleGsonFunctionalTypeVariableTest_Foo_init(ComGoogleGsonFunctionalTypeVariableTest_Foo *self) {
  ComGoogleGsonFunctionalTypeVariableTest_Red_init(self);
  JreStrongAssignAndConsume(&self->map_, new_JavaUtilHashMap_init());
}

ComGoogleGsonFunctionalTypeVariableTest_Foo *new_ComGoogleGsonFunctionalTypeVariableTest_Foo_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalTypeVariableTest_Foo, init)
}

ComGoogleGsonFunctionalTypeVariableTest_Foo *create_ComGoogleGsonFunctionalTypeVariableTest_Foo_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalTypeVariableTest_Foo, init)
}

void ComGoogleGsonFunctionalTypeVariableTest_Foo_initWithId_withId_withJavaLangBoolean_(ComGoogleGsonFunctionalTypeVariableTest_Foo *self, id sValue, id tValue, JavaLangBoolean *redField) {
  ComGoogleGsonFunctionalTypeVariableTest_Red_initWithId_(self, redField);
  JreStrongAssignAndConsume(&self->map_, new_JavaUtilHashMap_init());
  JreStrongAssign(&self->someSField_, sValue);
  JreStrongAssign(&self->someTField_, tValue);
}

ComGoogleGsonFunctionalTypeVariableTest_Foo *new_ComGoogleGsonFunctionalTypeVariableTest_Foo_initWithId_withId_withJavaLangBoolean_(id sValue, id tValue, JavaLangBoolean *redField) {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalTypeVariableTest_Foo, initWithId_withId_withJavaLangBoolean_, sValue, tValue, redField)
}

ComGoogleGsonFunctionalTypeVariableTest_Foo *create_ComGoogleGsonFunctionalTypeVariableTest_Foo_initWithId_withId_withJavaLangBoolean_(id sValue, id tValue, JavaLangBoolean *redField) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalTypeVariableTest_Foo, initWithId_withId_withJavaLangBoolean_, sValue, tValue, redField)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalTypeVariableTest_Foo)

@implementation ComGoogleGsonFunctionalTypeVariableTest_Bar

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComGoogleGsonFunctionalTypeVariableTest_Bar_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)s
                       withJavaLangInteger:(JavaLangInteger *)i
                               withBoolean:(jboolean)b {
  ComGoogleGsonFunctionalTypeVariableTest_Bar_initWithNSString_withJavaLangInteger_withBoolean_(self, s, i, b);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:withJavaLangInteger:withBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;LJavaLangInteger;Z", "LComGoogleGsonFunctionalTypeVariableTest;", "Lcom/google/gson/functional/TypeVariableTest$Foo<Ljava/lang/String;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalTypeVariableTest_Bar = { "Bar", "com.google.gson.functional", ptrTable, methods, NULL, 7, 0x9, 2, 0, 1, -1, -1, 2, -1 };
  return &_ComGoogleGsonFunctionalTypeVariableTest_Bar;
}

@end

void ComGoogleGsonFunctionalTypeVariableTest_Bar_init(ComGoogleGsonFunctionalTypeVariableTest_Bar *self) {
  ComGoogleGsonFunctionalTypeVariableTest_Bar_initWithNSString_withJavaLangInteger_withBoolean_(self, @"", JavaLangInteger_valueOfWithInt_(0), false);
}

ComGoogleGsonFunctionalTypeVariableTest_Bar *new_ComGoogleGsonFunctionalTypeVariableTest_Bar_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalTypeVariableTest_Bar, init)
}

ComGoogleGsonFunctionalTypeVariableTest_Bar *create_ComGoogleGsonFunctionalTypeVariableTest_Bar_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalTypeVariableTest_Bar, init)
}

void ComGoogleGsonFunctionalTypeVariableTest_Bar_initWithNSString_withJavaLangInteger_withBoolean_(ComGoogleGsonFunctionalTypeVariableTest_Bar *self, NSString *s, JavaLangInteger *i, jboolean b) {
  ComGoogleGsonFunctionalTypeVariableTest_Foo_initWithId_withId_withJavaLangBoolean_(self, s, i, JavaLangBoolean_valueOfWithBoolean_(b));
}

ComGoogleGsonFunctionalTypeVariableTest_Bar *new_ComGoogleGsonFunctionalTypeVariableTest_Bar_initWithNSString_withJavaLangInteger_withBoolean_(NSString *s, JavaLangInteger *i, jboolean b) {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalTypeVariableTest_Bar, initWithNSString_withJavaLangInteger_withBoolean_, s, i, b)
}

ComGoogleGsonFunctionalTypeVariableTest_Bar *create_ComGoogleGsonFunctionalTypeVariableTest_Bar_initWithNSString_withJavaLangInteger_withBoolean_(NSString *s, JavaLangInteger *i, jboolean b) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalTypeVariableTest_Bar, initWithNSString_withJavaLangInteger_withBoolean_, s, i, b)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalTypeVariableTest_Bar)
