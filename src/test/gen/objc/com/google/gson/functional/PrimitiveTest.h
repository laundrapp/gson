//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleGsonFunctionalPrimitiveTest")
#ifdef RESTRICT_ComGoogleGsonFunctionalPrimitiveTest
#define INCLUDE_ALL_ComGoogleGsonFunctionalPrimitiveTest 0
#else
#define INCLUDE_ALL_ComGoogleGsonFunctionalPrimitiveTest 1
#endif
#undef RESTRICT_ComGoogleGsonFunctionalPrimitiveTest

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleGsonFunctionalPrimitiveTest_) && (INCLUDE_ALL_ComGoogleGsonFunctionalPrimitiveTest || defined(INCLUDE_ComGoogleGsonFunctionalPrimitiveTest))
#define ComGoogleGsonFunctionalPrimitiveTest_

#define RESTRICT_JunitFrameworkTestCase 1
#define INCLUDE_JunitFrameworkTestCase 1
#include "junit/framework/TestCase.h"

/*!
 @brief Functional tests for Json primitive values: integers, and floating point numbers.
 @author Inderjeet Singh
 @author Joel Leitch
 */
@interface ComGoogleGsonFunctionalPrimitiveTest : JunitFrameworkTestCase

#pragma mark Public

- (instancetype __nonnull)init;

- (void)testBadValueForBigIntegerDeserialization;

- (void)testBigDecimalAsStringRepresentationDeserialization;

- (void)testBigDecimalDeserialization;

- (void)testBigDecimalInASingleElementArraySerialization;

- (void)testBigDecimalInfinityDeserializationNotSupported;

- (void)testBigDecimalNaNDeserializationNotSupported;

- (void)testBigDecimalNegativeInfinityDeserializationNotSupported;

- (void)testBigDecimalNoFractAsStringRepresentationDeserialization;

- (void)testBigDecimalPreservePrecisionDeserialization;

- (void)testBigDecimalPreservePrecisionSerialization;

- (void)testBigDecimalSerialization;

- (void)testBigIntegerDeserialization;

- (void)testBigIntegerInASingleElementArraySerialization;

- (void)testBigIntegerSerialization;

- (void)testBooleanDeserialization;

- (void)testByteDeserialization;

- (void)testByteSerialization;

- (void)testDeserializeJsonArrayAsBigDecimal;

- (void)testDeserializeJsonArrayAsBigInteger;

- (void)testDeserializeJsonArrayAsBooleanWrapper;

- (void)testDeserializeJsonArrayAsByteWrapper;

- (void)testDeserializeJsonArrayAsDoublePrimitive;

- (void)testDeserializeJsonArrayAsFloatWrapper;

- (void)testDeserializeJsonArrayAsInt;

- (void)testDeserializeJsonArrayAsLongWrapper;

- (void)testDeserializeJsonArrayAsNumber;

- (void)testDeserializeJsonArrayAsShortWrapper;

- (void)testDeserializeJsonObjectAsBigDecimal;

- (void)testDeserializeJsonObjectAsBigInteger;

- (void)testDeserializeJsonObjectAsBooleanPrimitive;

- (void)testDeserializeJsonObjectAsBytePrimitive;

- (void)testDeserializeJsonObjectAsDoubleWrapper;

- (void)testDeserializeJsonObjectAsFloatPrimitive;

- (void)testDeserializeJsonObjectAsInteger;

- (void)testDeserializeJsonObjectAsLongPrimitive;

- (void)testDeserializeJsonObjectAsNumber;

- (void)testDeserializeJsonObjectAsShortPrimitive;

- (void)testDeserializePrimitiveWrapperAsObjectField;

- (void)testDeserializingBigDecimalAsBigIntegerFails;

- (void)testDeserializingBigDecimalAsDouble;

- (void)testDeserializingBigDecimalAsFloat;

- (void)testDeserializingBigDecimalAsIntegerFails;

- (void)testDeserializingBigIntegerAsBigDecimal;

- (void)testDeserializingBigIntegerAsInteger;

- (void)testDeserializingBigIntegerAsLong;

- (void)testDeserializingDecimalPointValueZeroSucceeds;

- (void)testDeserializingNonZeroDecimalPointValuesAsIntegerFails;

- (void)testDoubleAsStringRepresentationDeserialization;

- (void)testDoubleInfinityDeserialization;

- (void)testDoubleInfinitySerialization;

- (void)testDoubleInfinitySerializationNotSupportedByDefault;

- (void)testDoubleNaNDeserialization;

- (void)testDoubleNaNSerialization;

- (void)testDoubleNaNSerializationNotSupportedByDefault;

- (void)testDoubleNoFractAsStringRepresentationDeserialization;

- (void)testFloatInfinityDeserialization;

- (void)testFloatInfinitySerialization;

- (void)testFloatInfinitySerializationNotSupportedByDefault;

- (void)testFloatNaNDeserialization;

- (void)testFloatNaNSerialization;

- (void)testFloatNaNSerializationNotSupportedByDefault;

- (void)testHtmlCharacterSerialization;

- (void)testLargeDoubleDeserialization;

- (void)testLongAsStringDeserialization;

- (void)testLongAsStringSerialization;

- (void)testMoreSpecificSerialization;

- (void)testNegativeInfinityDeserialization;

- (void)testNegativeInfinityFloatDeserialization;

- (void)testNegativeInfinityFloatSerialization;

- (void)testNegativeInfinityFloatSerializationNotSupportedByDefault;

- (void)testNegativeInfinitySerialization;

- (void)testNegativeInfinitySerializationNotSupportedByDefault;

- (void)testNumberDeserialization;

- (void)testNumberSerialization;

- (void)testPrimitiveBooleanAutoboxedInASingleElementArraySerialization;

- (void)testPrimitiveBooleanAutoboxedSerialization;

- (void)testPrimitiveClassLiteral;

- (void)testPrimitiveDoubleAutoboxedDeserialization;

- (void)testPrimitiveDoubleAutoboxedInASingleElementArraySerialization;

- (void)testPrimitiveDoubleAutoboxedSerialization;

- (void)testPrimitiveIntegerAutoboxedDeserialization;

- (void)testPrimitiveIntegerAutoboxedInASingleElementArraySerialization;

- (void)testPrimitiveIntegerAutoboxedSerialization;

- (void)testPrimitiveLongAutoboxedDeserialization;

- (void)testPrimitiveLongAutoboxedInASingleElementArraySerialization;

- (void)testPrimitiveLongAutoboxedSerialization;

- (void)testQuotedStringSerializationAndDeserialization;

- (void)testReallyLongValuesDeserialization;

- (void)testReallyLongValuesSerialization;

- (void)testShortSerialization;

- (void)testSmallValueForBigDecimalDeserialization;

- (void)testSmallValueForBigDecimalSerialization;

- (void)testSmallValueForBigIntegerDeserialization;

- (void)testSmallValueForBigIntegerSerialization;

- (void)testStringsAsBooleans;

- (void)testUnquotedStringDeserializationFails;

- (void)testValueVeryCloseToZeroIsZero;

#pragma mark Protected

- (void)setUp;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalPrimitiveTest)

FOUNDATION_EXPORT void ComGoogleGsonFunctionalPrimitiveTest_init(ComGoogleGsonFunctionalPrimitiveTest *self);

FOUNDATION_EXPORT ComGoogleGsonFunctionalPrimitiveTest *new_ComGoogleGsonFunctionalPrimitiveTest_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleGsonFunctionalPrimitiveTest *create_ComGoogleGsonFunctionalPrimitiveTest_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonFunctionalPrimitiveTest)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComGoogleGsonFunctionalPrimitiveTest")
