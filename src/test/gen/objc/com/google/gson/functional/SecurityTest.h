//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/functional/SecurityTest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleGsonFunctionalSecurityTest")
#ifdef RESTRICT_ComGoogleGsonFunctionalSecurityTest
#define INCLUDE_ALL_ComGoogleGsonFunctionalSecurityTest 0
#else
#define INCLUDE_ALL_ComGoogleGsonFunctionalSecurityTest 1
#endif
#undef RESTRICT_ComGoogleGsonFunctionalSecurityTest

#if !defined (ComGoogleGsonFunctionalSecurityTest_) && (INCLUDE_ALL_ComGoogleGsonFunctionalSecurityTest || defined(INCLUDE_ComGoogleGsonFunctionalSecurityTest))
#define ComGoogleGsonFunctionalSecurityTest_

#define RESTRICT_JunitFrameworkTestCase 1
#define INCLUDE_JunitFrameworkTestCase 1
#include "junit/framework/TestCase.h"

/*!
 @brief Tests for security-related aspects of Gson
 @author Inderjeet Singh
 */
@interface ComGoogleGsonFunctionalSecurityTest : JunitFrameworkTestCase

#pragma mark Public

- (instancetype)init;

- (void)testJsonWithNonExectuableTokenSerialization;

/*!
 @brief Gson should be able to deserialize a stream with non-exectuable token if it is created
   with <code>GsonBuilder.generateNonExecutableJson()</code>.
 */
- (void)testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization;

/*!
 @brief Gson should be able to deserialize a stream with non-exectuable token even if it is created
   without <code>GsonBuilder.generateNonExecutableJson()</code>.
 */
- (void)testJsonWithNonExectuableTokenWithRegularGsonDeserialization;

- (void)testNonExecutableJsonDeserialization;

- (void)testNonExecutableJsonSerialization;

#pragma mark Protected

- (void)setUp;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalSecurityTest)

FOUNDATION_EXPORT void ComGoogleGsonFunctionalSecurityTest_init(ComGoogleGsonFunctionalSecurityTest *self);

FOUNDATION_EXPORT ComGoogleGsonFunctionalSecurityTest *new_ComGoogleGsonFunctionalSecurityTest_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleGsonFunctionalSecurityTest *create_ComGoogleGsonFunctionalSecurityTest_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonFunctionalSecurityTest)

#endif

#pragma pop_macro("INCLUDE_ALL_ComGoogleGsonFunctionalSecurityTest")
