//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/gson/ExclusionStrategy.h"
#include "com/google/gson/FieldAttributes.h"
#include "com/google/gson/Gson.h"
#include "com/google/gson/GsonBuilder.h"
#include "com/google/gson/JsonElement.h"
#include "com/google/gson/JsonObject.h"
#include "com/google/gson/JsonPrimitive.h"
#include "com/google/gson/functional/ExclusionStrategyFunctionalTest.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/annotation/ElementType.h"
#include "java/lang/annotation/Retention.h"
#include "java/lang/annotation/RetentionPolicy.h"
#include "java/lang/annotation/Target.h"
#include "junit/framework/TestCase.h"

@class ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest;

@interface ComGoogleGsonFunctionalExclusionStrategyFunctionalTest () {
 @public
  ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *src_;
}

+ (ComGoogleGsonGson *)createGsonWithComGoogleGsonExclusionStrategy:(id<ComGoogleGsonExclusionStrategy>)exclusionStrategy
                                                        withBoolean:(jboolean)serialization;

@end

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest, src_, ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *)

inline id<ComGoogleGsonExclusionStrategy> ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_get_EXCLUDE_SAMPLE_OBJECT_FOR_TEST(void);
static id<ComGoogleGsonExclusionStrategy> ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_EXCLUDE_SAMPLE_OBJECT_FOR_TEST;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest, EXCLUDE_SAMPLE_OBJECT_FOR_TEST, id<ComGoogleGsonExclusionStrategy>)

__attribute__((unused)) static ComGoogleGsonGson *ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_createGsonWithComGoogleGsonExclusionStrategy_withBoolean_(id<ComGoogleGsonExclusionStrategy> exclusionStrategy, jboolean serialization);

@interface ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_1 : NSObject < ComGoogleGsonExclusionStrategy >

- (instancetype)init;

- (jboolean)shouldSkipFieldWithComGoogleGsonFieldAttributes:(ComGoogleGsonFieldAttributes *)f;

- (jboolean)shouldSkipClassWithIOSClass:(IOSClass *)clazz;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_1)

__attribute__((unused)) static void ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_1_init(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_1 *self);

__attribute__((unused)) static ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_1 *new_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_1 *create_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_1_init(void);

@protocol ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_Foo < JavaLangAnnotationAnnotation >

@end

@interface ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_Foo : NSObject < ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_Foo >

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_Foo)

__attribute__((unused)) static id<ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_Foo> create_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_Foo(void);

__attribute__((unused)) static IOSObjectArray *ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_Foo__Annotations$0(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_Foo)

@interface ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest : NSObject {
 @public
  jint annotatedField_;
  NSString *stringField_;
  jlong longField_;
}

- (instancetype)init;

- (instancetype)initWithInt:(jint)annotatedField
               withNSString:(NSString *)stringField
                   withLong:(jlong)longField;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest)

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest, stringField_, NSString *)

__attribute__((unused)) static void ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_init(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *self);

__attribute__((unused)) static ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *new_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *create_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_init(void);

__attribute__((unused)) static void ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_initWithInt_withNSString_withLong_(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *self, jint annotatedField, NSString *stringField, jlong longField);

__attribute__((unused)) static ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *new_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_initWithInt_withNSString_withLong_(jint annotatedField, NSString *stringField, jlong longField) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *create_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_initWithInt_withNSString_withLong_(jint annotatedField, NSString *stringField, jlong longField);

__attribute__((unused)) static IOSObjectArray *ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest__Annotations$0(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest)

@interface ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy : NSObject < ComGoogleGsonExclusionStrategy > {
 @public
  IOSClass *typeToSkip_;
}

- (instancetype)initWithIOSClass:(IOSClass *)typeToSkip;

- (jboolean)shouldSkipClassWithIOSClass:(IOSClass *)clazz;

- (jboolean)shouldSkipFieldWithComGoogleGsonFieldAttributes:(ComGoogleGsonFieldAttributes *)f;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy)

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy, typeToSkip_, IOSClass *)

__attribute__((unused)) static void ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy_initWithIOSClass_(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy *self, IOSClass *typeToSkip);

__attribute__((unused)) static ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy *new_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy_initWithIOSClass_(IOSClass *typeToSkip) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy *create_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy_initWithIOSClass_(IOSClass *typeToSkip);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy)

J2OBJC_INITIALIZED_DEFN(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest)

@implementation ComGoogleGsonFunctionalExclusionStrategyFunctionalTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  [super setUp];
  JreStrongAssignAndConsume(&src_, new_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_init());
}

- (void)testExclusionStrategySerialization {
  ComGoogleGsonGson *gson = ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_createGsonWithComGoogleGsonExclusionStrategy_withBoolean_(create_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy_initWithIOSClass_(NSString_class_()), true);
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:src_];
  JunitFrameworkTestCase_assertFalseWithBoolean_([((NSString *) nil_chk(json)) java_contains:@"\"stringField\""]);
  JunitFrameworkTestCase_assertFalseWithBoolean_([json java_contains:@"\"annotatedField\""]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([json java_contains:@"\"longField\""]);
}

- (void)testExclusionStrategySerializationDoesNotImpactDeserialization {
  NSString *json = @"{\"annotatedField\":1,\"stringField\":\"x\",\"longField\":2}";
  ComGoogleGsonGson *gson = ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_createGsonWithComGoogleGsonExclusionStrategy_withBoolean_(create_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy_initWithIOSClass_(NSString_class_()), true);
  ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *value = [((ComGoogleGsonGson *) nil_chk(gson)) fromJsonWithNSString:json withIOSClass:ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_class_()];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(1, ((ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *) nil_chk(value))->annotatedField_);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"x", value->stringField_);
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(2, value->longField_);
}

- (void)testExclusionStrategyDeserialization {
  ComGoogleGsonGson *gson = ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_createGsonWithComGoogleGsonExclusionStrategy_withBoolean_(create_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy_initWithIOSClass_(NSString_class_()), false);
  ComGoogleGsonJsonObject *json = create_ComGoogleGsonJsonObject_init();
  [json addWithNSString:@"annotatedField" withComGoogleGsonJsonElement:create_ComGoogleGsonJsonPrimitive_initWithNSNumber_(JavaLangInteger_valueOfWithInt_(((ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *) nil_chk(src_))->annotatedField_ + 5))];
  [json addWithNSString:@"stringField" withComGoogleGsonJsonElement:create_ComGoogleGsonJsonPrimitive_initWithNSString_(JreStrcat("$$", ((ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *) nil_chk(src_))->stringField_, @"blah,blah"))];
  [json addWithNSString:@"longField" withComGoogleGsonJsonElement:create_ComGoogleGsonJsonPrimitive_initWithNSNumber_(JavaLangLong_valueOfWithLong_(1212311LL))];
  ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *target = [((ComGoogleGsonGson *) nil_chk(gson)) fromJsonWithComGoogleGsonJsonElement:json withIOSClass:ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_class_()];
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(1212311LL, ((ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *) nil_chk(target))->longField_);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(((ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *) nil_chk(src_))->annotatedField_, target->annotatedField_);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(((ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *) nil_chk(src_))->stringField_, target->stringField_);
}

- (void)testExclusionStrategySerializationDoesNotImpactSerialization {
  ComGoogleGsonGson *gson = ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_createGsonWithComGoogleGsonExclusionStrategy_withBoolean_(create_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy_initWithIOSClass_(NSString_class_()), false);
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:src_];
  JunitFrameworkTestCase_assertTrueWithBoolean_([((NSString *) nil_chk(json)) java_contains:@"\"stringField\""]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([json java_contains:@"\"annotatedField\""]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([json java_contains:@"\"longField\""]);
}

- (void)testExclusionStrategyWithMode {
  ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *testObj = create_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_initWithInt_withNSString_withLong_(((ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *) nil_chk(src_))->annotatedField_ + 5, JreStrcat("$$", src_->stringField_, @"blah,blah"), src_->longField_ + 655LL);
  ComGoogleGsonGson *gson = ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_createGsonWithComGoogleGsonExclusionStrategy_withBoolean_(create_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy_initWithIOSClass_(NSString_class_()), false);
  ComGoogleGsonJsonObject *json = [((ComGoogleGsonJsonElement *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson)) toJsonTreeWithId:testObj])) getAsJsonObject];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(testObj->annotatedField_, [((ComGoogleGsonJsonElement *) nil_chk([((ComGoogleGsonJsonObject *) nil_chk(json)) getWithNSString:@"annotatedField"])) getAsInt]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(testObj->stringField_, [((ComGoogleGsonJsonElement *) nil_chk([json getWithNSString:@"stringField"])) getAsString]);
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(testObj->longField_, [((ComGoogleGsonJsonElement *) nil_chk([json getWithNSString:@"longField"])) getAsLong]);
  ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *target = [gson fromJsonWithComGoogleGsonJsonElement:json withIOSClass:ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_class_()];
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(testObj->longField_, ((ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *) nil_chk(target))->longField_);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(((ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *) nil_chk(src_))->annotatedField_, target->annotatedField_);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(((ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *) nil_chk(src_))->stringField_, target->stringField_);
}

- (void)testExcludeTopLevelClassSerialization {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() addSerializationExclusionStrategyWithComGoogleGsonExclusionStrategy:ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_EXCLUDE_SAMPLE_OBJECT_FOR_TEST])) create];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"null", [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:create_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_init() withJavaLangReflectType:ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_class_()]);
}

- (void)testExcludeTopLevelClassSerializationDoesNotImpactDeserialization {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() addSerializationExclusionStrategyWithComGoogleGsonExclusionStrategy:ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_EXCLUDE_SAMPLE_OBJECT_FOR_TEST])) create];
  NSString *json = @"{\"annotatedField\":1,\"stringField\":\"x\",\"longField\":2}";
  ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *value = [((ComGoogleGsonGson *) nil_chk(gson)) fromJsonWithNSString:json withIOSClass:ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_class_()];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(1, ((ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *) nil_chk(value))->annotatedField_);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"x", value->stringField_);
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(2, value->longField_);
}

- (void)testExcludeTopLevelClassDeserialization {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() addDeserializationExclusionStrategyWithComGoogleGsonExclusionStrategy:ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_EXCLUDE_SAMPLE_OBJECT_FOR_TEST])) create];
  NSString *json = @"{\"annotatedField\":1,\"stringField\":\"x\",\"longField\":2}";
  ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *value = [((ComGoogleGsonGson *) nil_chk(gson)) fromJsonWithNSString:json withIOSClass:ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_class_()];
  JunitFrameworkTestCase_assertNullWithId_(value);
}

- (void)testExcludeTopLevelClassDeserializationDoesNotImpactSerialization {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() addDeserializationExclusionStrategyWithComGoogleGsonExclusionStrategy:ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_EXCLUDE_SAMPLE_OBJECT_FOR_TEST])) create];
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:create_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_init() withJavaLangReflectType:ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_class_()];
  JunitFrameworkTestCase_assertTrueWithBoolean_([((NSString *) nil_chk(json)) java_contains:@"\"stringField\""]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([json java_contains:@"\"annotatedField\""]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([json java_contains:@"\"longField\""]);
}

+ (ComGoogleGsonGson *)createGsonWithComGoogleGsonExclusionStrategy:(id<ComGoogleGsonExclusionStrategy>)exclusionStrategy
                                                        withBoolean:(jboolean)serialization {
  return ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_createGsonWithComGoogleGsonExclusionStrategy_withBoolean_(exclusionStrategy, serialization);
}

- (void)dealloc {
  RELEASE_(src_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleGsonGson;", 0xa, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(testExclusionStrategySerialization);
  methods[3].selector = @selector(testExclusionStrategySerializationDoesNotImpactDeserialization);
  methods[4].selector = @selector(testExclusionStrategyDeserialization);
  methods[5].selector = @selector(testExclusionStrategySerializationDoesNotImpactSerialization);
  methods[6].selector = @selector(testExclusionStrategyWithMode);
  methods[7].selector = @selector(testExcludeTopLevelClassSerialization);
  methods[8].selector = @selector(testExcludeTopLevelClassSerializationDoesNotImpactDeserialization);
  methods[9].selector = @selector(testExcludeTopLevelClassDeserialization);
  methods[10].selector = @selector(testExcludeTopLevelClassDeserializationDoesNotImpactSerialization);
  methods[11].selector = @selector(createGsonWithComGoogleGsonExclusionStrategy:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EXCLUDE_SAMPLE_OBJECT_FOR_TEST", "LComGoogleGsonExclusionStrategy;", .constantValue.asLong = 0, 0x1a, -1, 3, -1, -1 },
    { "src_", "LComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "createGson", "LComGoogleGsonExclusionStrategy;Z", &ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_EXCLUDE_SAMPLE_OBJECT_FOR_TEST, "LComGoogleGsonFunctionalExclusionStrategyFunctionalTest_Foo;LComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest;LComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalExclusionStrategyFunctionalTest = { "ExclusionStrategyFunctionalTest", "com.google.gson.functional", ptrTable, methods, fields, 7, 0x1, 12, 2, -1, 4, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest;
}

+ (void)initialize {
  if (self == [ComGoogleGsonFunctionalExclusionStrategyFunctionalTest class]) {
    JreStrongAssignAndConsume(&ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_EXCLUDE_SAMPLE_OBJECT_FOR_TEST, new_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_1_init());
    J2OBJC_SET_INITIALIZED(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest)
  }
}

@end

void ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_init(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComGoogleGsonFunctionalExclusionStrategyFunctionalTest *new_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest, init)
}

ComGoogleGsonFunctionalExclusionStrategyFunctionalTest *create_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest, init)
}

ComGoogleGsonGson *ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_createGsonWithComGoogleGsonExclusionStrategy_withBoolean_(id<ComGoogleGsonExclusionStrategy> exclusionStrategy, jboolean serialization) {
  ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_initialize();
  ComGoogleGsonGsonBuilder *gsonBuilder = create_ComGoogleGsonGsonBuilder_init();
  if (serialization) {
    [gsonBuilder addSerializationExclusionStrategyWithComGoogleGsonExclusionStrategy:exclusionStrategy];
  }
  else {
    [gsonBuilder addDeserializationExclusionStrategyWithComGoogleGsonExclusionStrategy:exclusionStrategy];
  }
  return [((ComGoogleGsonGsonBuilder *) nil_chk([gsonBuilder serializeNulls])) create];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest)

@implementation ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)shouldSkipFieldWithComGoogleGsonFieldAttributes:(ComGoogleGsonFieldAttributes *)f {
  return false;
}

- (jboolean)shouldSkipClassWithIOSClass:(IOSClass *)clazz {
  return clazz == ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_class_();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(shouldSkipFieldWithComGoogleGsonFieldAttributes:);
  methods[2].selector = @selector(shouldSkipClassWithIOSClass:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldSkipField", "LComGoogleGsonFieldAttributes;", "shouldSkipClass", "LIOSClass;", "(Ljava/lang/Class<*>;)Z", "LComGoogleGsonFunctionalExclusionStrategyFunctionalTest;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_1 = { "", "com.google.gson.functional", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 5, -1, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_1;
}

@end

void ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_1_init(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_1 *self) {
  NSObject_init(self);
}

ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_1 *new_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_1_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_1, init)
}

ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_1 *create_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_1, init)
}

@implementation ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_Foo

- (IOSClass *)annotationType {
  return ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_Foo_class_();
}

- (NSString *)description {
  return @"@com.google.gson.functional.ExclusionStrategyFunctionalTest$Foo()";
}

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { "LComGoogleGsonFunctionalExclusionStrategyFunctionalTest;", (void *)&ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_Foo__Annotations$0 };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_Foo = { "Foo", "com.google.gson.functional", ptrTable, NULL, NULL, 7, 0x260a, 0, 0, 0, -1, -1, -1, 1 };
  return &_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_Foo;
}

@end

id<ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_Foo> create_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_Foo() {
  ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_Foo *self = AUTORELEASE([[ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_Foo alloc] init]);
  return self;
}

IOSObjectArray *ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_Foo__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, FIELD) } count:1 type:JavaLangAnnotationElementType_class_()]) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_Foo)

@implementation ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)annotatedField
               withNSString:(NSString *)stringField
                   withLong:(jlong)longField {
  ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_initWithInt_withNSString_withLong_(self, annotatedField, stringField, longField);
  return self;
}

- (void)dealloc {
  RELEASE_(stringField_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:withNSString:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "annotatedField_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, 1 },
    { "stringField_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "longField_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;J", (void *)&ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest__Annotations$0, "LComGoogleGsonFunctionalExclusionStrategyFunctionalTest;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest = { "SampleObjectForTest", "com.google.gson.functional", ptrTable, methods, fields, 7, 0xa, 2, 3, 2, -1, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest;
}

@end

void ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_init(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *self) {
  ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_initWithInt_withNSString_withLong_(self, 5, @"someDefaultValue", 12345LL);
}

ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *new_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest, init)
}

ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *create_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest, init)
}

void ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_initWithInt_withNSString_withLong_(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *self, jint annotatedField, NSString *stringField, jlong longField) {
  NSObject_init(self);
  self->annotatedField_ = annotatedField;
  JreStrongAssign(&self->stringField_, stringField);
  self->longField_ = longField;
}

ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *new_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_initWithInt_withNSString_withLong_(jint annotatedField, NSString *stringField, jlong longField) {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest, initWithInt_withNSString_withLong_, annotatedField, stringField, longField)
}

ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest *create_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest_initWithInt_withNSString_withLong_(jint annotatedField, NSString *stringField, jlong longField) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest, initWithInt_withNSString_withLong_, annotatedField, stringField, longField)
}

IOSObjectArray *ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_Foo() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_SampleObjectForTest)

@implementation ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy

- (instancetype)initWithIOSClass:(IOSClass *)typeToSkip {
  ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy_initWithIOSClass_(self, typeToSkip);
  return self;
}

- (jboolean)shouldSkipClassWithIOSClass:(IOSClass *)clazz {
  return clazz == typeToSkip_;
}

- (jboolean)shouldSkipFieldWithComGoogleGsonFieldAttributes:(ComGoogleGsonFieldAttributes *)f {
  return [((ComGoogleGsonFieldAttributes *) nil_chk(f)) getAnnotationWithIOSClass:ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_Foo_class_()] != nil;
}

- (void)dealloc {
  RELEASE_(typeToSkip_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 0, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIOSClass:);
  methods[1].selector = @selector(shouldSkipClassWithIOSClass:);
  methods[2].selector = @selector(shouldSkipFieldWithComGoogleGsonFieldAttributes:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "typeToSkip_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;", "(Ljava/lang/Class<*>;)V", "shouldSkipClass", "(Ljava/lang/Class<*>;)Z", "shouldSkipField", "LComGoogleGsonFieldAttributes;", "Ljava/lang/Class<*>;", "LComGoogleGsonFunctionalExclusionStrategyFunctionalTest;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy = { "MyExclusionStrategy", "com.google.gson.functional", ptrTable, methods, fields, 7, 0xa, 3, 1, 7, -1, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy;
}

@end

void ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy_initWithIOSClass_(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy *self, IOSClass *typeToSkip) {
  NSObject_init(self);
  JreStrongAssign(&self->typeToSkip_, typeToSkip);
}

ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy *new_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy_initWithIOSClass_(IOSClass *typeToSkip) {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy, initWithIOSClass_, typeToSkip)
}

ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy *create_ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy_initWithIOSClass_(IOSClass *typeToSkip) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy, initWithIOSClass_, typeToSkip)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalExclusionStrategyFunctionalTest_MyExclusionStrategy)
