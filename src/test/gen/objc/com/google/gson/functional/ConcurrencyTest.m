//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/google/gson/Gson.h"
#include "com/google/gson/functional/ConcurrencyTest.h"
#include "java/lang/Runnable.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "junit/framework/TestCase.h"

@interface ComGoogleGsonFunctionalConcurrencyTest () {
 @public
  ComGoogleGsonGson *gson_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalConcurrencyTest, gson_, ComGoogleGsonGson *)

@interface ComGoogleGsonFunctionalConcurrencyTest_1 : NSObject < JavaLangRunnable > {
 @public
  ComGoogleGsonFunctionalConcurrencyTest *this$0_;
  JavaUtilConcurrentCountDownLatch *val$startLatch_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$failed_;
  JavaUtilConcurrentCountDownLatch *val$finishedLatch_;
}

- (instancetype __nonnull)initWithComGoogleGsonFunctionalConcurrencyTest:(ComGoogleGsonFunctionalConcurrencyTest *)outer$
                                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                               withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1
                                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalConcurrencyTest_1)

__attribute__((unused)) static void ComGoogleGsonFunctionalConcurrencyTest_1_initWithComGoogleGsonFunctionalConcurrencyTest_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(ComGoogleGsonFunctionalConcurrencyTest_1 *self, ComGoogleGsonFunctionalConcurrencyTest *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

__attribute__((unused)) static ComGoogleGsonFunctionalConcurrencyTest_1 *new_ComGoogleGsonFunctionalConcurrencyTest_1_initWithComGoogleGsonFunctionalConcurrencyTest_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(ComGoogleGsonFunctionalConcurrencyTest *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalConcurrencyTest_1 *create_ComGoogleGsonFunctionalConcurrencyTest_1_initWithComGoogleGsonFunctionalConcurrencyTest_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(ComGoogleGsonFunctionalConcurrencyTest *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

@interface ComGoogleGsonFunctionalConcurrencyTest_2 : NSObject < JavaLangRunnable > {
 @public
  ComGoogleGsonFunctionalConcurrencyTest *this$0_;
  JavaUtilConcurrentCountDownLatch *val$startLatch_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$failed_;
  JavaUtilConcurrentCountDownLatch *val$finishedLatch_;
}

- (instancetype __nonnull)initWithComGoogleGsonFunctionalConcurrencyTest:(ComGoogleGsonFunctionalConcurrencyTest *)outer$
                                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                               withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1
                                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalConcurrencyTest_2)

__attribute__((unused)) static void ComGoogleGsonFunctionalConcurrencyTest_2_initWithComGoogleGsonFunctionalConcurrencyTest_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(ComGoogleGsonFunctionalConcurrencyTest_2 *self, ComGoogleGsonFunctionalConcurrencyTest *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

__attribute__((unused)) static ComGoogleGsonFunctionalConcurrencyTest_2 *new_ComGoogleGsonFunctionalConcurrencyTest_2_initWithComGoogleGsonFunctionalConcurrencyTest_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(ComGoogleGsonFunctionalConcurrencyTest *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalConcurrencyTest_2 *create_ComGoogleGsonFunctionalConcurrencyTest_2_initWithComGoogleGsonFunctionalConcurrencyTest_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(ComGoogleGsonFunctionalConcurrencyTest *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

@interface ComGoogleGsonFunctionalConcurrencyTest_MyObject : NSObject {
 @public
  NSString *a_;
  NSString *b_;
  jint i_;
}

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)a
                              withNSString:(NSString *)b
                                   withInt:(jint)i;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalConcurrencyTest_MyObject)

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalConcurrencyTest_MyObject, a_, NSString *)
J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalConcurrencyTest_MyObject, b_, NSString *)

__attribute__((unused)) static void ComGoogleGsonFunctionalConcurrencyTest_MyObject_init(ComGoogleGsonFunctionalConcurrencyTest_MyObject *self);

__attribute__((unused)) static ComGoogleGsonFunctionalConcurrencyTest_MyObject *new_ComGoogleGsonFunctionalConcurrencyTest_MyObject_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalConcurrencyTest_MyObject *create_ComGoogleGsonFunctionalConcurrencyTest_MyObject_init(void);

__attribute__((unused)) static void ComGoogleGsonFunctionalConcurrencyTest_MyObject_initWithNSString_withNSString_withInt_(ComGoogleGsonFunctionalConcurrencyTest_MyObject *self, NSString *a, NSString *b, jint i);

__attribute__((unused)) static ComGoogleGsonFunctionalConcurrencyTest_MyObject *new_ComGoogleGsonFunctionalConcurrencyTest_MyObject_initWithNSString_withNSString_withInt_(NSString *a, NSString *b, jint i) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalConcurrencyTest_MyObject *create_ComGoogleGsonFunctionalConcurrencyTest_MyObject_initWithNSString_withNSString_withInt_(NSString *a, NSString *b, jint i);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonFunctionalConcurrencyTest_MyObject)

@implementation ComGoogleGsonFunctionalConcurrencyTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComGoogleGsonFunctionalConcurrencyTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  [super setUp];
  JreStrongAssignAndConsume(&gson_, new_ComGoogleGsonGson_init());
}

- (void)testSingleThreadSerialization {
  ComGoogleGsonFunctionalConcurrencyTest_MyObject *myObj = create_ComGoogleGsonFunctionalConcurrencyTest_MyObject_init();
  for (jint i = 0; i < 10; i++) {
    [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:myObj];
  }
}

- (void)testSingleThreadDeserialization {
  for (jint i = 0; i < 10; i++) {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"{'a':'hello','b':'world','i':1}" withIOSClass:ComGoogleGsonFunctionalConcurrencyTest_MyObject_class_()];
  }
}

- (void)testMultiThreadSerialization {
  JavaUtilConcurrentCountDownLatch *startLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *finishedLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(10);
  JavaUtilConcurrentAtomicAtomicBoolean *failed = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  id<JavaUtilConcurrentExecutorService> executor = JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_(10);
  for (jint taskCount = 0; taskCount < 10; taskCount++) {
    [((id<JavaUtilConcurrentExecutorService>) nil_chk(executor)) executeWithJavaLangRunnable:create_ComGoogleGsonFunctionalConcurrencyTest_1_initWithComGoogleGsonFunctionalConcurrencyTest_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(self, startLatch, failed, finishedLatch)];
  }
  [startLatch countDown];
  [finishedLatch await];
  JunitFrameworkTestCase_assertFalseWithBoolean_([failed get]);
}

- (void)testMultiThreadDeserialization {
  JavaUtilConcurrentCountDownLatch *startLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *finishedLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(10);
  JavaUtilConcurrentAtomicAtomicBoolean *failed = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  id<JavaUtilConcurrentExecutorService> executor = JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_(10);
  for (jint taskCount = 0; taskCount < 10; taskCount++) {
    [((id<JavaUtilConcurrentExecutorService>) nil_chk(executor)) executeWithJavaLangRunnable:create_ComGoogleGsonFunctionalConcurrencyTest_2_initWithComGoogleGsonFunctionalConcurrencyTest_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(self, startLatch, failed, finishedLatch)];
  }
  [startLatch countDown];
  [finishedLatch await];
  JunitFrameworkTestCase_assertFalseWithBoolean_([failed get]);
}

- (void)dealloc {
  RELEASE_(gson_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(testSingleThreadSerialization);
  methods[3].selector = @selector(testSingleThreadDeserialization);
  methods[4].selector = @selector(testMultiThreadSerialization);
  methods[5].selector = @selector(testMultiThreadDeserialization);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "gson_", "LComGoogleGsonGson;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LJavaLangInterruptedException;", "LComGoogleGsonFunctionalConcurrencyTest_MyObject;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalConcurrencyTest = { "ConcurrencyTest", "com.google.gson.functional", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, 2, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalConcurrencyTest;
}

@end

void ComGoogleGsonFunctionalConcurrencyTest_init(ComGoogleGsonFunctionalConcurrencyTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComGoogleGsonFunctionalConcurrencyTest *new_ComGoogleGsonFunctionalConcurrencyTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalConcurrencyTest, init)
}

ComGoogleGsonFunctionalConcurrencyTest *create_ComGoogleGsonFunctionalConcurrencyTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalConcurrencyTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalConcurrencyTest)

@implementation ComGoogleGsonFunctionalConcurrencyTest_1

- (instancetype __nonnull)initWithComGoogleGsonFunctionalConcurrencyTest:(ComGoogleGsonFunctionalConcurrencyTest *)outer$
                                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                               withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1
                                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2 {
  ComGoogleGsonFunctionalConcurrencyTest_1_initWithComGoogleGsonFunctionalConcurrencyTest_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(self, outer$, capture$0, capture$1, capture$2);
  return self;
}

- (void)run {
  ComGoogleGsonFunctionalConcurrencyTest_MyObject *myObj = create_ComGoogleGsonFunctionalConcurrencyTest_MyObject_init();
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$startLatch_)) await];
    for (jint i = 0; i < 10; i++) {
      [((ComGoogleGsonGson *) nil_chk(this$0_->gson_)) toJsonWithId:myObj];
    }
  }
  @catch (JavaLangThrowable *t) {
    [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$failed_)) setWithBoolean:true];
  }
  @finally {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$finishedLatch_)) countDown];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$startLatch_);
  RELEASE_(val$failed_);
  RELEASE_(val$finishedLatch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComGoogleGsonFunctionalConcurrencyTest:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicBoolean:withJavaUtilConcurrentCountDownLatch:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleGsonFunctionalConcurrencyTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$startLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$failed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$finishedLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleGsonFunctionalConcurrencyTest;", "testMultiThreadSerialization" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalConcurrencyTest_1 = { "", "com.google.gson.functional", ptrTable, methods, fields, 7, 0x8018, 2, 4, 0, -1, 1, -1, -1 };
  return &_ComGoogleGsonFunctionalConcurrencyTest_1;
}

@end

void ComGoogleGsonFunctionalConcurrencyTest_1_initWithComGoogleGsonFunctionalConcurrencyTest_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(ComGoogleGsonFunctionalConcurrencyTest_1 *self, ComGoogleGsonFunctionalConcurrencyTest *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$startLatch_, capture$0);
  JreStrongAssign(&self->val$failed_, capture$1);
  JreStrongAssign(&self->val$finishedLatch_, capture$2);
  NSObject_init(self);
}

ComGoogleGsonFunctionalConcurrencyTest_1 *new_ComGoogleGsonFunctionalConcurrencyTest_1_initWithComGoogleGsonFunctionalConcurrencyTest_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(ComGoogleGsonFunctionalConcurrencyTest *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalConcurrencyTest_1, initWithComGoogleGsonFunctionalConcurrencyTest_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_, outer$, capture$0, capture$1, capture$2)
}

ComGoogleGsonFunctionalConcurrencyTest_1 *create_ComGoogleGsonFunctionalConcurrencyTest_1_initWithComGoogleGsonFunctionalConcurrencyTest_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(ComGoogleGsonFunctionalConcurrencyTest *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalConcurrencyTest_1, initWithComGoogleGsonFunctionalConcurrencyTest_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_, outer$, capture$0, capture$1, capture$2)
}

@implementation ComGoogleGsonFunctionalConcurrencyTest_2

- (instancetype __nonnull)initWithComGoogleGsonFunctionalConcurrencyTest:(ComGoogleGsonFunctionalConcurrencyTest *)outer$
                                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                               withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1
                                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2 {
  ComGoogleGsonFunctionalConcurrencyTest_2_initWithComGoogleGsonFunctionalConcurrencyTest_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(self, outer$, capture$0, capture$1, capture$2);
  return self;
}

- (void)run {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$startLatch_)) await];
    for (jint i = 0; i < 10; i++) {
      [((ComGoogleGsonGson *) nil_chk(this$0_->gson_)) fromJsonWithNSString:@"{'a':'hello','b':'world','i':1}" withIOSClass:ComGoogleGsonFunctionalConcurrencyTest_MyObject_class_()];
    }
  }
  @catch (JavaLangThrowable *t) {
    [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$failed_)) setWithBoolean:true];
  }
  @finally {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$finishedLatch_)) countDown];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$startLatch_);
  RELEASE_(val$failed_);
  RELEASE_(val$finishedLatch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComGoogleGsonFunctionalConcurrencyTest:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicBoolean:withJavaUtilConcurrentCountDownLatch:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleGsonFunctionalConcurrencyTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$startLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$failed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$finishedLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleGsonFunctionalConcurrencyTest;", "testMultiThreadDeserialization" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalConcurrencyTest_2 = { "", "com.google.gson.functional", ptrTable, methods, fields, 7, 0x8018, 2, 4, 0, -1, 1, -1, -1 };
  return &_ComGoogleGsonFunctionalConcurrencyTest_2;
}

@end

void ComGoogleGsonFunctionalConcurrencyTest_2_initWithComGoogleGsonFunctionalConcurrencyTest_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(ComGoogleGsonFunctionalConcurrencyTest_2 *self, ComGoogleGsonFunctionalConcurrencyTest *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$startLatch_, capture$0);
  JreStrongAssign(&self->val$failed_, capture$1);
  JreStrongAssign(&self->val$finishedLatch_, capture$2);
  NSObject_init(self);
}

ComGoogleGsonFunctionalConcurrencyTest_2 *new_ComGoogleGsonFunctionalConcurrencyTest_2_initWithComGoogleGsonFunctionalConcurrencyTest_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(ComGoogleGsonFunctionalConcurrencyTest *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalConcurrencyTest_2, initWithComGoogleGsonFunctionalConcurrencyTest_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_, outer$, capture$0, capture$1, capture$2)
}

ComGoogleGsonFunctionalConcurrencyTest_2 *create_ComGoogleGsonFunctionalConcurrencyTest_2_initWithComGoogleGsonFunctionalConcurrencyTest_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(ComGoogleGsonFunctionalConcurrencyTest *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalConcurrencyTest_2, initWithComGoogleGsonFunctionalConcurrencyTest_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_, outer$, capture$0, capture$1, capture$2)
}

@implementation ComGoogleGsonFunctionalConcurrencyTest_MyObject

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComGoogleGsonFunctionalConcurrencyTest_MyObject_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)a
                              withNSString:(NSString *)b
                                   withInt:(jint)i {
  ComGoogleGsonFunctionalConcurrencyTest_MyObject_initWithNSString_withNSString_withInt_(self, a, b, i);
  return self;
}

- (void)dealloc {
  RELEASE_(a_);
  RELEASE_(b_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:withNSString:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "a_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "b_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "i_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;I", "LComGoogleGsonFunctionalConcurrencyTest;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalConcurrencyTest_MyObject = { "MyObject", "com.google.gson.functional", ptrTable, methods, fields, 7, 0xa, 2, 3, 1, -1, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalConcurrencyTest_MyObject;
}

@end

void ComGoogleGsonFunctionalConcurrencyTest_MyObject_init(ComGoogleGsonFunctionalConcurrencyTest_MyObject *self) {
  ComGoogleGsonFunctionalConcurrencyTest_MyObject_initWithNSString_withNSString_withInt_(self, @"hello", @"world", 42);
}

ComGoogleGsonFunctionalConcurrencyTest_MyObject *new_ComGoogleGsonFunctionalConcurrencyTest_MyObject_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalConcurrencyTest_MyObject, init)
}

ComGoogleGsonFunctionalConcurrencyTest_MyObject *create_ComGoogleGsonFunctionalConcurrencyTest_MyObject_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalConcurrencyTest_MyObject, init)
}

void ComGoogleGsonFunctionalConcurrencyTest_MyObject_initWithNSString_withNSString_withInt_(ComGoogleGsonFunctionalConcurrencyTest_MyObject *self, NSString *a, NSString *b, jint i) {
  NSObject_init(self);
  JreStrongAssign(&self->a_, a);
  JreStrongAssign(&self->b_, b);
  self->i_ = i;
}

ComGoogleGsonFunctionalConcurrencyTest_MyObject *new_ComGoogleGsonFunctionalConcurrencyTest_MyObject_initWithNSString_withNSString_withInt_(NSString *a, NSString *b, jint i) {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalConcurrencyTest_MyObject, initWithNSString_withNSString_withInt_, a, b, i)
}

ComGoogleGsonFunctionalConcurrencyTest_MyObject *create_ComGoogleGsonFunctionalConcurrencyTest_MyObject_initWithNSString_withNSString_withInt_(NSString *a, NSString *b, jint i) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalConcurrencyTest_MyObject, initWithNSString_withNSString_withInt_, a, b, i)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalConcurrencyTest_MyObject)
