//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/functional/ArrayTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/gson/Gson.h"
#include "com/google/gson/GsonBuilder.h"
#include "com/google/gson/JsonParseException.h"
#include "com/google/gson/common/MoreAsserts.h"
#include "com/google/gson/common/TestTypes.h"
#include "com/google/gson/functional/ArrayTest.h"
#include "com/google/gson/reflect/TypeToken.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/reflect/Type.h"
#include "java/math/BigDecimal.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "junit/framework/TestCase.h"

@interface ComGoogleGsonFunctionalArrayTest () {
 @public
  ComGoogleGsonGson *gson_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalArrayTest, gson_, ComGoogleGsonGson *)

@interface ComGoogleGsonFunctionalArrayTest_1 : ComGoogleGsonReflectTypeToken

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalArrayTest_1)

__attribute__((unused)) static void ComGoogleGsonFunctionalArrayTest_1_init(ComGoogleGsonFunctionalArrayTest_1 *self);

__attribute__((unused)) static ComGoogleGsonFunctionalArrayTest_1 *new_ComGoogleGsonFunctionalArrayTest_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalArrayTest_1 *create_ComGoogleGsonFunctionalArrayTest_1_init(void);

@interface ComGoogleGsonFunctionalArrayTest_2 : ComGoogleGsonReflectTypeToken

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalArrayTest_2)

__attribute__((unused)) static void ComGoogleGsonFunctionalArrayTest_2_init(ComGoogleGsonFunctionalArrayTest_2 *self);

__attribute__((unused)) static ComGoogleGsonFunctionalArrayTest_2 *new_ComGoogleGsonFunctionalArrayTest_2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalArrayTest_2 *create_ComGoogleGsonFunctionalArrayTest_2_init(void);

@implementation ComGoogleGsonFunctionalArrayTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalArrayTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  [super setUp];
  JreStrongAssignAndConsume(&gson_, new_ComGoogleGsonGson_init());
}

- (void)testTopLevelArrayOfIntsSerialization {
  IOSIntArray *target = [IOSIntArray arrayWithInts:(jint[]){ 1, 2, 3, 4, 5, 6, 7, 8, 9 } count:9];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[1,2,3,4,5,6,7,8,9]", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target]);
}

- (void)testTopLevelArrayOfIntsDeserialization {
  IOSIntArray *expected = [IOSIntArray arrayWithInts:(jint[]){ 1, 2, 3, 4, 5, 6, 7, 8, 9 } count:9];
  IOSIntArray *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"[1,2,3,4,5,6,7,8,9]" withIOSClass:IOSClass_intArray(1)];
  ComGoogleGsonCommonMoreAsserts_assertEqualsWithIntArray_withIntArray_(expected, actual);
}

- (void)testInvalidArrayDeserialization {
  NSString *json = @"[1, 2 3, 4, 5]";
  @try {
    [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:IOSClass_intArray(1)];
    JunitFrameworkTestCase_failWithNSString_(@"Gson should not deserialize array elements with missing ,");
  }
  @catch (ComGoogleGsonJsonParseException *expected) {
  }
}

- (void)testEmptyArraySerialization {
  IOSIntArray *target = [IOSIntArray arrayWithInts:(jint[]){  } count:0];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[]", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target]);
}

- (void)testEmptyArrayDeserialization {
  IOSIntArray *actualObject = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"[]" withIOSClass:IOSClass_intArray(1)];
  JunitFrameworkTestCase_assertTrueWithBoolean_(((IOSIntArray *) nil_chk(actualObject))->size_ == 0);
  IOSObjectArray *actualObject2 = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"[]" withIOSClass:IOSClass_arrayType(JavaLangInteger_class_(), 1)];
  JunitFrameworkTestCase_assertTrueWithBoolean_(((IOSObjectArray *) nil_chk(actualObject2))->size_ == 0);
  actualObject = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"[ ]" withIOSClass:IOSClass_intArray(1)];
  JunitFrameworkTestCase_assertTrueWithBoolean_(((IOSIntArray *) nil_chk(actualObject))->size_ == 0);
}

- (void)testNullsInArraySerialization {
  IOSObjectArray *array = [IOSObjectArray arrayWithObjects:(id[]){ @"foo", nil, @"bar" } count:3 type:NSString_class_()];
  NSString *expected = @"[\"foo\",null,\"bar\"]";
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:array];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(expected, json);
}

- (void)testNullsInArrayDeserialization {
  NSString *json = @"[\"foo\",null,\"bar\"]";
  IOSObjectArray *expected = [IOSObjectArray arrayWithObjects:(id[]){ @"foo", nil, @"bar" } count:3 type:NSString_class_()];
  IOSObjectArray *target = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:[expected java_getClass]];
  for (jint i = 0; i < expected->size_; ++i) {
    JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(IOSObjectArray_Get(expected, i), IOSObjectArray_Get(nil_chk(target), i));
  }
}

- (void)testSingleNullInArraySerialization {
  IOSObjectArray *array = [IOSObjectArray arrayWithLength:1 type:ComGoogleGsonCommonTestTypes_BagOfPrimitives_class_()];
  IOSObjectArray_Set(array, 0, nil);
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:array];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[null]", json);
}

- (void)testSingleNullInArrayDeserialization {
  IOSObjectArray *array = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"[null]" withIOSClass:IOSClass_arrayType(ComGoogleGsonCommonTestTypes_BagOfPrimitives_class_(), 1)];
  JunitFrameworkTestCase_assertNullWithId_(IOSObjectArray_Get(nil_chk(array), 0));
}

- (void)testNullsInArrayWithSerializeNullPropertySetSerialization {
  JreStrongAssign(&gson_, [((ComGoogleGsonGsonBuilder *) nil_chk([create_ComGoogleGsonGsonBuilder_init() serializeNulls])) create]);
  IOSObjectArray *array = [IOSObjectArray arrayWithObjects:(id[]){ @"foo", nil, @"bar" } count:3 type:NSString_class_()];
  NSString *expected = @"[\"foo\",null,\"bar\"]";
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:array];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(expected, json);
}

- (void)testArrayOfStringsSerialization {
  IOSObjectArray *target = [IOSObjectArray arrayWithObjects:(id[]){ @"Hello", @"World" } count:2 type:NSString_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[\"Hello\",\"World\"]", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target]);
}

- (void)testArrayOfStringsDeserialization {
  NSString *json = @"[\"Hello\",\"World\"]";
  IOSObjectArray *target = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:IOSClass_arrayType(NSString_class_(), 1)];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"Hello", IOSObjectArray_Get(nil_chk(target), 0));
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"World", IOSObjectArray_Get(target, 1));
}

- (void)testSingleStringArraySerialization {
  IOSObjectArray *s = [IOSObjectArray arrayWithObjects:(id[]){ @"hello" } count:1 type:NSString_class_()];
  NSString *output = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:s];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[\"hello\"]", output);
}

- (void)testSingleStringArrayDeserialization {
  NSString *json = @"[\"hello\"]";
  IOSObjectArray *arrayType = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:IOSClass_arrayType(NSString_class_(), 1)];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(1, ((IOSObjectArray *) nil_chk(arrayType))->size_);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"hello", IOSObjectArray_Get(arrayType, 0));
}

- (void)testArrayOfCollectionSerialization {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithNSString_(@"[");
  jint arraySize = 3;
  id<JavaLangReflectType> typeToSerialize = [create_ComGoogleGsonFunctionalArrayTest_1_init() getType];
  IOSObjectArray *arrayOfCollection = [IOSObjectArray arrayWithLength:arraySize type:JavaUtilArrayList_class_()];
  for (jint i = 0; i < arraySize; ++i) {
    jint startValue = (3 * i) + 1;
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'['])) appendWithInt:startValue])) appendWithChar:','])) appendWithInt:startValue + 1])) appendWithChar:']'];
    JavaUtilArrayList *tmpList = create_JavaUtilArrayList_init();
    [tmpList addWithId:JavaLangInteger_valueOfWithInt_(startValue)];
    [tmpList addWithId:JavaLangInteger_valueOfWithInt_(startValue + 1)];
    IOSObjectArray_Set(arrayOfCollection, i, tmpList);
    if (i < arraySize - 1) {
      [sb appendWithChar:','];
    }
  }
  [sb appendWithChar:']'];
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:arrayOfCollection withJavaLangReflectType:typeToSerialize];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_([sb description], json);
}

- (void)testArrayOfCollectionDeserialization {
  NSString *json = @"[[1,2],[3,4]]";
  id<JavaLangReflectType> type = [create_ComGoogleGsonFunctionalArrayTest_2_init() getType];
  IOSObjectArray *target = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withJavaLangReflectType:type];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(2, ((IOSObjectArray *) nil_chk(target))->size_);
  ComGoogleGsonCommonMoreAsserts_assertEqualsWithJavaLangIntegerArray_withJavaLangIntegerArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()], [((id<JavaUtilCollection>) nil_chk(IOSObjectArray_Get(target, 0))) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()]]);
  ComGoogleGsonCommonMoreAsserts_assertEqualsWithJavaLangIntegerArray_withJavaLangIntegerArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4) } count:2 type:JavaLangInteger_class_()], [((id<JavaUtilCollection>) nil_chk(IOSObjectArray_Get(target, 1))) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()]]);
}

- (void)testArrayOfPrimitivesAsObjectsSerialization {
  IOSObjectArray *objs = [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), @"abc", JavaLangFloat_valueOfWithFloat_(0.3f), JavaLangLong_valueOfWithLong_(5LL) } count:4 type:NSObject_class_()];
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:objs];
  JunitFrameworkTestCase_assertTrueWithBoolean_([((NSString *) nil_chk(json)) java_contains:@"abc"]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([json java_contains:@"0.3"]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([json java_contains:@"5"]);
}

- (void)testArrayOfPrimitivesAsObjectsDeserialization {
  NSString *json = @"[1,'abc',0.3,1.1,5]";
  IOSObjectArray *objs = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:IOSClass_arrayType(NSObject_class_(), 1)];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(1, [((NSNumber *) nil_chk(((NSNumber *) cast_chk(IOSObjectArray_Get(nil_chk(objs), 0), [NSNumber class])))) intValue]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(@"abc", IOSObjectArray_Get(objs, 1));
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(0.3), JavaLangDouble_valueOfWithDouble_([((NSNumber *) nil_chk(((NSNumber *) cast_chk(IOSObjectArray_Get(objs, 2), [NSNumber class])))) doubleValue]));
  JunitFrameworkTestCase_assertEqualsWithId_withId_(create_JavaMathBigDecimal_initWithNSString_(@"1.1"), create_JavaMathBigDecimal_initWithNSString_([nil_chk(IOSObjectArray_Get(objs, 3)) description]));
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(5, [((NSNumber *) nil_chk(((NSNumber *) cast_chk(IOSObjectArray_Get(objs, 4), [NSNumber class])))) shortValue]);
}

- (void)testObjectArrayWithNonPrimitivesSerialization {
  ComGoogleGsonCommonTestTypes_ClassWithObjects *classWithObjects = create_ComGoogleGsonCommonTestTypes_ClassWithObjects_init();
  ComGoogleGsonCommonTestTypes_BagOfPrimitives *bagOfPrimitives = create_ComGoogleGsonCommonTestTypes_BagOfPrimitives_init();
  NSString *classWithObjectsJson = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:classWithObjects];
  NSString *bagOfPrimitivesJson = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:bagOfPrimitives];
  IOSObjectArray *objects = [IOSObjectArray arrayWithObjects:(id[]){ classWithObjects, bagOfPrimitives } count:2 type:NSObject_class_()];
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:objects];
  JunitFrameworkTestCase_assertTrueWithBoolean_([((NSString *) nil_chk(json)) java_contains:classWithObjectsJson]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([json java_contains:bagOfPrimitivesJson]);
}

- (void)testArrayOfNullSerialization {
  IOSObjectArray *array = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:NSObject_class_()];
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:array];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[null]", json);
}

- (void)testArrayOfNullDeserialization {
  IOSObjectArray *values = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"[null]" withIOSClass:IOSClass_arrayType(NSString_class_(), 1)];
  JunitFrameworkTestCase_assertNullWithId_(IOSObjectArray_Get(nil_chk(values), 0));
}

- (void)testMultidimenstionalArraysSerialization {
  IOSObjectArray *items = [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ @"3m Co", @"71.72", @"0.02", @"0.03", @"4/2 12:00am", @"Manufacturing" } count:6 type:NSString_class_()], [IOSObjectArray arrayWithObjects:(id[]){ @"Alcoa Inc", @"29.01", @"0.42", @"1.47", @"4/1 12:00am", @"Manufacturing" } count:6 type:NSString_class_()] } count:2 type:IOSClass_arrayType(NSString_class_(), 1)];
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:items];
  JunitFrameworkTestCase_assertTrueWithBoolean_([((NSString *) nil_chk(json)) java_contains:@"[[\"3m Co"]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([json java_contains:@"Manufacturing\"]]"]);
}

- (void)testMultiDimenstionalObjectArraysSerialization {
  IOSObjectArray *array = [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:NSObject_class_()] } count:1 type:IOSClass_arrayType(NSObject_class_(), 1)];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[[1,2]]", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:array]);
}

- (void)testMixingTypesInObjectArraySerialization {
  IOSObjectArray *array = [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), [IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", JavaLangInteger_valueOfWithInt_(3) } count:3 type:NSObject_class_()] } count:3 type:NSObject_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[1,2,[\"one\",\"two\",3]]", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:array]);
}

- (void)testMultidimenstionalArraysDeserialization {
  NSString *json = @"[['3m Co','71.72','0.02','0.03','4/2 12:00am','Manufacturing'],['Alcoa Inc','29.01','0.42','1.47','4/1 12:00am','Manufacturing']]";
  IOSObjectArray *items = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:IOSClass_arrayType(NSString_class_(), 2)];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"3m Co", IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(items), 0)), 0));
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"Manufacturing", IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(items, 1)), 5));
}

- (void)testArrayElementsAreArrays {
  IOSObjectArray *stringArrays = [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ @"test1", @"test2" } count:2 type:NSString_class_()], [IOSObjectArray arrayWithObjects:(id[]){ @"test3", @"test4" } count:2 type:NSString_class_()] } count:2 type:NSObject_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[[\"test1\",\"test2\"],[\"test3\",\"test4\"]]", [create_ComGoogleGsonGson_init() toJsonWithId:stringArrays]);
}

- (void)dealloc {
  RELEASE_(gson_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(testTopLevelArrayOfIntsSerialization);
  methods[3].selector = @selector(testTopLevelArrayOfIntsDeserialization);
  methods[4].selector = @selector(testInvalidArrayDeserialization);
  methods[5].selector = @selector(testEmptyArraySerialization);
  methods[6].selector = @selector(testEmptyArrayDeserialization);
  methods[7].selector = @selector(testNullsInArraySerialization);
  methods[8].selector = @selector(testNullsInArrayDeserialization);
  methods[9].selector = @selector(testSingleNullInArraySerialization);
  methods[10].selector = @selector(testSingleNullInArrayDeserialization);
  methods[11].selector = @selector(testNullsInArrayWithSerializeNullPropertySetSerialization);
  methods[12].selector = @selector(testArrayOfStringsSerialization);
  methods[13].selector = @selector(testArrayOfStringsDeserialization);
  methods[14].selector = @selector(testSingleStringArraySerialization);
  methods[15].selector = @selector(testSingleStringArrayDeserialization);
  methods[16].selector = @selector(testArrayOfCollectionSerialization);
  methods[17].selector = @selector(testArrayOfCollectionDeserialization);
  methods[18].selector = @selector(testArrayOfPrimitivesAsObjectsSerialization);
  methods[19].selector = @selector(testArrayOfPrimitivesAsObjectsDeserialization);
  methods[20].selector = @selector(testObjectArrayWithNonPrimitivesSerialization);
  methods[21].selector = @selector(testArrayOfNullSerialization);
  methods[22].selector = @selector(testArrayOfNullDeserialization);
  methods[23].selector = @selector(testMultidimenstionalArraysSerialization);
  methods[24].selector = @selector(testMultiDimenstionalObjectArraysSerialization);
  methods[25].selector = @selector(testMixingTypesInObjectArraySerialization);
  methods[26].selector = @selector(testMultidimenstionalArraysDeserialization);
  methods[27].selector = @selector(testArrayElementsAreArrays);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "gson_", "LComGoogleGsonGson;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalArrayTest = { "ArrayTest", "com.google.gson.functional", ptrTable, methods, fields, 7, 0x1, 28, 1, -1, -1, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalArrayTest;
}

@end

void ComGoogleGsonFunctionalArrayTest_init(ComGoogleGsonFunctionalArrayTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComGoogleGsonFunctionalArrayTest *new_ComGoogleGsonFunctionalArrayTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalArrayTest, init)
}

ComGoogleGsonFunctionalArrayTest *create_ComGoogleGsonFunctionalArrayTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalArrayTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalArrayTest)

@implementation ComGoogleGsonFunctionalArrayTest_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalArrayTest_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleGsonFunctionalArrayTest;", "testArrayOfCollectionSerialization", "Lcom/google/gson/reflect/TypeToken<[Ljava/util/Collection<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalArrayTest_1 = { "", "com.google.gson.functional", ptrTable, methods, NULL, 7, 0x8018, 1, 0, 0, -1, 1, 2, -1 };
  return &_ComGoogleGsonFunctionalArrayTest_1;
}

@end

void ComGoogleGsonFunctionalArrayTest_1_init(ComGoogleGsonFunctionalArrayTest_1 *self) {
  ComGoogleGsonReflectTypeToken_init(self);
}

ComGoogleGsonFunctionalArrayTest_1 *new_ComGoogleGsonFunctionalArrayTest_1_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalArrayTest_1, init)
}

ComGoogleGsonFunctionalArrayTest_1 *create_ComGoogleGsonFunctionalArrayTest_1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalArrayTest_1, init)
}

@implementation ComGoogleGsonFunctionalArrayTest_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalArrayTest_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleGsonFunctionalArrayTest;", "testArrayOfCollectionDeserialization", "Lcom/google/gson/reflect/TypeToken<[Ljava/util/Collection<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalArrayTest_2 = { "", "com.google.gson.functional", ptrTable, methods, NULL, 7, 0x8018, 1, 0, 0, -1, 1, 2, -1 };
  return &_ComGoogleGsonFunctionalArrayTest_2;
}

@end

void ComGoogleGsonFunctionalArrayTest_2_init(ComGoogleGsonFunctionalArrayTest_2 *self) {
  ComGoogleGsonReflectTypeToken_init(self);
}

ComGoogleGsonFunctionalArrayTest_2 *new_ComGoogleGsonFunctionalArrayTest_2_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalArrayTest_2, init)
}

ComGoogleGsonFunctionalArrayTest_2 *create_ComGoogleGsonFunctionalArrayTest_2_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalArrayTest_2, init)
}
