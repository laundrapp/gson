//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/functional/StringTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/gson/Gson.h"
#include "com/google/gson/functional/StringTest.h"
#include "junit/framework/TestCase.h"

@interface ComGoogleGsonFunctionalStringTest () {
 @public
  ComGoogleGsonGson *gson_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalStringTest, gson_, ComGoogleGsonGson *)

@implementation ComGoogleGsonFunctionalStringTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComGoogleGsonFunctionalStringTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  [super setUp];
  JreStrongAssignAndConsume(&gson_, new_ComGoogleGsonGson_init());
}

- (void)testStringValueSerialization {
  NSString *value = @"someRandomStringValue";
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(JreStrcat("C$C", '"', value, '"'), [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:value]);
}

- (void)testStringValueDeserialization {
  NSString *value = @"someRandomStringValue";
  NSString *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:JreStrcat("C$C", '"', value, '"') withIOSClass:NSString_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(value, actual);
}

- (void)testSingleQuoteInStringSerialization {
  NSString *valueWithQuotes = @"beforeQuote'afterQuote";
  NSString *jsonRepresentation = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:valueWithQuotes];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(valueWithQuotes, [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:jsonRepresentation withIOSClass:NSString_class_()]);
}

- (void)testEscapedCtrlNInStringSerialization {
  NSString *value = @"a\nb";
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:value];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"a\\nb\"", json);
}

- (void)testEscapedCtrlNInStringDeserialization {
  NSString *json = @"'a\\nb'";
  NSString *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:NSString_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a\nb", actual);
}

- (void)testEscapedCtrlRInStringSerialization {
  NSString *value = @"a\x0d""b";
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:value];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"a\\rb\"", json);
}

- (void)testEscapedCtrlRInStringDeserialization {
  NSString *json = @"'a\\rb'";
  NSString *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:NSString_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a\x0d""b", actual);
}

- (void)testEscapedBackslashInStringSerialization {
  NSString *value = @"a\\b";
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:value];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"a\\\\b\"", json);
}

- (void)testEscapedBackslashInStringDeserialization {
  NSString *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"'a\\\\b'" withIOSClass:NSString_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a\\b", actual);
}

- (void)testSingleQuoteInStringDeserialization {
  NSString *value = @"beforeQuote'afterQuote";
  NSString *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:JreStrcat("C$C", '"', value, '"') withIOSClass:NSString_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(value, actual);
}

- (void)testEscapingQuotesInStringSerialization {
  NSString *valueWithQuotes = @"beforeQuote\"afterQuote";
  NSString *jsonRepresentation = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:valueWithQuotes];
  NSString *target = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:jsonRepresentation withIOSClass:NSString_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(valueWithQuotes, target);
}

- (void)testEscapingQuotesInStringDeserialization {
  NSString *value = @"beforeQuote\\\"afterQuote";
  NSString *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:JreStrcat("C$C", '"', value, '"') withIOSClass:NSString_class_()];
  NSString *expected = @"beforeQuote\"afterQuote";
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(expected, actual);
}

- (void)testStringValueAsSingleElementArraySerialization {
  IOSObjectArray *target = [IOSObjectArray arrayWithObjects:(id[]){ @"abc" } count:1 type:NSString_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[\"abc\"]", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[\"abc\"]", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:target withJavaLangReflectType:IOSClass_arrayType(NSString_class_(), 1)]);
}

- (void)testStringWithEscapedSlashDeserialization {
  NSString *value = @"/";
  NSString *json = @"'\\/'";
  NSString *actual = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:NSString_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(value, actual);
}

- (void)testAssignmentCharSerialization {
  NSString *value = @"abc=";
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:value];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"abc\\u003d\"", json);
}

- (void)testAssignmentCharDeserialization {
  NSString *json = @"\"abc=\"";
  NSString *value = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:NSString_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"abc=", value);
  json = @"'abc='";
  value = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:NSString_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"abc=", value);
}

- (void)testJavascriptKeywordsInStringSerialization {
  NSString *value = @"null true false function";
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:value];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(JreStrcat("C$C", '"', value, '"'), json);
}

- (void)testJavascriptKeywordsInStringDeserialization {
  NSString *json = @"'null true false function'";
  NSString *value = [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:json withIOSClass:NSString_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_([json java_substring:1 endIndex:[json java_length] - 1], value);
}

- (void)dealloc {
  RELEASE_(gson_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(testStringValueSerialization);
  methods[3].selector = @selector(testStringValueDeserialization);
  methods[4].selector = @selector(testSingleQuoteInStringSerialization);
  methods[5].selector = @selector(testEscapedCtrlNInStringSerialization);
  methods[6].selector = @selector(testEscapedCtrlNInStringDeserialization);
  methods[7].selector = @selector(testEscapedCtrlRInStringSerialization);
  methods[8].selector = @selector(testEscapedCtrlRInStringDeserialization);
  methods[9].selector = @selector(testEscapedBackslashInStringSerialization);
  methods[10].selector = @selector(testEscapedBackslashInStringDeserialization);
  methods[11].selector = @selector(testSingleQuoteInStringDeserialization);
  methods[12].selector = @selector(testEscapingQuotesInStringSerialization);
  methods[13].selector = @selector(testEscapingQuotesInStringDeserialization);
  methods[14].selector = @selector(testStringValueAsSingleElementArraySerialization);
  methods[15].selector = @selector(testStringWithEscapedSlashDeserialization);
  methods[16].selector = @selector(testAssignmentCharSerialization);
  methods[17].selector = @selector(testAssignmentCharDeserialization);
  methods[18].selector = @selector(testJavascriptKeywordsInStringSerialization);
  methods[19].selector = @selector(testJavascriptKeywordsInStringDeserialization);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "gson_", "LComGoogleGsonGson;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalStringTest = { "StringTest", "com.google.gson.functional", ptrTable, methods, fields, 7, 0x1, 20, 1, -1, -1, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalStringTest;
}

@end

void ComGoogleGsonFunctionalStringTest_init(ComGoogleGsonFunctionalStringTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComGoogleGsonFunctionalStringTest *new_ComGoogleGsonFunctionalStringTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalStringTest, init)
}

ComGoogleGsonFunctionalStringTest *create_ComGoogleGsonFunctionalStringTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalStringTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalStringTest)
