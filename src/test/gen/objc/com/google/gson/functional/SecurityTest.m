//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/functional/SecurityTest.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/google/gson/Gson.h"
#include "com/google/gson/GsonBuilder.h"
#include "com/google/gson/common/TestTypes.h"
#include "com/google/gson/functional/SecurityTest.h"
#include "junit/framework/TestCase.h"

@interface ComGoogleGsonFunctionalSecurityTest () {
 @public
  ComGoogleGsonGsonBuilder *gsonBuilder_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalSecurityTest, gsonBuilder_, ComGoogleGsonGsonBuilder *)

/*!
 @brief Keep this in sync with Gson.JSON_NON_EXECUTABLE_PREFIX
 */
inline NSString *ComGoogleGsonFunctionalSecurityTest_get_JSON_NON_EXECUTABLE_PREFIX(void);
static NSString *ComGoogleGsonFunctionalSecurityTest_JSON_NON_EXECUTABLE_PREFIX = @")]}'\n";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleGsonFunctionalSecurityTest, JSON_NON_EXECUTABLE_PREFIX, NSString *)

@implementation ComGoogleGsonFunctionalSecurityTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalSecurityTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  [super setUp];
  JreStrongAssignAndConsume(&gsonBuilder_, new_ComGoogleGsonGsonBuilder_init());
}

- (void)testNonExecutableJsonSerialization {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([((ComGoogleGsonGsonBuilder *) nil_chk(gsonBuilder_)) generateNonExecutableJson])) create];
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:create_ComGoogleGsonCommonTestTypes_BagOfPrimitives_init()];
  JunitFrameworkTestCase_assertTrueWithBoolean_([((NSString *) nil_chk(json)) java_hasPrefix:ComGoogleGsonFunctionalSecurityTest_JSON_NON_EXECUTABLE_PREFIX]);
}

- (void)testNonExecutableJsonDeserialization {
  NSString *json = JreStrcat("$$", ComGoogleGsonFunctionalSecurityTest_JSON_NON_EXECUTABLE_PREFIX, @"{longValue:1}");
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk(gsonBuilder_)) create];
  ComGoogleGsonCommonTestTypes_BagOfPrimitives *target = [((ComGoogleGsonGson *) nil_chk(gson)) fromJsonWithNSString:json withIOSClass:ComGoogleGsonCommonTestTypes_BagOfPrimitives_class_()];
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(1, ((ComGoogleGsonCommonTestTypes_BagOfPrimitives *) nil_chk(target))->longValue_);
}

- (void)testJsonWithNonExectuableTokenSerialization {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([((ComGoogleGsonGsonBuilder *) nil_chk(gsonBuilder_)) generateNonExecutableJson])) create];
  NSString *json = [((ComGoogleGsonGson *) nil_chk(gson)) toJsonWithId:ComGoogleGsonFunctionalSecurityTest_JSON_NON_EXECUTABLE_PREFIX];
  JunitFrameworkTestCase_assertTrueWithBoolean_([((NSString *) nil_chk(json)) java_contains:@")]}'\n"]);
}

- (void)testJsonWithNonExectuableTokenWithRegularGsonDeserialization {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk(gsonBuilder_)) create];
  NSString *json = JreStrcat("$$", ComGoogleGsonFunctionalSecurityTest_JSON_NON_EXECUTABLE_PREFIX, @"{stringValue:')]}\\u0027\\n'}");
  ComGoogleGsonCommonTestTypes_BagOfPrimitives *target = [((ComGoogleGsonGson *) nil_chk(gson)) fromJsonWithNSString:json withIOSClass:ComGoogleGsonCommonTestTypes_BagOfPrimitives_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@")]}'\n", ((ComGoogleGsonCommonTestTypes_BagOfPrimitives *) nil_chk(target))->stringValue_);
}

- (void)testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization {
  ComGoogleGsonGson *gson = [((ComGoogleGsonGsonBuilder *) nil_chk([((ComGoogleGsonGsonBuilder *) nil_chk(gsonBuilder_)) generateNonExecutableJson])) create];
  NSString *json = JreStrcat("$$", ComGoogleGsonFunctionalSecurityTest_JSON_NON_EXECUTABLE_PREFIX, @"{intValue:2,stringValue:')]}\\u0027\\n'}");
  ComGoogleGsonCommonTestTypes_BagOfPrimitives *target = [((ComGoogleGsonGson *) nil_chk(gson)) fromJsonWithNSString:json withIOSClass:ComGoogleGsonCommonTestTypes_BagOfPrimitives_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@")]}'\n", ((ComGoogleGsonCommonTestTypes_BagOfPrimitives *) nil_chk(target))->stringValue_);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(2, target->intValue_);
}

- (void)dealloc {
  RELEASE_(gsonBuilder_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(testNonExecutableJsonSerialization);
  methods[3].selector = @selector(testNonExecutableJsonDeserialization);
  methods[4].selector = @selector(testJsonWithNonExectuableTokenSerialization);
  methods[5].selector = @selector(testJsonWithNonExectuableTokenWithRegularGsonDeserialization);
  methods[6].selector = @selector(testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "JSON_NON_EXECUTABLE_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 1, -1, -1 },
    { "gsonBuilder_", "LComGoogleGsonGsonBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", &ComGoogleGsonFunctionalSecurityTest_JSON_NON_EXECUTABLE_PREFIX };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalSecurityTest = { "SecurityTest", "com.google.gson.functional", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalSecurityTest;
}

@end

void ComGoogleGsonFunctionalSecurityTest_init(ComGoogleGsonFunctionalSecurityTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComGoogleGsonFunctionalSecurityTest *new_ComGoogleGsonFunctionalSecurityTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalSecurityTest, init)
}

ComGoogleGsonFunctionalSecurityTest *create_ComGoogleGsonFunctionalSecurityTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalSecurityTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalSecurityTest)
