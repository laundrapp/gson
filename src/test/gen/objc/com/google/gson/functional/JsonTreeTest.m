//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/functional/JsonTreeTest.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/google/gson/Gson.h"
#include "com/google/gson/JsonElement.h"
#include "com/google/gson/JsonObject.h"
#include "com/google/gson/JsonPrimitive.h"
#include "com/google/gson/common/TestTypes.h"
#include "com/google/gson/functional/JsonTreeTest.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "junit/framework/TestCase.h"

@interface ComGoogleGsonFunctionalJsonTreeTest () {
 @public
  ComGoogleGsonGson *gson_;
}

- (void)assertContainsWithComGoogleGsonJsonObject:(ComGoogleGsonJsonObject *)json
                   withComGoogleGsonJsonPrimitive:(ComGoogleGsonJsonPrimitive *)child;

@end

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalJsonTreeTest, gson_, ComGoogleGsonGson *)

__attribute__((unused)) static void ComGoogleGsonFunctionalJsonTreeTest_assertContainsWithComGoogleGsonJsonObject_withComGoogleGsonJsonPrimitive_(ComGoogleGsonFunctionalJsonTreeTest *self, ComGoogleGsonJsonObject *json, ComGoogleGsonJsonPrimitive *child);

@interface ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives : ComGoogleGsonCommonTestTypes_BagOfPrimitives {
 @public
  jfloat f_;
}

- (instancetype)initWithLong:(jlong)l
                     withInt:(jint)i
                 withBoolean:(jboolean)b
                withNSString:(NSString *)string
                   withFloat:(jfloat)f;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives)

__attribute__((unused)) static void ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives_initWithLong_withInt_withBoolean_withNSString_withFloat_(ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives *self, jlong l, jint i, jboolean b, NSString *string, jfloat f);

__attribute__((unused)) static ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives *new_ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives_initWithLong_withInt_withBoolean_withNSString_withFloat_(jlong l, jint i, jboolean b, NSString *string, jfloat f) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives *create_ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives_initWithLong_withInt_withBoolean_withNSString_withFloat_(jlong l, jint i, jboolean b, NSString *string, jfloat f);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives)

@implementation ComGoogleGsonFunctionalJsonTreeTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalJsonTreeTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  [super setUp];
  JreStrongAssignAndConsume(&gson_, new_ComGoogleGsonGson_init());
}

- (void)testToJsonTree {
  ComGoogleGsonCommonTestTypes_BagOfPrimitives *bag = create_ComGoogleGsonCommonTestTypes_BagOfPrimitives_initWithLong_withInt_withBoolean_withNSString_(10LL, 5, false, @"foo");
  ComGoogleGsonJsonElement *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonTreeWithId:bag];
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonJsonElement *) nil_chk(json)) isJsonObject]);
  ComGoogleGsonJsonObject *obj = [json getAsJsonObject];
  id<JavaUtilSet> children = [((ComGoogleGsonJsonObject *) nil_chk(obj)) entrySet];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(4, [((id<JavaUtilSet>) nil_chk(children)) size]);
  ComGoogleGsonFunctionalJsonTreeTest_assertContainsWithComGoogleGsonJsonObject_withComGoogleGsonJsonPrimitive_(self, obj, create_ComGoogleGsonJsonPrimitive_initWithNSNumber_(JavaLangLong_valueOfWithLong_(10LL)));
  ComGoogleGsonFunctionalJsonTreeTest_assertContainsWithComGoogleGsonJsonObject_withComGoogleGsonJsonPrimitive_(self, obj, create_ComGoogleGsonJsonPrimitive_initWithNSNumber_(JavaLangInteger_valueOfWithInt_(5)));
  ComGoogleGsonFunctionalJsonTreeTest_assertContainsWithComGoogleGsonJsonObject_withComGoogleGsonJsonPrimitive_(self, obj, create_ComGoogleGsonJsonPrimitive_initWithJavaLangBoolean_(JavaLangBoolean_valueOfWithBoolean_(false)));
  ComGoogleGsonFunctionalJsonTreeTest_assertContainsWithComGoogleGsonJsonObject_withComGoogleGsonJsonPrimitive_(self, obj, create_ComGoogleGsonJsonPrimitive_initWithNSString_(@"foo"));
}

- (void)testToJsonTreeObjectType {
  ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives *bag = create_ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives_initWithLong_withInt_withBoolean_withNSString_withFloat_(10LL, 5, false, @"foo", 1.4f);
  ComGoogleGsonJsonElement *json = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonTreeWithId:bag withJavaLangReflectType:ComGoogleGsonCommonTestTypes_BagOfPrimitives_class_()];
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonJsonElement *) nil_chk(json)) isJsonObject]);
  ComGoogleGsonJsonObject *obj = [json getAsJsonObject];
  id<JavaUtilSet> children = [((ComGoogleGsonJsonObject *) nil_chk(obj)) entrySet];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(4, [((id<JavaUtilSet>) nil_chk(children)) size]);
  ComGoogleGsonFunctionalJsonTreeTest_assertContainsWithComGoogleGsonJsonObject_withComGoogleGsonJsonPrimitive_(self, obj, create_ComGoogleGsonJsonPrimitive_initWithNSNumber_(JavaLangLong_valueOfWithLong_(10LL)));
  ComGoogleGsonFunctionalJsonTreeTest_assertContainsWithComGoogleGsonJsonObject_withComGoogleGsonJsonPrimitive_(self, obj, create_ComGoogleGsonJsonPrimitive_initWithNSNumber_(JavaLangInteger_valueOfWithInt_(5)));
  ComGoogleGsonFunctionalJsonTreeTest_assertContainsWithComGoogleGsonJsonObject_withComGoogleGsonJsonPrimitive_(self, obj, create_ComGoogleGsonJsonPrimitive_initWithJavaLangBoolean_(JavaLangBoolean_valueOfWithBoolean_(false)));
  ComGoogleGsonFunctionalJsonTreeTest_assertContainsWithComGoogleGsonJsonObject_withComGoogleGsonJsonPrimitive_(self, obj, create_ComGoogleGsonJsonPrimitive_initWithNSString_(@"foo"));
}

- (void)testJsonTreeToString {
  ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives *bag = create_ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives_initWithLong_withInt_withBoolean_withNSString_withFloat_(10LL, 5, false, @"foo", 1.4f);
  NSString *json1 = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:bag];
  ComGoogleGsonJsonElement *jsonElement = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonTreeWithId:bag withJavaLangReflectType:ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives_class_()];
  NSString *json2 = [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithComGoogleGsonJsonElement:jsonElement];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(json1, json2);
}

- (void)testJsonTreeNull {
  ComGoogleGsonCommonTestTypes_BagOfPrimitives *bag = create_ComGoogleGsonCommonTestTypes_BagOfPrimitives_initWithLong_withInt_withBoolean_withNSString_(10LL, 5, false, nil);
  ComGoogleGsonJsonObject *jsonElement = (ComGoogleGsonJsonObject *) cast_chk([((ComGoogleGsonGson *) nil_chk(gson_)) toJsonTreeWithId:bag withJavaLangReflectType:ComGoogleGsonCommonTestTypes_BagOfPrimitives_class_()], [ComGoogleGsonJsonObject class]);
  JunitFrameworkTestCase_assertFalseWithBoolean_([((ComGoogleGsonJsonObject *) nil_chk(jsonElement)) hasWithNSString:@"stringValue"]);
}

- (void)assertContainsWithComGoogleGsonJsonObject:(ComGoogleGsonJsonObject *)json
                   withComGoogleGsonJsonPrimitive:(ComGoogleGsonJsonPrimitive *)child {
  ComGoogleGsonFunctionalJsonTreeTest_assertContainsWithComGoogleGsonJsonObject_withComGoogleGsonJsonPrimitive_(self, json, child);
}

- (void)dealloc {
  RELEASE_(gson_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(testToJsonTree);
  methods[3].selector = @selector(testToJsonTreeObjectType);
  methods[4].selector = @selector(testJsonTreeToString);
  methods[5].selector = @selector(testJsonTreeNull);
  methods[6].selector = @selector(assertContainsWithComGoogleGsonJsonObject:withComGoogleGsonJsonPrimitive:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "gson_", "LComGoogleGsonGson;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "assertContains", "LComGoogleGsonJsonObject;LComGoogleGsonJsonPrimitive;", "LComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalJsonTreeTest = { "JsonTreeTest", "com.google.gson.functional", ptrTable, methods, fields, 7, 0x1, 7, 1, -1, 3, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalJsonTreeTest;
}

@end

void ComGoogleGsonFunctionalJsonTreeTest_init(ComGoogleGsonFunctionalJsonTreeTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComGoogleGsonFunctionalJsonTreeTest *new_ComGoogleGsonFunctionalJsonTreeTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalJsonTreeTest, init)
}

ComGoogleGsonFunctionalJsonTreeTest *create_ComGoogleGsonFunctionalJsonTreeTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalJsonTreeTest, init)
}

void ComGoogleGsonFunctionalJsonTreeTest_assertContainsWithComGoogleGsonJsonObject_withComGoogleGsonJsonPrimitive_(ComGoogleGsonFunctionalJsonTreeTest *self, ComGoogleGsonJsonObject *json, ComGoogleGsonJsonPrimitive *child) {
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((ComGoogleGsonJsonObject *) nil_chk(json)) entrySet])) {
    ComGoogleGsonJsonElement *node = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
    if ([((ComGoogleGsonJsonElement *) nil_chk(node)) isJsonPrimitive]) {
      if ([((ComGoogleGsonJsonPrimitive *) nil_chk([node getAsJsonPrimitive])) isEqual:child]) {
        return;
      }
    }
  }
  JunitFrameworkTestCase_fail();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalJsonTreeTest)

@implementation ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives

- (instancetype)initWithLong:(jlong)l
                     withInt:(jint)i
                 withBoolean:(jboolean)b
                withNSString:(NSString *)string
                   withFloat:(jfloat)f {
  ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives_initWithLong_withInt_withBoolean_withNSString_withFloat_(self, l, i, b, string, f);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:withInt:withBoolean:withNSString:withFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "f_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "JIZLNSString;F", "LComGoogleGsonFunctionalJsonTreeTest;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives = { "SubTypeOfBagOfPrimitives", "com.google.gson.functional", ptrTable, methods, fields, 7, 0xa, 1, 1, 1, -1, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives;
}

@end

void ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives_initWithLong_withInt_withBoolean_withNSString_withFloat_(ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives *self, jlong l, jint i, jboolean b, NSString *string, jfloat f) {
  ComGoogleGsonCommonTestTypes_BagOfPrimitives_initWithLong_withInt_withBoolean_withNSString_(self, l, i, b, string);
  self->f_ = 1.2f;
  self->f_ = f;
}

ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives *new_ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives_initWithLong_withInt_withBoolean_withNSString_withFloat_(jlong l, jint i, jboolean b, NSString *string, jfloat f) {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives, initWithLong_withInt_withBoolean_withNSString_withFloat_, l, i, b, string, f)
}

ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives *create_ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives_initWithLong_withInt_withBoolean_withNSString_withFloat_(jlong l, jint i, jboolean b, NSString *string, jfloat f) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives, initWithLong_withInt_withBoolean_withNSString_withFloat_, l, i, b, string, f)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalJsonTreeTest_SubTypeOfBagOfPrimitives)
