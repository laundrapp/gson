//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/functional/PrimitiveCharacterTest.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/google/gson/Gson.h"
#include "com/google/gson/functional/PrimitiveCharacterTest.h"
#include "java/lang/Character.h"
#include "junit/framework/TestCase.h"

@interface ComGoogleGsonFunctionalPrimitiveCharacterTest () {
 @public
  ComGoogleGsonGson *gson_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalPrimitiveCharacterTest, gson_, ComGoogleGsonGson *)

@implementation ComGoogleGsonFunctionalPrimitiveCharacterTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonFunctionalPrimitiveCharacterTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  [super setUp];
  JreStrongAssignAndConsume(&gson_, new_ComGoogleGsonGson_init());
}

- (void)testPrimitiveCharacterAutoboxedSerialization {
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"A\"", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangCharacter_valueOfWithChar_('A')]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"A\"", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangCharacter_valueOfWithChar_('A') withJavaLangReflectType:[IOSClass charClass]]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"A\"", [((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:JavaLangCharacter_valueOfWithChar_('A') withJavaLangReflectType:JavaLangCharacter_class_()]);
}

- (void)testPrimitiveCharacterAutoboxedDeserialization {
  jchar expected = 'a';
  jchar actual = [((JavaLangCharacter *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"a" withIOSClass:[IOSClass charClass]])) charValue];
  JunitFrameworkTestCase_assertEqualsWithChar_withChar_(expected, actual);
  actual = [((JavaLangCharacter *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"\"a\"" withIOSClass:[IOSClass charClass]])) charValue];
  JunitFrameworkTestCase_assertEqualsWithChar_withChar_(expected, actual);
  actual = [((JavaLangCharacter *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithNSString:@"a" withIOSClass:JavaLangCharacter_class_()])) charValue];
  JunitFrameworkTestCase_assertEqualsWithChar_withChar_(expected, actual);
}

- (void)dealloc {
  RELEASE_(gson_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(testPrimitiveCharacterAutoboxedSerialization);
  methods[3].selector = @selector(testPrimitiveCharacterAutoboxedDeserialization);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "gson_", "LComGoogleGsonGson;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;" };
  static const J2ObjcClassInfo _ComGoogleGsonFunctionalPrimitiveCharacterTest = { "PrimitiveCharacterTest", "com.google.gson.functional", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_ComGoogleGsonFunctionalPrimitiveCharacterTest;
}

@end

void ComGoogleGsonFunctionalPrimitiveCharacterTest_init(ComGoogleGsonFunctionalPrimitiveCharacterTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComGoogleGsonFunctionalPrimitiveCharacterTest *new_ComGoogleGsonFunctionalPrimitiveCharacterTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonFunctionalPrimitiveCharacterTest, init)
}

ComGoogleGsonFunctionalPrimitiveCharacterTest *create_ComGoogleGsonFunctionalPrimitiveCharacterTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonFunctionalPrimitiveCharacterTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonFunctionalPrimitiveCharacterTest)
