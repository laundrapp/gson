//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/functional/ObjectTest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleGsonFunctionalObjectTest")
#ifdef RESTRICT_ComGoogleGsonFunctionalObjectTest
#define INCLUDE_ALL_ComGoogleGsonFunctionalObjectTest 0
#else
#define INCLUDE_ALL_ComGoogleGsonFunctionalObjectTest 1
#endif
#undef RESTRICT_ComGoogleGsonFunctionalObjectTest

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleGsonFunctionalObjectTest_) && (INCLUDE_ALL_ComGoogleGsonFunctionalObjectTest || defined(INCLUDE_ComGoogleGsonFunctionalObjectTest))
#define ComGoogleGsonFunctionalObjectTest_

#define RESTRICT_JunitFrameworkTestCase 1
#define INCLUDE_JunitFrameworkTestCase 1
#include "junit/framework/TestCase.h"

/*!
 @brief Functional tests for Json serialization and deserialization of regular classes.
 @author Inderjeet Singh
 @author Joel Leitch
 */
@interface ComGoogleGsonFunctionalObjectTest : JunitFrameworkTestCase

#pragma mark Public

- (instancetype __nonnull)init;

- (void)testAnonymousLocalClassesCustomSerialization;

- (void)testAnonymousLocalClassesSerialization;

- (void)testArrayOfArraysDeserialization;

- (void)testArrayOfArraysSerialization;

- (void)testArrayOfObjectsAsFields;

- (void)testArrayOfObjectsDeserialization;

- (void)testArrayOfObjectsSerialization;

- (void)testBagOfPrimitivesDeserialization;

- (void)testBagOfPrimitivesSerialization;

- (void)testBagOfPrimitiveWrappersDeserialization;

- (void)testBagOfPrimitiveWrappersSerialization;

- (void)testClassWithNoFieldsDeserialization;

- (void)testClassWithNoFieldsSerialization;

/*!
 @brief Tests that a class field with type Object can be serialized properly.
 See issue 54
 */
- (void)testClassWithObjectFieldSerialization;

- (void)testClassWithTransientFieldsDeserialization;

- (void)testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored;

- (void)testClassWithTransientFieldsSerialization;

- (void)testDateAsMapObjectField;

- (void)testEmptyCollectionInAnObjectDeserialization;

- (void)testEmptyCollectionInAnObjectSerialization;

- (void)testEmptyStringDeserialization;

- (void)testInnerClassDeserialization;

- (void)testInnerClassSerialization;

- (void)testJsonInMixedQuotesDeserialization;

- (void)testJsonInSingleQuotesDeserialization;

- (void)testJsonObjectSerialization;

- (void)testNestedDeserialization;

- (void)testNestedSerialization;

/*!
 @brief Created in response to Issue 14: http://code.google.com/p/google-gson/issues/detail?
 id=14
 */
- (void)testNullArraysDeserialization;

- (void)testNullDeserialization;

- (void)testNullFieldsDeserialization;

- (void)testNullFieldsSerialization;

/*!
 @brief Created in response to Issue 14: http://code.google.com/p/google-gson/issues/detail?
 id=14
 */
- (void)testNullObjectFieldsDeserialization;

/*!
 @brief Created in response to Issue 14: http://code.google.com/p/google-gson/issues/detail?
 id=14
 */
- (void)testNullPrimitiveFieldsDeserialization;

- (void)testNullSerialization;

/*!
 @brief In response to Issue 41 http://code.google.com/p/google-gson/issues/detail?
 id=41
 */
- (void)testObjectFieldNamesWithoutQuotesDeserialization;

- (void)testPrimitiveArrayFieldSerialization;

- (void)testPrimitiveArrayInAnObjectDeserialization;

- (void)testPrivateNoArgConstructorDeserialization;

/*!
 @brief Test for issue 215.
 */
- (void)testSingletonLists;

/*!
 @brief Created to reproduce issue 140
 */
- (void)testStringFieldWithEmptyValueDeserialization;

/*!
 @brief Created to reproduce issue 140
 */
- (void)testStringFieldWithEmptyValueSerialization;

- (void)testStringFieldWithNumberValueDeserialization;

- (void)testTruncatedDeserialization;

#pragma mark Protected

- (void)setUp;

- (void)tearDown;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalObjectTest)

FOUNDATION_EXPORT void ComGoogleGsonFunctionalObjectTest_init(ComGoogleGsonFunctionalObjectTest *self);

FOUNDATION_EXPORT ComGoogleGsonFunctionalObjectTest *new_ComGoogleGsonFunctionalObjectTest_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleGsonFunctionalObjectTest *create_ComGoogleGsonFunctionalObjectTest_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonFunctionalObjectTest)

#endif

#if !defined (ComGoogleGsonFunctionalObjectTest_HasObjectMap_) && (INCLUDE_ALL_ComGoogleGsonFunctionalObjectTest || defined(INCLUDE_ComGoogleGsonFunctionalObjectTest_HasObjectMap))
#define ComGoogleGsonFunctionalObjectTest_HasObjectMap_

@class ComGoogleGsonFunctionalObjectTest;
@protocol JavaUtilMap;

@interface ComGoogleGsonFunctionalObjectTest_HasObjectMap : NSObject {
 @public
  id<JavaUtilMap> map_;
}

#pragma mark Public

- (instancetype __nonnull)initWithComGoogleGsonFunctionalObjectTest:(ComGoogleGsonFunctionalObjectTest *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalObjectTest_HasObjectMap)

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalObjectTest_HasObjectMap, map_, id<JavaUtilMap>)

FOUNDATION_EXPORT void ComGoogleGsonFunctionalObjectTest_HasObjectMap_initWithComGoogleGsonFunctionalObjectTest_(ComGoogleGsonFunctionalObjectTest_HasObjectMap *self, ComGoogleGsonFunctionalObjectTest *outer$);

FOUNDATION_EXPORT ComGoogleGsonFunctionalObjectTest_HasObjectMap *new_ComGoogleGsonFunctionalObjectTest_HasObjectMap_initWithComGoogleGsonFunctionalObjectTest_(ComGoogleGsonFunctionalObjectTest *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleGsonFunctionalObjectTest_HasObjectMap *create_ComGoogleGsonFunctionalObjectTest_HasObjectMap_initWithComGoogleGsonFunctionalObjectTest_(ComGoogleGsonFunctionalObjectTest *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonFunctionalObjectTest_HasObjectMap)

#endif

#if !defined (ComGoogleGsonFunctionalObjectTest_Department_) && (INCLUDE_ALL_ComGoogleGsonFunctionalObjectTest || defined(INCLUDE_ComGoogleGsonFunctionalObjectTest_Department))
#define ComGoogleGsonFunctionalObjectTest_Department_

@interface ComGoogleGsonFunctionalObjectTest_Department : NSObject {
 @public
  NSString *name_;
  NSString *code_;
}

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalObjectTest_Department)

J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalObjectTest_Department, name_, NSString *)
J2OBJC_FIELD_SETTER(ComGoogleGsonFunctionalObjectTest_Department, code_, NSString *)

FOUNDATION_EXPORT void ComGoogleGsonFunctionalObjectTest_Department_init(ComGoogleGsonFunctionalObjectTest_Department *self);

FOUNDATION_EXPORT ComGoogleGsonFunctionalObjectTest_Department *new_ComGoogleGsonFunctionalObjectTest_Department_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleGsonFunctionalObjectTest_Department *create_ComGoogleGsonFunctionalObjectTest_Department_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonFunctionalObjectTest_Department)

#endif

#if !defined (ComGoogleGsonFunctionalObjectTest_Product_) && (INCLUDE_ALL_ComGoogleGsonFunctionalObjectTest || defined(INCLUDE_ComGoogleGsonFunctionalObjectTest_Product))
#define ComGoogleGsonFunctionalObjectTest_Product_

@interface ComGoogleGsonFunctionalObjectTest_Product : NSObject

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonFunctionalObjectTest_Product)

FOUNDATION_EXPORT void ComGoogleGsonFunctionalObjectTest_Product_init(ComGoogleGsonFunctionalObjectTest_Product *self);

FOUNDATION_EXPORT ComGoogleGsonFunctionalObjectTest_Product *new_ComGoogleGsonFunctionalObjectTest_Product_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleGsonFunctionalObjectTest_Product *create_ComGoogleGsonFunctionalObjectTest_Product_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonFunctionalObjectTest_Product)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComGoogleGsonFunctionalObjectTest")
