//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/CommentsTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/gson/CommentsTest.h"
#include "com/google/gson/Gson.h"
#include "com/google/gson/reflect/TypeToken.h"
#include "java/lang/reflect/Type.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "junit/framework/TestCase.h"

@interface ComGoogleGsonCommentsTest_1 : ComGoogleGsonReflectTypeToken

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonCommentsTest_1)

__attribute__((unused)) static void ComGoogleGsonCommentsTest_1_init(ComGoogleGsonCommentsTest_1 *self);

__attribute__((unused)) static ComGoogleGsonCommentsTest_1 *new_ComGoogleGsonCommentsTest_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonCommentsTest_1 *create_ComGoogleGsonCommentsTest_1_init(void);

@implementation ComGoogleGsonCommentsTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComGoogleGsonCommentsTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)testParseComments {
  NSString *json = @"[\n  // this is a comment\n  \"a\",\n  /* this is another comment */\n  \"b\",\n  # this is yet another comment\n  \"c\"\n]";
  id<JavaUtilList> abc = [create_ComGoogleGsonGson_init() fromJsonWithNSString:json withJavaLangReflectType:[create_ComGoogleGsonCommentsTest_1_init() getType]];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"a", @"b", @"c" } count:3 type:NSString_class_()]), abc);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(testParseComments);
  #pragma clang diagnostic pop
  static const J2ObjcClassInfo _ComGoogleGsonCommentsTest = { "CommentsTest", "com.google.gson", NULL, methods, NULL, 7, 0x11, 2, 0, -1, -1, -1, -1, -1 };
  return &_ComGoogleGsonCommentsTest;
}

@end

void ComGoogleGsonCommentsTest_init(ComGoogleGsonCommentsTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComGoogleGsonCommentsTest *new_ComGoogleGsonCommentsTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonCommentsTest, init)
}

ComGoogleGsonCommentsTest *create_ComGoogleGsonCommentsTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonCommentsTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonCommentsTest)

@implementation ComGoogleGsonCommentsTest_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComGoogleGsonCommentsTest_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleGsonCommentsTest;", "testParseComments", "Lcom/google/gson/reflect/TypeToken<Ljava/util/List<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _ComGoogleGsonCommentsTest_1 = { "", "com.google.gson", ptrTable, methods, NULL, 7, 0x8018, 1, 0, 0, -1, 1, 2, -1 };
  return &_ComGoogleGsonCommentsTest_1;
}

@end

void ComGoogleGsonCommentsTest_1_init(ComGoogleGsonCommentsTest_1 *self) {
  ComGoogleGsonReflectTypeToken_init(self);
}

ComGoogleGsonCommentsTest_1 *new_ComGoogleGsonCommentsTest_1_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonCommentsTest_1, init)
}

ComGoogleGsonCommentsTest_1 *create_ComGoogleGsonCommentsTest_1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonCommentsTest_1, init)
}
