//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/JsonStreamParserTest.java
//

#include "J2ObjC_source.h"
#include "com/google/gson/JsonElement.h"
#include "com/google/gson/JsonStreamParser.h"
#include "com/google/gson/JsonStreamParserTest.h"
#include "java/util/NoSuchElementException.h"
#include "junit/framework/TestCase.h"

@interface ComGoogleGsonJsonStreamParserTest () {
 @public
  ComGoogleGsonJsonStreamParser *parser_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleGsonJsonStreamParserTest, parser_, ComGoogleGsonJsonStreamParser *)

@implementation ComGoogleGsonJsonStreamParserTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComGoogleGsonJsonStreamParserTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  [super setUp];
  JreStrongAssignAndConsume(&parser_, new_ComGoogleGsonJsonStreamParser_initWithNSString_(@"'one' 'two'"));
}

- (void)testParseTwoStrings {
  NSString *actualOne = [((ComGoogleGsonJsonElement *) nil_chk([((ComGoogleGsonJsonStreamParser *) nil_chk(parser_)) next])) getAsString];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"one", actualOne);
  NSString *actualTwo = [((ComGoogleGsonJsonElement *) nil_chk([((ComGoogleGsonJsonStreamParser *) nil_chk(parser_)) next])) getAsString];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"two", actualTwo);
}

- (void)testIterator {
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonJsonStreamParser *) nil_chk(parser_)) hasNext]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"one", [((ComGoogleGsonJsonElement *) nil_chk([((ComGoogleGsonJsonStreamParser *) nil_chk(parser_)) next])) getAsString]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonJsonStreamParser *) nil_chk(parser_)) hasNext]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"two", [((ComGoogleGsonJsonElement *) nil_chk([((ComGoogleGsonJsonStreamParser *) nil_chk(parser_)) next])) getAsString]);
  JunitFrameworkTestCase_assertFalseWithBoolean_([((ComGoogleGsonJsonStreamParser *) nil_chk(parser_)) hasNext]);
}

- (void)testNoSideEffectForHasNext {
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonJsonStreamParser *) nil_chk(parser_)) hasNext]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonJsonStreamParser *) nil_chk(parser_)) hasNext]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonJsonStreamParser *) nil_chk(parser_)) hasNext]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"one", [((ComGoogleGsonJsonElement *) nil_chk([((ComGoogleGsonJsonStreamParser *) nil_chk(parser_)) next])) getAsString]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonJsonStreamParser *) nil_chk(parser_)) hasNext]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonJsonStreamParser *) nil_chk(parser_)) hasNext]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"two", [((ComGoogleGsonJsonElement *) nil_chk([((ComGoogleGsonJsonStreamParser *) nil_chk(parser_)) next])) getAsString]);
  JunitFrameworkTestCase_assertFalseWithBoolean_([((ComGoogleGsonJsonStreamParser *) nil_chk(parser_)) hasNext]);
  JunitFrameworkTestCase_assertFalseWithBoolean_([((ComGoogleGsonJsonStreamParser *) nil_chk(parser_)) hasNext]);
}

- (void)testCallingNextBeyondAvailableInput {
  [((ComGoogleGsonJsonStreamParser *) nil_chk(parser_)) next];
  [((ComGoogleGsonJsonStreamParser *) nil_chk(parser_)) next];
  @try {
    [((ComGoogleGsonJsonStreamParser *) nil_chk(parser_)) next];
    JunitFrameworkTestCase_failWithNSString_(@"Parser should not go beyond available input");
  }
  @catch (JavaUtilNoSuchElementException *expected) {
  }
}

- (void)dealloc {
  RELEASE_(parser_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(testParseTwoStrings);
  methods[3].selector = @selector(testIterator);
  methods[4].selector = @selector(testNoSideEffectForHasNext);
  methods[5].selector = @selector(testCallingNextBeyondAvailableInput);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parser_", "LComGoogleGsonJsonStreamParser;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;" };
  static const J2ObjcClassInfo _ComGoogleGsonJsonStreamParserTest = { "JsonStreamParserTest", "com.google.gson", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, -1, -1, -1, -1 };
  return &_ComGoogleGsonJsonStreamParserTest;
}

@end

void ComGoogleGsonJsonStreamParserTest_init(ComGoogleGsonJsonStreamParserTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComGoogleGsonJsonStreamParserTest *new_ComGoogleGsonJsonStreamParserTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonJsonStreamParserTest, init)
}

ComGoogleGsonJsonStreamParserTest *create_ComGoogleGsonJsonStreamParserTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonJsonStreamParserTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonJsonStreamParserTest)
