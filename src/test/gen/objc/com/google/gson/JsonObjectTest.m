//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/JsonObjectTest.java
//

#include "J2ObjC_source.h"
#include "com/google/gson/Gson.h"
#include "com/google/gson/JsonArray.h"
#include "com/google/gson/JsonElement.h"
#include "com/google/gson/JsonNull.h"
#include "com/google/gson/JsonObject.h"
#include "com/google/gson/JsonObjectTest.h"
#include "com/google/gson/JsonParser.h"
#include "com/google/gson/JsonPrimitive.h"
#include "com/google/gson/common/MoreAsserts.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/NullPointerException.h"
#include "junit/framework/TestCase.h"

@implementation ComGoogleGsonJsonObjectTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonJsonObjectTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)testAddingAndRemovingObjectProperties {
  ComGoogleGsonJsonObject *jsonObj = create_ComGoogleGsonJsonObject_init();
  NSString *propertyName = @"property";
  JunitFrameworkTestCase_assertFalseWithBoolean_([jsonObj hasWithNSString:propertyName]);
  JunitFrameworkTestCase_assertNullWithId_([jsonObj getWithNSString:propertyName]);
  ComGoogleGsonJsonPrimitive *value = create_ComGoogleGsonJsonPrimitive_initWithNSString_(@"blah");
  [jsonObj addWithNSString:propertyName withComGoogleGsonJsonElement:value];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(value, [jsonObj getWithNSString:propertyName]);
  ComGoogleGsonJsonElement *removedElement = [jsonObj removeWithNSString:propertyName];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(value, removedElement);
  JunitFrameworkTestCase_assertFalseWithBoolean_([jsonObj hasWithNSString:propertyName]);
  JunitFrameworkTestCase_assertNullWithId_([jsonObj getWithNSString:propertyName]);
}

- (void)testAddingNullPropertyValue {
  NSString *propertyName = @"property";
  ComGoogleGsonJsonObject *jsonObj = create_ComGoogleGsonJsonObject_init();
  [jsonObj addWithNSString:propertyName withComGoogleGsonJsonElement:nil];
  JunitFrameworkTestCase_assertTrueWithBoolean_([jsonObj hasWithNSString:propertyName]);
  ComGoogleGsonJsonElement *jsonElement = [jsonObj getWithNSString:propertyName];
  JunitFrameworkTestCase_assertNotNullWithId_(jsonElement);
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonJsonElement *) nil_chk(jsonElement)) isJsonNull]);
}

- (void)testAddingNullOrEmptyPropertyName {
  ComGoogleGsonJsonObject *jsonObj = create_ComGoogleGsonJsonObject_init();
  @try {
    [jsonObj addWithNSString:nil withComGoogleGsonJsonElement:JreLoadStatic(ComGoogleGsonJsonNull, INSTANCE)];
    JunitFrameworkTestCase_failWithNSString_(@"Should not allow null property names.");
  }
  @catch (JavaLangNullPointerException *expected) {
  }
  [jsonObj addWithNSString:@"" withComGoogleGsonJsonElement:JreLoadStatic(ComGoogleGsonJsonNull, INSTANCE)];
  [jsonObj addWithNSString:@"   \t" withComGoogleGsonJsonElement:JreLoadStatic(ComGoogleGsonJsonNull, INSTANCE)];
}

- (void)testAddingBooleanProperties {
  NSString *propertyName = @"property";
  ComGoogleGsonJsonObject *jsonObj = create_ComGoogleGsonJsonObject_init();
  [jsonObj addPropertyWithNSString:propertyName withJavaLangBoolean:JavaLangBoolean_valueOfWithBoolean_(true)];
  JunitFrameworkTestCase_assertTrueWithBoolean_([jsonObj hasWithNSString:propertyName]);
  ComGoogleGsonJsonElement *jsonElement = [jsonObj getWithNSString:propertyName];
  JunitFrameworkTestCase_assertNotNullWithId_(jsonElement);
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonJsonElement *) nil_chk(jsonElement)) getAsBoolean]);
}

- (void)testAddingStringProperties {
  NSString *propertyName = @"property";
  NSString *value = @"blah";
  ComGoogleGsonJsonObject *jsonObj = create_ComGoogleGsonJsonObject_init();
  [jsonObj addPropertyWithNSString:propertyName withNSString:value];
  JunitFrameworkTestCase_assertTrueWithBoolean_([jsonObj hasWithNSString:propertyName]);
  ComGoogleGsonJsonElement *jsonElement = [jsonObj getWithNSString:propertyName];
  JunitFrameworkTestCase_assertNotNullWithId_(jsonElement);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(value, [((ComGoogleGsonJsonElement *) nil_chk(jsonElement)) getAsString]);
}

- (void)testAddingCharacterProperties {
  NSString *propertyName = @"property";
  jchar value = 'a';
  ComGoogleGsonJsonObject *jsonObj = create_ComGoogleGsonJsonObject_init();
  [jsonObj addPropertyWithNSString:propertyName withJavaLangCharacter:JavaLangCharacter_valueOfWithChar_(value)];
  JunitFrameworkTestCase_assertTrueWithBoolean_([jsonObj hasWithNSString:propertyName]);
  ComGoogleGsonJsonElement *jsonElement = [jsonObj getWithNSString:propertyName];
  JunitFrameworkTestCase_assertNotNullWithId_(jsonElement);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(NSString_java_valueOfChar_(value), [((ComGoogleGsonJsonElement *) nil_chk(jsonElement)) getAsString]);
  JunitFrameworkTestCase_assertEqualsWithChar_withChar_(value, [jsonElement getAsCharacter]);
}

- (void)testPropertyWithQuotes {
  ComGoogleGsonJsonObject *jsonObj = create_ComGoogleGsonJsonObject_init();
  [jsonObj addWithNSString:@"a\"b" withComGoogleGsonJsonElement:create_ComGoogleGsonJsonPrimitive_initWithNSString_(@"c\"d")];
  NSString *json = [create_ComGoogleGsonGson_init() toJsonWithComGoogleGsonJsonElement:jsonObj];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"{\"a\\\"b\":\"c\\\"d\"}", json);
}

- (void)testWritePropertyWithEmptyStringName {
  ComGoogleGsonJsonObject *jsonObj = create_ComGoogleGsonJsonObject_init();
  [jsonObj addWithNSString:@"" withComGoogleGsonJsonElement:create_ComGoogleGsonJsonPrimitive_initWithJavaLangBoolean_(JavaLangBoolean_valueOfWithBoolean_(true))];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"{\"\":true}", [create_ComGoogleGsonGson_init() toJsonWithComGoogleGsonJsonElement:jsonObj]);
}

- (void)testReadPropertyWithEmptyStringName {
  ComGoogleGsonJsonObject *jsonObj = [((ComGoogleGsonJsonElement *) nil_chk([create_ComGoogleGsonJsonParser_init() parseWithNSString:@"{\"\":true}"])) getAsJsonObject];
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [((ComGoogleGsonJsonElement *) nil_chk([((ComGoogleGsonJsonObject *) nil_chk(jsonObj)) getWithNSString:@""])) getAsBoolean]);
}

- (void)testEqualsOnEmptyObject {
  ComGoogleGsonCommonMoreAsserts_assertEqualsAndHashCodeWithId_withId_(create_ComGoogleGsonJsonObject_init(), create_ComGoogleGsonJsonObject_init());
}

- (void)testEqualsNonEmptyObject {
  ComGoogleGsonJsonObject *a = create_ComGoogleGsonJsonObject_init();
  ComGoogleGsonJsonObject *b = create_ComGoogleGsonJsonObject_init();
  JunitFrameworkTestCase_assertEqualsWithId_withId_(a, a);
  [a addWithNSString:@"foo" withComGoogleGsonJsonElement:create_ComGoogleGsonJsonObject_init()];
  JunitFrameworkTestCase_assertFalseWithBoolean_([a isEqual:b]);
  JunitFrameworkTestCase_assertFalseWithBoolean_([b isEqual:a]);
  [b addWithNSString:@"foo" withComGoogleGsonJsonElement:create_ComGoogleGsonJsonObject_init()];
  ComGoogleGsonCommonMoreAsserts_assertEqualsAndHashCodeWithId_withId_(a, b);
  [a addWithNSString:@"bar" withComGoogleGsonJsonElement:create_ComGoogleGsonJsonObject_init()];
  JunitFrameworkTestCase_assertFalseWithBoolean_([a isEqual:b]);
  JunitFrameworkTestCase_assertFalseWithBoolean_([b isEqual:a]);
  [b addWithNSString:@"bar" withComGoogleGsonJsonElement:JreLoadStatic(ComGoogleGsonJsonNull, INSTANCE)];
  JunitFrameworkTestCase_assertFalseWithBoolean_([a isEqual:b]);
  JunitFrameworkTestCase_assertFalseWithBoolean_([b isEqual:a]);
}

- (void)testDeepCopy {
  ComGoogleGsonJsonObject *original = create_ComGoogleGsonJsonObject_init();
  ComGoogleGsonJsonArray *firstEntry = create_ComGoogleGsonJsonArray_init();
  [original addWithNSString:@"key" withComGoogleGsonJsonElement:firstEntry];
  ComGoogleGsonJsonObject *copy_ = [original deepCopy];
  [firstEntry addWithComGoogleGsonJsonElement:create_ComGoogleGsonJsonPrimitive_initWithNSString_(@"z")];
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(1, [((ComGoogleGsonJsonArray *) nil_chk([((ComGoogleGsonJsonElement *) nil_chk([original getWithNSString:@"key"])) getAsJsonArray])) size]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(0, [((ComGoogleGsonJsonArray *) nil_chk([((ComGoogleGsonJsonElement *) nil_chk([((ComGoogleGsonJsonObject *) nil_chk(copy_)) getWithNSString:@"key"])) getAsJsonArray])) size]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(testAddingAndRemovingObjectProperties);
  methods[2].selector = @selector(testAddingNullPropertyValue);
  methods[3].selector = @selector(testAddingNullOrEmptyPropertyName);
  methods[4].selector = @selector(testAddingBooleanProperties);
  methods[5].selector = @selector(testAddingStringProperties);
  methods[6].selector = @selector(testAddingCharacterProperties);
  methods[7].selector = @selector(testPropertyWithQuotes);
  methods[8].selector = @selector(testWritePropertyWithEmptyStringName);
  methods[9].selector = @selector(testReadPropertyWithEmptyStringName);
  methods[10].selector = @selector(testEqualsOnEmptyObject);
  methods[11].selector = @selector(testEqualsNonEmptyObject);
  methods[12].selector = @selector(testDeepCopy);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangException;" };
  static const J2ObjcClassInfo _ComGoogleGsonJsonObjectTest = { "JsonObjectTest", "com.google.gson", ptrTable, methods, NULL, 7, 0x1, 13, 0, -1, -1, -1, -1, -1 };
  return &_ComGoogleGsonJsonObjectTest;
}

@end

void ComGoogleGsonJsonObjectTest_init(ComGoogleGsonJsonObjectTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComGoogleGsonJsonObjectTest *new_ComGoogleGsonJsonObjectTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonJsonObjectTest, init)
}

ComGoogleGsonJsonObjectTest *create_ComGoogleGsonJsonObjectTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonJsonObjectTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonJsonObjectTest)
