//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/google/gson/reflect/TypeToken.h"
#include "com/google/gson/reflect/TypeTokenTest.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Type.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/RandomAccess.h"
#include "junit/framework/TestCase.h"

@implementation ComGoogleGsonReflectTypeTokenTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComGoogleGsonReflectTypeTokenTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)testIsAssignableFromRawTypes {
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonReflectTypeToken *) nil_chk(ComGoogleGsonReflectTypeToken_getWithIOSClass_(NSObject_class_()))) isAssignableFromWithIOSClass:NSString_class_()]);
  JunitFrameworkTestCase_assertFalseWithBoolean_([((ComGoogleGsonReflectTypeToken *) nil_chk(ComGoogleGsonReflectTypeToken_getWithIOSClass_(NSString_class_()))) isAssignableFromWithIOSClass:NSObject_class_()]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonReflectTypeToken *) nil_chk(ComGoogleGsonReflectTypeToken_getWithIOSClass_(JavaUtilRandomAccess_class_()))) isAssignableFromWithIOSClass:JavaUtilArrayList_class_()]);
  JunitFrameworkTestCase_assertFalseWithBoolean_([((ComGoogleGsonReflectTypeToken *) nil_chk(ComGoogleGsonReflectTypeToken_getWithIOSClass_(JavaUtilArrayList_class_()))) isAssignableFromWithIOSClass:JavaUtilRandomAccess_class_()]);
}

- (void)testIsAssignableFromWithTypeParameters {
  id<JavaLangReflectType> a = [((JavaLangReflectField *) nil_chk([[self java_getClass] getDeclaredField:@"listOfInteger"])) getGenericType];
  id<JavaLangReflectType> b = [((JavaLangReflectField *) nil_chk([[self java_getClass] getDeclaredField:@"listOfNumber"])) getGenericType];
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonReflectTypeToken *) nil_chk(ComGoogleGsonReflectTypeToken_getWithJavaLangReflectType_(a))) isAssignableFromWithJavaLangReflectType:a]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonReflectTypeToken *) nil_chk(ComGoogleGsonReflectTypeToken_getWithJavaLangReflectType_(b))) isAssignableFromWithJavaLangReflectType:b]);
  JunitFrameworkTestCase_assertFalseWithBoolean_([((ComGoogleGsonReflectTypeToken *) nil_chk(ComGoogleGsonReflectTypeToken_getWithJavaLangReflectType_(a))) isAssignableFromWithJavaLangReflectType:b]);
  JunitFrameworkTestCase_assertFalseWithBoolean_([((ComGoogleGsonReflectTypeToken *) nil_chk(ComGoogleGsonReflectTypeToken_getWithJavaLangReflectType_(b))) isAssignableFromWithJavaLangReflectType:a]);
}

- (void)testIsAssignableFromWithBasicWildcards {
  id<JavaLangReflectType> a = [((JavaLangReflectField *) nil_chk([[self java_getClass] getDeclaredField:@"listOfString"])) getGenericType];
  id<JavaLangReflectType> b = [((JavaLangReflectField *) nil_chk([[self java_getClass] getDeclaredField:@"listOfUnknown"])) getGenericType];
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonReflectTypeToken *) nil_chk(ComGoogleGsonReflectTypeToken_getWithJavaLangReflectType_(a))) isAssignableFromWithJavaLangReflectType:a]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonReflectTypeToken *) nil_chk(ComGoogleGsonReflectTypeToken_getWithJavaLangReflectType_(b))) isAssignableFromWithJavaLangReflectType:b]);
  JunitFrameworkTestCase_assertFalseWithBoolean_([((ComGoogleGsonReflectTypeToken *) nil_chk(ComGoogleGsonReflectTypeToken_getWithJavaLangReflectType_(a))) isAssignableFromWithJavaLangReflectType:b]);
  JreStrongAssign(&listOfUnknown_, listOfString_);
}

- (void)testIsAssignableFromWithNestedWildcards {
  id<JavaLangReflectType> a = [((JavaLangReflectField *) nil_chk([[self java_getClass] getDeclaredField:@"listOfSetOfString"])) getGenericType];
  id<JavaLangReflectType> b = [((JavaLangReflectField *) nil_chk([[self java_getClass] getDeclaredField:@"listOfSetOfUnknown"])) getGenericType];
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonReflectTypeToken *) nil_chk(ComGoogleGsonReflectTypeToken_getWithJavaLangReflectType_(a))) isAssignableFromWithJavaLangReflectType:a]);
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonReflectTypeToken *) nil_chk(ComGoogleGsonReflectTypeToken_getWithJavaLangReflectType_(b))) isAssignableFromWithJavaLangReflectType:b]);
  JunitFrameworkTestCase_assertFalseWithBoolean_([((ComGoogleGsonReflectTypeToken *) nil_chk(ComGoogleGsonReflectTypeToken_getWithJavaLangReflectType_(a))) isAssignableFromWithJavaLangReflectType:b]);
  JunitFrameworkTestCase_assertFalseWithBoolean_([((ComGoogleGsonReflectTypeToken *) nil_chk(ComGoogleGsonReflectTypeToken_getWithJavaLangReflectType_(b))) isAssignableFromWithJavaLangReflectType:a]);
}

- (void)dealloc {
  RELEASE_(listOfInteger_);
  RELEASE_(listOfNumber_);
  RELEASE_(listOfString_);
  RELEASE_(listOfUnknown_);
  RELEASE_(listOfSetOfString_);
  RELEASE_(listOfSetOfUnknown_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(testIsAssignableFromRawTypes);
  methods[2].selector = @selector(testIsAssignableFromWithTypeParameters);
  methods[3].selector = @selector(testIsAssignableFromWithBasicWildcards);
  methods[4].selector = @selector(testIsAssignableFromWithNestedWildcards);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "listOfInteger_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 1, -1 },
    { "listOfNumber_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 2, -1 },
    { "listOfString_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 3, -1 },
    { "listOfUnknown_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 4, -1 },
    { "listOfSetOfString_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 5, -1 },
    { "listOfSetOfUnknown_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "Ljava/util/List<Ljava/lang/Integer;>;", "Ljava/util/List<Ljava/lang/Number;>;", "Ljava/util/List<Ljava/lang/String;>;", "Ljava/util/List<*>;", "Ljava/util/List<Ljava/util/Set<Ljava/lang/String;>;>;", "Ljava/util/List<Ljava/util/Set<*>;>;" };
  static const J2ObjcClassInfo _ComGoogleGsonReflectTypeTokenTest = { "TypeTokenTest", "com.google.gson.reflect", ptrTable, methods, fields, 7, 0x11, 5, 6, -1, -1, -1, -1, -1 };
  return &_ComGoogleGsonReflectTypeTokenTest;
}

@end

void ComGoogleGsonReflectTypeTokenTest_init(ComGoogleGsonReflectTypeTokenTest *self) {
  JunitFrameworkTestCase_init(self);
  JreStrongAssign(&self->listOfInteger_, nil);
  JreStrongAssign(&self->listOfNumber_, nil);
  JreStrongAssign(&self->listOfString_, nil);
  JreStrongAssign(&self->listOfUnknown_, nil);
  JreStrongAssign(&self->listOfSetOfString_, nil);
  JreStrongAssign(&self->listOfSetOfUnknown_, nil);
}

ComGoogleGsonReflectTypeTokenTest *new_ComGoogleGsonReflectTypeTokenTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonReflectTypeTokenTest, init)
}

ComGoogleGsonReflectTypeTokenTest *create_ComGoogleGsonReflectTypeTokenTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonReflectTypeTokenTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonReflectTypeTokenTest)
