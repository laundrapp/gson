//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/gson/stream/JsonReader.h"
#include "com/google/gson/stream/JsonReaderTest.h"
#include "com/google/gson/stream/JsonToken.h"
#include "com/google/gson/stream/MalformedJsonException.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/util/Arrays.h"
#include "junit/framework/TestCase.h"

@interface ComGoogleGsonStreamJsonReaderTest ()

- (void)assertNotANumberWithNSString:(NSString *)s;

- (void)testFailWithPositionWithNSString:(NSString *)message
                            withNSString:(NSString *)json;

- (NSString *)repeatWithChar:(jchar)c
                     withInt:(jint)count;

- (void)assertDocumentWithNSString:(NSString *)document
                 withNSObjectArray:(IOSObjectArray *)expectations;

/*!
 @brief Returns a reader that returns one character at a time.
 */
- (JavaIoReader *)readerWithNSString:(NSString *)s;

@end

__attribute__((unused)) static void ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(ComGoogleGsonStreamJsonReaderTest *self, NSString *s);

__attribute__((unused)) static void ComGoogleGsonStreamJsonReaderTest_testFailWithPositionWithNSString_withNSString_(ComGoogleGsonStreamJsonReaderTest *self, NSString *message, NSString *json);

__attribute__((unused)) static NSString *ComGoogleGsonStreamJsonReaderTest_repeatWithChar_withInt_(ComGoogleGsonStreamJsonReaderTest *self, jchar c, jint count);

__attribute__((unused)) static void ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(ComGoogleGsonStreamJsonReaderTest *self, NSString *document, IOSObjectArray *expectations);

__attribute__((unused)) static JavaIoReader *ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(ComGoogleGsonStreamJsonReaderTest *self, NSString *s);

@implementation ComGoogleGsonStreamJsonReaderTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonStreamJsonReaderTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)testReadArray {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[true, true]"));
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  [reader endArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testReadEmptyArray {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[]"));
  [reader beginArray];
  JunitFrameworkTestCase_assertFalseWithBoolean_([reader hasNext]);
  [reader endArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testReadObject {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\": \"android\", \"b\": \"banana\"}"));
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"android", [reader nextString]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"b", [reader nextName]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"banana", [reader nextString]);
  [reader endObject];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testReadEmptyObject {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{}"));
  [reader beginObject];
  JunitFrameworkTestCase_assertFalseWithBoolean_([reader hasNext]);
  [reader endObject];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testSkipArray {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}"));
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  [reader skipValue];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"b", [reader nextName]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(123, [reader nextInt]);
  [reader endObject];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testSkipArrayAfterPeek {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}"));
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_ARRAY), [reader peek]);
  [reader skipValue];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"b", [reader nextName]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(123, [reader nextInt]);
  [reader endObject];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testSkipTopLevelObject {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}"));
  [reader skipValue];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testSkipObject {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\": { \"c\": [], \"d\": [true, true, {}] }, \"b\": \"banana\"}"));
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  [reader skipValue];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"b", [reader nextName]);
  [reader skipValue];
  [reader endObject];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testSkipObjectAfterPeek {
  NSString *json = @"{  \"one\": { \"num\": 1 }, \"two\": { \"num\": 2 }, \"three\": { \"num\": 3 }}";
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, json));
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"one", [reader nextName]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), [reader peek]);
  [reader skipValue];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"two", [reader nextName]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), [reader peek]);
  [reader skipValue];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"three", [reader nextName]);
  [reader skipValue];
  [reader endObject];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testSkipInteger {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\":123456789,\"b\":-123456789}"));
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  [reader skipValue];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"b", [reader nextName]);
  [reader skipValue];
  [reader endObject];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testSkipDouble {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\":-123.456e-789,\"b\":123456789.0}"));
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  [reader skipValue];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"b", [reader nextName]);
  [reader skipValue];
  [reader endObject];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testHelloWorld {
  NSString *json = @"{\n   \"hello\": true,\n   \"foo\": [\"world\"]\n}";
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, json));
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"hello", [reader nextName]);
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"foo", [reader nextName]);
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"world", [reader nextString]);
  [reader endArray];
  [reader endObject];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testNulls {
  @try {
    create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(nil);
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangNullPointerException *expected) {
  }
}

- (void)testEmptyString {
  @try {
    [create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"")) beginArray];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
  @try {
    [create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"")) beginObject];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testNoTopLevelObject {
  @try {
    [create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"true")) nextBoolean];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testCharacterUnescaping {
  NSString *json = @"[\"a\",\"a\\\"\",\"\\\"\",\":\",\",\",\"\\b\",\"\\f\",\"\\n\",\"\\r\",\"\\t\",\" \",\"\\\\\",\"{\",\"}\",\"[\",\"]\",\"\\u0000\",\"\\u0019\",\"\\u20AC\"]";
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, json));
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextString]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a\"", [reader nextString]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\"", [reader nextString]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@":", [reader nextString]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@",", [reader nextString]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\x08", [reader nextString]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\x0c", [reader nextString]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\n", [reader nextString]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\x0d", [reader nextString]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\t", [reader nextString]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@" ", [reader nextString]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\\", [reader nextString]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"{", [reader nextString]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"}", [reader nextString]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[", [reader nextString]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"]", [reader nextString]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\x00", [reader nextString]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\x19", [reader nextString]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"\u20ac", [reader nextString]);
  [reader endArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testUnescapingInvalidCharacters {
  NSString *json = @"[\"\\u000g\"]";
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, json));
  [reader beginArray];
  @try {
    [reader nextString];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangNumberFormatException *expected) {
  }
}

- (void)testUnescapingTruncatedCharacters {
  NSString *json = @"[\"\\u000";
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, json));
  [reader beginArray];
  @try {
    [reader nextString];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testUnescapingTruncatedSequence {
  NSString *json = @"[\"\\";
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, json));
  [reader beginArray];
  @try {
    [reader nextString];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testIntegersWithFractionalPartSpecified {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[1.0,1.0,1.0]"));
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(1.0), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(1, [reader nextInt]);
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(1LL, [reader nextLong]);
}

- (void)testDoubles {
  NSString *json = @"[-0.0,1.0,1.7976931348623157E308,4.9E-324,0.0,-0.5,2.2250738585072014E-308,3.141592653589793,2.718281828459045]";
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, json));
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(-0.0), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(1.0), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(1.7976931348623157E308), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(4.9E-324), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(0.0), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(-0.5), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(2.2250738585072014E-308), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(3.141592653589793), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(2.718281828459045), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  [reader endArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testStrictNonFiniteDoubles {
  NSString *json = @"[NaN]";
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, json));
  [reader beginArray];
  @try {
    [reader nextDouble];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonStreamMalformedJsonException *expected) {
  }
}

- (void)testStrictQuotedNonFiniteDoubles {
  NSString *json = @"[\"NaN\"]";
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, json));
  [reader beginArray];
  @try {
    [reader nextDouble];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonStreamMalformedJsonException *expected) {
  }
}

- (void)testLenientNonFiniteDoubles {
  NSString *json = @"[NaN, -Infinity, Infinity]";
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, json));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertTrueWithBoolean_(JavaLangDouble_isNaNWithDouble_([reader nextDouble]));
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(JavaLangDouble_NEGATIVE_INFINITY), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(JavaLangDouble_POSITIVE_INFINITY), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  [reader endArray];
}

- (void)testLenientQuotedNonFiniteDoubles {
  NSString *json = @"[\"NaN\", \"-Infinity\", \"Infinity\"]";
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, json));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertTrueWithBoolean_(JavaLangDouble_isNaNWithDouble_([reader nextDouble]));
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(JavaLangDouble_NEGATIVE_INFINITY), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(JavaLangDouble_POSITIVE_INFINITY), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  [reader endArray];
}

- (void)testStrictNonFiniteDoublesWithSkipValue {
  NSString *json = @"[NaN]";
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, json));
  [reader beginArray];
  @try {
    [reader skipValue];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonStreamMalformedJsonException *expected) {
  }
}

- (void)testLongs {
  NSString *json = @"[0,0,0,1,1,1,-1,-1,-1,-9223372036854775808,9223372036854775807]";
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, json));
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(0LL, [reader nextLong]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(0, [reader nextInt]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(0.0), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(1LL, [reader nextLong]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(1, [reader nextInt]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(1.0), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(-1LL, [reader nextLong]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(-1, [reader nextInt]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(-1.0), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  @try {
    [reader nextInt];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangNumberFormatException *expected) {
  }
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(JavaLangLong_MIN_VALUE, [reader nextLong]);
  @try {
    [reader nextInt];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangNumberFormatException *expected) {
  }
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(JavaLangLong_MAX_VALUE, [reader nextLong]);
  [reader endArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)disabled_testNumberWithOctalPrefix {
  NSString *json = @"[01]";
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, json));
  [reader beginArray];
  @try {
    [reader peek];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonStreamMalformedJsonException *expected) {
  }
  @try {
    [reader nextInt];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonStreamMalformedJsonException *expected) {
  }
  @try {
    [reader nextLong];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonStreamMalformedJsonException *expected) {
  }
  @try {
    [reader nextDouble];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonStreamMalformedJsonException *expected) {
  }
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"01", [reader nextString]);
  [reader endArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testBooleans {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[true,false]"));
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(false, [reader nextBoolean]);
  [reader endArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testPeekingUnquotedStringsPrefixedWithBooleans {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[truey]"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING), [reader peek]);
  @try {
    [reader nextBoolean];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"truey", [reader nextString]);
  [reader endArray];
}

- (void)testMalformedNumbers {
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @"-");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @".");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @"e");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @"0e");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @".e");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @"0.e");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @"-.0e");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @"e1");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @".e1");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @"-e1");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @"1x");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @"1.1x");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @"1e1x");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @"1ex");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @"1.1ex");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @"1.1e1x");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @"0.");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @"-0.");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @"0.e1");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @"-0.e1");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @".0");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @"-.0");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @".0e1");
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, @"-.0e1");
}

- (void)assertNotANumberWithNSString:(NSString *)s {
  ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(self, s);
}

- (void)testPeekingUnquotedStringsPrefixedWithIntegers {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[12.34e5x]"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING), [reader peek]);
  @try {
    [reader nextInt];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"12.34e5x", [reader nextString]);
}

- (void)testPeekLongMinValue {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[-9223372036854775808]"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER), [reader peek]);
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(-0x7fffffffffffffffLL - 1, [reader nextLong]);
}

- (void)testPeekLongMaxValue {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[9223372036854775807]"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER), [reader peek]);
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(9223372036854775807LL, [reader nextLong]);
}

- (void)testLongLargerThanMaxLongThatWrapsAround {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[22233720368547758070]"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER), [reader peek]);
  @try {
    [reader nextLong];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangNumberFormatException *expected) {
  }
}

- (void)testLongLargerThanMinLongThatWrapsAround {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[-22233720368547758070]"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER), [reader peek]);
  @try {
    [reader nextLong];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangNumberFormatException *expected) {
  }
}

- (void)disabled_testPeekLargerThanLongMaxValue {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[9223372036854775808]"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER), [reader peek]);
  @try {
    [reader nextLong];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangNumberFormatException *e) {
  }
}

- (void)disabled_testPeekLargerThanLongMinValue {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[-9223372036854775809]"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER), [reader peek]);
  @try {
    [reader nextLong];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangNumberFormatException *expected) {
  }
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(-9223372036854775809.0), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
}

- (void)disabled_testHighPrecisionLong {
  NSString *json = @"[9223372036854775806.000]";
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, json));
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithLong_withLong_(9223372036854775806LL, [reader nextLong]);
  [reader endArray];
}

- (void)testPeekMuchLargerThanLongMinValue {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[-92233720368547758080]"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER), [reader peek]);
  @try {
    [reader nextLong];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangNumberFormatException *expected) {
  }
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(-92233720368547758080.0), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
}

- (void)testQuotedNumberWithEscape {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[\"1234\"]"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING), [reader peek]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(1234, [reader nextInt]);
}

- (void)testMixedCaseLiterals {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[True,TruE,False,FALSE,NULL,nulL]"));
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(false, [reader nextBoolean]);
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(false, [reader nextBoolean]);
  [reader nextNull];
  [reader nextNull];
  [reader endArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testMissingValue {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\":}"));
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  @try {
    [reader nextString];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testPrematureEndOfInput {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\":true,"));
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  @try {
    [reader nextName];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testPrematurelyClosed {
  @try {
    ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\":[]}"));
    [reader beginObject];
    [reader close];
    [reader nextName];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\":[]}"));
    [reader close];
    [reader beginObject];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\":true}"));
    [reader beginObject];
    [reader nextName];
    [reader peek];
    [reader close];
    [reader nextBoolean];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
}

- (void)testNextFailuresDoNotAdvance {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\":true}"));
  [reader beginObject];
  @try {
    [reader nextString];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  @try {
    [reader nextName];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    [reader beginArray];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    [reader endArray];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    [reader beginObject];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    [reader endObject];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  @try {
    [reader nextString];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    [reader nextName];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    [reader beginArray];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    [reader endArray];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  [reader endObject];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
  [reader close];
}

- (void)testIntegerMismatchFailuresDoNotAdvance {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[1.5]"));
  [reader beginArray];
  @try {
    [reader nextInt];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangNumberFormatException *expected) {
  }
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(1.5), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  [reader endArray];
}

- (void)testStringNullIsNotNull {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[\"null\"]"));
  [reader beginArray];
  @try {
    [reader nextNull];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
}

- (void)testNullLiteralIsNotAString {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[null]"));
  [reader beginArray];
  @try {
    [reader nextString];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
}

- (void)testStrictNameValueSeparator {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\"=true}"));
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  @try {
    [reader nextBoolean];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
  reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\"=>true}"));
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  @try {
    [reader nextBoolean];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testLenientNameValueSeparator {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\"=true}"));
  [reader setLenientWithBoolean:true];
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\"=>true}"));
  [reader setLenientWithBoolean:true];
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
}

- (void)testStrictNameValueSeparatorWithSkipValue {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\"=true}"));
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  @try {
    [reader skipValue];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
  reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\"=>true}"));
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  @try {
    [reader skipValue];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testCommentsInStringValue {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[\"// comment\"]"));
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"// comment", [reader nextString]);
  [reader endArray];
  reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\":\"#someComment\"}"));
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"#someComment", [reader nextString]);
  [reader endObject];
  reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"#//a\":\"#some //Comment\"}"));
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"#//a", [reader nextName]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"#some //Comment", [reader nextString]);
  [reader endObject];
}

- (void)testStrictComments {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[// comment \n true]"));
  [reader beginArray];
  @try {
    [reader nextBoolean];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
  reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[# comment \n true]"));
  [reader beginArray];
  @try {
    [reader nextBoolean];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
  reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[/* comment */ true]"));
  [reader beginArray];
  @try {
    [reader nextBoolean];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testLenientComments {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[// comment \n true]"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[# comment \n true]"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[/* comment */ true]"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
}

- (void)testStrictCommentsWithSkipValue {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[// comment \n true]"));
  [reader beginArray];
  @try {
    [reader skipValue];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
  reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[# comment \n true]"));
  [reader beginArray];
  @try {
    [reader skipValue];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
  reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[/* comment */ true]"));
  [reader beginArray];
  @try {
    [reader skipValue];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testStrictUnquotedNames {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{a:true}"));
  [reader beginObject];
  @try {
    [reader nextName];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testLenientUnquotedNames {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{a:true}"));
  [reader setLenientWithBoolean:true];
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
}

- (void)testStrictUnquotedNamesWithSkipValue {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{a:true}"));
  [reader beginObject];
  @try {
    [reader skipValue];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testStrictSingleQuotedNames {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{'a':true}"));
  [reader beginObject];
  @try {
    [reader nextName];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testLenientSingleQuotedNames {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{'a':true}"));
  [reader setLenientWithBoolean:true];
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
}

- (void)testStrictSingleQuotedNamesWithSkipValue {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{'a':true}"));
  [reader beginObject];
  @try {
    [reader skipValue];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testStrictUnquotedStrings {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[a]"));
  [reader beginArray];
  @try {
    [reader nextString];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonStreamMalformedJsonException *expected) {
  }
}

- (void)testStrictUnquotedStringsWithSkipValue {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[a]"));
  [reader beginArray];
  @try {
    [reader skipValue];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonStreamMalformedJsonException *expected) {
  }
}

- (void)testLenientUnquotedStrings {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[a]"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextString]);
}

- (void)testStrictSingleQuotedStrings {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"['a']"));
  [reader beginArray];
  @try {
    [reader nextString];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testLenientSingleQuotedStrings {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"['a']"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextString]);
}

- (void)testStrictSingleQuotedStringsWithSkipValue {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"['a']"));
  [reader beginArray];
  @try {
    [reader skipValue];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testStrictSemicolonDelimitedArray {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[true;true]"));
  [reader beginArray];
  @try {
    [reader nextBoolean];
    [reader nextBoolean];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testLenientSemicolonDelimitedArray {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[true;true]"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
}

- (void)testStrictSemicolonDelimitedArrayWithSkipValue {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[true;true]"));
  [reader beginArray];
  @try {
    [reader skipValue];
    [reader skipValue];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testStrictSemicolonDelimitedNameValuePair {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\":true;\"b\":true}"));
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  @try {
    [reader nextBoolean];
    [reader nextName];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testLenientSemicolonDelimitedNameValuePair {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\":true;\"b\":true}"));
  [reader setLenientWithBoolean:true];
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"b", [reader nextName]);
}

- (void)testStrictSemicolonDelimitedNameValuePairWithSkipValue {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\":true;\"b\":true}"));
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  @try {
    [reader skipValue];
    [reader skipValue];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testStrictUnnecessaryArraySeparators {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[true,,true]"));
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  @try {
    [reader nextNull];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
  reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[,true]"));
  [reader beginArray];
  @try {
    [reader nextNull];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
  reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[true,]"));
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  @try {
    [reader nextNull];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
  reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[,]"));
  [reader beginArray];
  @try {
    [reader nextNull];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testLenientUnnecessaryArraySeparators {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[true,,true]"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  [reader nextNull];
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  [reader endArray];
  reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[,true]"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  [reader nextNull];
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  [reader endArray];
  reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[true,]"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  [reader nextNull];
  [reader endArray];
  reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[,]"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  [reader nextNull];
  [reader nextNull];
  [reader endArray];
}

- (void)testStrictUnnecessaryArraySeparatorsWithSkipValue {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[true,,true]"));
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  @try {
    [reader skipValue];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
  reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[,true]"));
  [reader beginArray];
  @try {
    [reader skipValue];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
  reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[true,]"));
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  @try {
    [reader skipValue];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
  reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[,]"));
  [reader beginArray];
  @try {
    [reader skipValue];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testStrictMultipleTopLevelValues {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[] []"));
  [reader beginArray];
  [reader endArray];
  @try {
    [reader peek];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testLenientMultipleTopLevelValues {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[] true {}"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  [reader endArray];
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  [reader beginObject];
  [reader endObject];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testStrictMultipleTopLevelValuesWithSkipValue {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[] []"));
  [reader beginArray];
  [reader endArray];
  @try {
    [reader skipValue];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testStrictTopLevelString {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"\"a\""));
  @try {
    [reader nextString];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testLenientTopLevelString {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"\"a\""));
  [reader setLenientWithBoolean:true];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextString]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testStrictTopLevelValueType {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"true"));
  @try {
    [reader nextBoolean];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testLenientTopLevelValueType {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"true"));
  [reader setLenientWithBoolean:true];
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
}

- (void)testStrictTopLevelValueTypeWithSkipValue {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"true"));
  @try {
    [reader skipValue];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testStrictNonExecutePrefix {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @")]}'\n []"));
  @try {
    [reader beginArray];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testStrictNonExecutePrefixWithSkipValue {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @")]}'\n []"));
  @try {
    [reader skipValue];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testLenientNonExecutePrefix {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @")]}'\n []"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  [reader endArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testLenientNonExecutePrefixWithLeadingWhitespace {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"\x0d\n \t)]}'\n []"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  [reader endArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testLenientPartialNonExecutePrefix {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @")]}' []"));
  [reader setLenientWithBoolean:true];
  @try {
    JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@")", [reader nextString]);
    [reader nextString];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testBomIgnoredAsFirstCharacterOfDocument {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"\ufeff[]"));
  [reader beginArray];
  [reader endArray];
}

- (void)testBomForbiddenAsOtherCharacterInDocument {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[\ufeff]"));
  [reader beginArray];
  @try {
    [reader endArray];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testFailWithPosition {
  ComGoogleGsonStreamJsonReaderTest_testFailWithPositionWithNSString_withNSString_(self, @"Expected value at line 6 column 5 path $[1]", @"[\n\n\n\n\n\"a\",}]");
}

- (void)testFailWithPositionGreaterThanBufferSize {
  NSString *spaces = ComGoogleGsonStreamJsonReaderTest_repeatWithChar_withInt_(self, ' ', 8192);
  ComGoogleGsonStreamJsonReaderTest_testFailWithPositionWithNSString_withNSString_(self, @"Expected value at line 6 column 5 path $[1]", JreStrcat("$$$", @"[\n\n", spaces, @"\n\n\n\"a\",}]"));
}

- (void)testFailWithPositionOverSlashSlashEndOfLineComment {
  ComGoogleGsonStreamJsonReaderTest_testFailWithPositionWithNSString_withNSString_(self, @"Expected value at line 5 column 6 path $[1]", @"\n// foo\n\n//bar\x0d\n[\"a\",}");
}

- (void)testFailWithPositionOverHashEndOfLineComment {
  ComGoogleGsonStreamJsonReaderTest_testFailWithPositionWithNSString_withNSString_(self, @"Expected value at line 5 column 6 path $[1]", @"\n# foo\n\n#bar\x0d\n[\"a\",}");
}

- (void)testFailWithPositionOverCStyleComment {
  ComGoogleGsonStreamJsonReaderTest_testFailWithPositionWithNSString_withNSString_(self, @"Expected value at line 6 column 12 path $[1]", @"\n\n/* foo\n*\n*\x0d\nbar */[\"a\",}");
}

- (void)testFailWithPositionOverQuotedString {
  ComGoogleGsonStreamJsonReaderTest_testFailWithPositionWithNSString_withNSString_(self, @"Expected value at line 5 column 3 path $[1]", @"[\"foo\nbar\x0d\nbaz\n\",\n  }");
}

- (void)testFailWithPositionOverUnquotedString {
  ComGoogleGsonStreamJsonReaderTest_testFailWithPositionWithNSString_withNSString_(self, @"Expected value at line 5 column 2 path $[1]", @"[\n\nabcd\n\n,}");
}

- (void)testFailWithEscapedNewlineCharacter {
  ComGoogleGsonStreamJsonReaderTest_testFailWithPositionWithNSString_withNSString_(self, @"Expected value at line 5 column 3 path $[1]", @"[\n\n\"\\\n\n\",}");
}

- (void)testFailWithPositionIsOffsetByBom {
  ComGoogleGsonStreamJsonReaderTest_testFailWithPositionWithNSString_withNSString_(self, @"Expected value at line 1 column 6 path $[1]", @"\ufeff[\"a\",}]");
}

- (void)testFailWithPositionWithNSString:(NSString *)message
                            withNSString:(NSString *)json {
  ComGoogleGsonStreamJsonReaderTest_testFailWithPositionWithNSString_withNSString_(self, message, json);
}

- (void)testFailWithPositionDeepPath {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[1,{\"a\":[2,3,}"));
  [reader beginArray];
  [reader nextInt];
  [reader beginObject];
  [reader nextName];
  [reader beginArray];
  [reader nextInt];
  [reader nextInt];
  @try {
    [reader peek];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
    JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"Expected value at line 1 column 14 path $[1].a[2]", [expected getMessage]);
  }
}

- (void)testStrictVeryLongNumber {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, JreStrcat("$$C", @"[0.", ComGoogleGsonStreamJsonReaderTest_repeatWithChar_withInt_(self, '9', 8192), ']')));
  [reader beginArray];
  @try {
    JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(1.0), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonStreamMalformedJsonException *expected) {
  }
}

- (void)testLenientVeryLongNumber {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, JreStrcat("$$C", @"[0.", ComGoogleGsonStreamJsonReaderTest_repeatWithChar_withInt_(self, '9', 8192), ']')));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING), [reader peek]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JavaLangDouble_valueOfWithDouble_(1.0), JavaLangDouble_valueOfWithDouble_([reader nextDouble]));
  [reader endArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testVeryLongUnquotedLiteral {
  NSString *literal = JreStrcat("C$C", 'a', ComGoogleGsonStreamJsonReaderTest_repeatWithChar_withInt_(self, 'b', 8192), 'c');
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, JreStrcat("C$C", '[', literal, ']')));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(literal, [reader nextString]);
  [reader endArray];
}

- (void)testDeeplyNestedArrays {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]"));
  for (jint i = 0; i < 40; i++) {
    [reader beginArray];
  }
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"$[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]", [reader getPath]);
  for (jint i = 0; i < 40; i++) {
    [reader endArray];
  }
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testDeeplyNestedObjects {
  NSString *array = @"{\"a\":%s}";
  NSString *json = @"true";
  for (jint i = 0; i < 40; i++) {
    json = NSString_java_formatWithNSString_withNSObjectArray_(array, [IOSObjectArray arrayWithObjects:(id[]){ json } count:1 type:NSObject_class_()]);
  }
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, json));
  for (jint i = 0; i < 40; i++) {
    [reader beginObject];
    JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  }
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"$.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a", [reader getPath]);
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  for (jint i = 0; i < 40; i++) {
    [reader endObject];
  }
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testStringEndingInSlash {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"/"));
  [reader setLenientWithBoolean:true];
  @try {
    [reader peek];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonStreamMalformedJsonException *expected) {
  }
}

- (void)testDocumentWithCommentEndingInSlash {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"/* foo *//"));
  [reader setLenientWithBoolean:true];
  @try {
    [reader peek];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonStreamMalformedJsonException *expected) {
  }
}

- (void)testStringWithLeadingSlash {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"/x"));
  [reader setLenientWithBoolean:true];
  @try {
    [reader peek];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonStreamMalformedJsonException *expected) {
  }
}

- (void)testUnterminatedObject {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\":\"android\"x"));
  [reader setLenientWithBoolean:true];
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"android", [reader nextString]);
  @try {
    [reader peek];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonStreamMalformedJsonException *expected) {
  }
}

- (void)testVeryLongQuotedString {
  IOSCharArray *stringChars = [IOSCharArray arrayWithLength:1024 * 16];
  JavaUtilArrays_fillWithCharArray_withChar_(stringChars, 'x');
  NSString *string = [NSString java_stringWithCharacters:stringChars];
  NSString *json = JreStrcat("$$$", @"[\"", string, @"\"]");
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, json));
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(string, [reader nextString]);
  [reader endArray];
}

- (void)testVeryLongUnquotedString {
  IOSCharArray *stringChars = [IOSCharArray arrayWithLength:1024 * 16];
  JavaUtilArrays_fillWithCharArray_withChar_(stringChars, 'x');
  NSString *string = [NSString java_stringWithCharacters:stringChars];
  NSString *json = JreStrcat("C$C", '[', string, ']');
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, json));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(string, [reader nextString]);
  [reader endArray];
}

- (void)testVeryLongUnterminatedString {
  IOSCharArray *stringChars = [IOSCharArray arrayWithLength:1024 * 16];
  JavaUtilArrays_fillWithCharArray_withChar_(stringChars, 'x');
  NSString *string = [NSString java_stringWithCharacters:stringChars];
  NSString *json = JreStrcat("C$", '[', string);
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, json));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(string, [reader nextString]);
  @try {
    [reader peek];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoEOFException *expected) {
  }
}

- (void)testSkipVeryLongUnquotedString {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, JreStrcat("C$C", '[', ComGoogleGsonStreamJsonReaderTest_repeatWithChar_withInt_(self, 'x', 8192), ']')));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  [reader skipValue];
  [reader endArray];
}

- (void)testSkipTopLevelUnquotedString {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, ComGoogleGsonStreamJsonReaderTest_repeatWithChar_withInt_(self, 'x', 8192)));
  [reader setLenientWithBoolean:true];
  [reader skipValue];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testSkipVeryLongQuotedString {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, JreStrcat("$$$", @"[\"", ComGoogleGsonStreamJsonReaderTest_repeatWithChar_withInt_(self, 'x', 8192), @"\"]")));
  [reader beginArray];
  [reader skipValue];
  [reader endArray];
}

- (void)testSkipTopLevelQuotedString {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, JreStrcat("C$C", '"', ComGoogleGsonStreamJsonReaderTest_repeatWithChar_withInt_(self, 'x', 8192), '"')));
  [reader setLenientWithBoolean:true];
  [reader skipValue];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testStringAsNumberWithTruncatedExponent {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[123e]"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING), [reader peek]);
}

- (void)testStringAsNumberWithDigitAndNonDigitExponent {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[123e4b]"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING), [reader peek]);
}

- (void)testStringAsNumberWithNonDigitExponent {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[123eb]"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING), [reader peek]);
}

- (void)testEmptyStringName {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"\":true}"));
  [reader setLenientWithBoolean:true];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), [reader peek]);
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), [reader peek]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"", [reader nextName]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, BOOLEAN), [reader peek]);
  JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(true, [reader nextBoolean]);
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_OBJECT), [reader peek]);
  [reader endObject];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT), [reader peek]);
}

- (void)testStrictExtraCommasInMaps {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\":\"b\",}"));
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"b", [reader nextString]);
  @try {
    [reader peek];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (void)testLenientExtraCommasInMaps {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"{\"a\":\"b\",}"));
  [reader setLenientWithBoolean:true];
  [reader beginObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [reader nextName]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"b", [reader nextString]);
  @try {
    [reader peek];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
  }
}

- (NSString *)repeatWithChar:(jchar)c
                     withInt:(jint)count {
  return ComGoogleGsonStreamJsonReaderTest_repeatWithChar_withInt_(self, c, count);
}

- (void)testMalformedDocuments {
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{]", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JavaIoIOException_class_() } count:2 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{,", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JavaIoIOException_class_() } count:2 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{{", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JavaIoIOException_class_() } count:2 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{[", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JavaIoIOException_class_() } count:2 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{:", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JavaIoIOException_class_() } count:2 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{\"name\",", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JavaIoIOException_class_() } count:3 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{\"name\",", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JavaIoIOException_class_() } count:3 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{\"name\":}", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JavaIoIOException_class_() } count:3 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{\"name\"::", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JavaIoIOException_class_() } count:3 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{\"name\":,", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JavaIoIOException_class_() } count:3 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{\"name\"=}", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JavaIoIOException_class_() } count:3 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{\"name\"=>}", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JavaIoIOException_class_() } count:3 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{\"name\"=>\"string\":", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING), JavaIoIOException_class_() } count:4 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{\"name\"=>\"string\"=", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING), JavaIoIOException_class_() } count:4 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{\"name\"=>\"string\"=>", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING), JavaIoIOException_class_() } count:4 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{\"name\"=>\"string\",", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING), JavaIoIOException_class_() } count:4 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{\"name\"=>\"string\",\"name\"", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME) } count:4 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"[}", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_ARRAY), JavaIoIOException_class_() } count:2 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"[,]", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_ARRAY), JreLoadEnum(ComGoogleGsonStreamJsonToken, NULL), JreLoadEnum(ComGoogleGsonStreamJsonToken, NULL), JreLoadEnum(ComGoogleGsonStreamJsonToken, END_ARRAY) } count:4 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JavaIoIOException_class_() } count:2 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{\"name\"", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JavaIoIOException_class_() } count:3 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{\"name\",", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JavaIoIOException_class_() } count:3 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{'name'", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JavaIoIOException_class_() } count:3 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{'name',", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JavaIoIOException_class_() } count:3 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{name", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JavaIoIOException_class_() } count:3 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"[", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_ARRAY), JavaIoIOException_class_() } count:2 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"[string", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_ARRAY), JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING), JavaIoIOException_class_() } count:3 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"[\"string\"", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_ARRAY), JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING), JavaIoIOException_class_() } count:3 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"['string'", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_ARRAY), JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING), JavaIoIOException_class_() } count:3 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"[123", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_ARRAY), JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER), JavaIoIOException_class_() } count:3 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"[123,", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_ARRAY), JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER), JavaIoIOException_class_() } count:3 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{\"name\":123", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER), JavaIoIOException_class_() } count:4 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{\"name\":123,", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER), JavaIoIOException_class_() } count:4 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{\"name\":\"string\"", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING), JavaIoIOException_class_() } count:4 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{\"name\":\"string\",", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING), JavaIoIOException_class_() } count:4 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{\"name\":'string'", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING), JavaIoIOException_class_() } count:4 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{\"name\":'string',", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING), JavaIoIOException_class_() } count:4 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{\"name\":false", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JreLoadEnum(ComGoogleGsonStreamJsonToken, BOOLEAN), JavaIoIOException_class_() } count:4 type:NSObject_class_()]);
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, @"{\"name\":false,,", [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT), JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME), JreLoadEnum(ComGoogleGsonStreamJsonToken, BOOLEAN), JavaIoIOException_class_() } count:4 type:NSObject_class_()]);
}

- (void)testUnterminatedStringFailure {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, @"[\"string"));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING), [reader peek]);
  @try {
    [reader nextString];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonStreamMalformedJsonException *expected) {
  }
}

- (void)assertDocumentWithNSString:(NSString *)document
                 withNSObjectArray:(IOSObjectArray *)expectations {
  ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(self, document, expectations);
}

- (JavaIoReader *)readerWithNSString:(NSString *)s {
  return ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, s);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x82, 8, 9, 0, -1, -1, -1 },
    { NULL, "LJavaIoReader;", 0x2, 10, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(testReadArray);
  methods[2].selector = @selector(testReadEmptyArray);
  methods[3].selector = @selector(testReadObject);
  methods[4].selector = @selector(testReadEmptyObject);
  methods[5].selector = @selector(testSkipArray);
  methods[6].selector = @selector(testSkipArrayAfterPeek);
  methods[7].selector = @selector(testSkipTopLevelObject);
  methods[8].selector = @selector(testSkipObject);
  methods[9].selector = @selector(testSkipObjectAfterPeek);
  methods[10].selector = @selector(testSkipInteger);
  methods[11].selector = @selector(testSkipDouble);
  methods[12].selector = @selector(testHelloWorld);
  methods[13].selector = @selector(testNulls);
  methods[14].selector = @selector(testEmptyString);
  methods[15].selector = @selector(testNoTopLevelObject);
  methods[16].selector = @selector(testCharacterUnescaping);
  methods[17].selector = @selector(testUnescapingInvalidCharacters);
  methods[18].selector = @selector(testUnescapingTruncatedCharacters);
  methods[19].selector = @selector(testUnescapingTruncatedSequence);
  methods[20].selector = @selector(testIntegersWithFractionalPartSpecified);
  methods[21].selector = @selector(testDoubles);
  methods[22].selector = @selector(testStrictNonFiniteDoubles);
  methods[23].selector = @selector(testStrictQuotedNonFiniteDoubles);
  methods[24].selector = @selector(testLenientNonFiniteDoubles);
  methods[25].selector = @selector(testLenientQuotedNonFiniteDoubles);
  methods[26].selector = @selector(testStrictNonFiniteDoublesWithSkipValue);
  methods[27].selector = @selector(testLongs);
  methods[28].selector = @selector(disabled_testNumberWithOctalPrefix);
  methods[29].selector = @selector(testBooleans);
  methods[30].selector = @selector(testPeekingUnquotedStringsPrefixedWithBooleans);
  methods[31].selector = @selector(testMalformedNumbers);
  methods[32].selector = @selector(assertNotANumberWithNSString:);
  methods[33].selector = @selector(testPeekingUnquotedStringsPrefixedWithIntegers);
  methods[34].selector = @selector(testPeekLongMinValue);
  methods[35].selector = @selector(testPeekLongMaxValue);
  methods[36].selector = @selector(testLongLargerThanMaxLongThatWrapsAround);
  methods[37].selector = @selector(testLongLargerThanMinLongThatWrapsAround);
  methods[38].selector = @selector(disabled_testPeekLargerThanLongMaxValue);
  methods[39].selector = @selector(disabled_testPeekLargerThanLongMinValue);
  methods[40].selector = @selector(disabled_testHighPrecisionLong);
  methods[41].selector = @selector(testPeekMuchLargerThanLongMinValue);
  methods[42].selector = @selector(testQuotedNumberWithEscape);
  methods[43].selector = @selector(testMixedCaseLiterals);
  methods[44].selector = @selector(testMissingValue);
  methods[45].selector = @selector(testPrematureEndOfInput);
  methods[46].selector = @selector(testPrematurelyClosed);
  methods[47].selector = @selector(testNextFailuresDoNotAdvance);
  methods[48].selector = @selector(testIntegerMismatchFailuresDoNotAdvance);
  methods[49].selector = @selector(testStringNullIsNotNull);
  methods[50].selector = @selector(testNullLiteralIsNotAString);
  methods[51].selector = @selector(testStrictNameValueSeparator);
  methods[52].selector = @selector(testLenientNameValueSeparator);
  methods[53].selector = @selector(testStrictNameValueSeparatorWithSkipValue);
  methods[54].selector = @selector(testCommentsInStringValue);
  methods[55].selector = @selector(testStrictComments);
  methods[56].selector = @selector(testLenientComments);
  methods[57].selector = @selector(testStrictCommentsWithSkipValue);
  methods[58].selector = @selector(testStrictUnquotedNames);
  methods[59].selector = @selector(testLenientUnquotedNames);
  methods[60].selector = @selector(testStrictUnquotedNamesWithSkipValue);
  methods[61].selector = @selector(testStrictSingleQuotedNames);
  methods[62].selector = @selector(testLenientSingleQuotedNames);
  methods[63].selector = @selector(testStrictSingleQuotedNamesWithSkipValue);
  methods[64].selector = @selector(testStrictUnquotedStrings);
  methods[65].selector = @selector(testStrictUnquotedStringsWithSkipValue);
  methods[66].selector = @selector(testLenientUnquotedStrings);
  methods[67].selector = @selector(testStrictSingleQuotedStrings);
  methods[68].selector = @selector(testLenientSingleQuotedStrings);
  methods[69].selector = @selector(testStrictSingleQuotedStringsWithSkipValue);
  methods[70].selector = @selector(testStrictSemicolonDelimitedArray);
  methods[71].selector = @selector(testLenientSemicolonDelimitedArray);
  methods[72].selector = @selector(testStrictSemicolonDelimitedArrayWithSkipValue);
  methods[73].selector = @selector(testStrictSemicolonDelimitedNameValuePair);
  methods[74].selector = @selector(testLenientSemicolonDelimitedNameValuePair);
  methods[75].selector = @selector(testStrictSemicolonDelimitedNameValuePairWithSkipValue);
  methods[76].selector = @selector(testStrictUnnecessaryArraySeparators);
  methods[77].selector = @selector(testLenientUnnecessaryArraySeparators);
  methods[78].selector = @selector(testStrictUnnecessaryArraySeparatorsWithSkipValue);
  methods[79].selector = @selector(testStrictMultipleTopLevelValues);
  methods[80].selector = @selector(testLenientMultipleTopLevelValues);
  methods[81].selector = @selector(testStrictMultipleTopLevelValuesWithSkipValue);
  methods[82].selector = @selector(testStrictTopLevelString);
  methods[83].selector = @selector(testLenientTopLevelString);
  methods[84].selector = @selector(testStrictTopLevelValueType);
  methods[85].selector = @selector(testLenientTopLevelValueType);
  methods[86].selector = @selector(testStrictTopLevelValueTypeWithSkipValue);
  methods[87].selector = @selector(testStrictNonExecutePrefix);
  methods[88].selector = @selector(testStrictNonExecutePrefixWithSkipValue);
  methods[89].selector = @selector(testLenientNonExecutePrefix);
  methods[90].selector = @selector(testLenientNonExecutePrefixWithLeadingWhitespace);
  methods[91].selector = @selector(testLenientPartialNonExecutePrefix);
  methods[92].selector = @selector(testBomIgnoredAsFirstCharacterOfDocument);
  methods[93].selector = @selector(testBomForbiddenAsOtherCharacterInDocument);
  methods[94].selector = @selector(testFailWithPosition);
  methods[95].selector = @selector(testFailWithPositionGreaterThanBufferSize);
  methods[96].selector = @selector(testFailWithPositionOverSlashSlashEndOfLineComment);
  methods[97].selector = @selector(testFailWithPositionOverHashEndOfLineComment);
  methods[98].selector = @selector(testFailWithPositionOverCStyleComment);
  methods[99].selector = @selector(testFailWithPositionOverQuotedString);
  methods[100].selector = @selector(testFailWithPositionOverUnquotedString);
  methods[101].selector = @selector(testFailWithEscapedNewlineCharacter);
  methods[102].selector = @selector(testFailWithPositionIsOffsetByBom);
  methods[103].selector = @selector(testFailWithPositionWithNSString:withNSString:);
  methods[104].selector = @selector(testFailWithPositionDeepPath);
  methods[105].selector = @selector(testStrictVeryLongNumber);
  methods[106].selector = @selector(testLenientVeryLongNumber);
  methods[107].selector = @selector(testVeryLongUnquotedLiteral);
  methods[108].selector = @selector(testDeeplyNestedArrays);
  methods[109].selector = @selector(testDeeplyNestedObjects);
  methods[110].selector = @selector(testStringEndingInSlash);
  methods[111].selector = @selector(testDocumentWithCommentEndingInSlash);
  methods[112].selector = @selector(testStringWithLeadingSlash);
  methods[113].selector = @selector(testUnterminatedObject);
  methods[114].selector = @selector(testVeryLongQuotedString);
  methods[115].selector = @selector(testVeryLongUnquotedString);
  methods[116].selector = @selector(testVeryLongUnterminatedString);
  methods[117].selector = @selector(testSkipVeryLongUnquotedString);
  methods[118].selector = @selector(testSkipTopLevelUnquotedString);
  methods[119].selector = @selector(testSkipVeryLongQuotedString);
  methods[120].selector = @selector(testSkipTopLevelQuotedString);
  methods[121].selector = @selector(testStringAsNumberWithTruncatedExponent);
  methods[122].selector = @selector(testStringAsNumberWithDigitAndNonDigitExponent);
  methods[123].selector = @selector(testStringAsNumberWithNonDigitExponent);
  methods[124].selector = @selector(testEmptyStringName);
  methods[125].selector = @selector(testStrictExtraCommasInMaps);
  methods[126].selector = @selector(testLenientExtraCommasInMaps);
  methods[127].selector = @selector(repeatWithChar:withInt:);
  methods[128].selector = @selector(testMalformedDocuments);
  methods[129].selector = @selector(testUnterminatedStringFailure);
  methods[130].selector = @selector(assertDocumentWithNSString:withNSObjectArray:);
  methods[131].selector = @selector(readerWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoIOException;", "LJavaLangException;", "assertNotANumber", "LNSString;", "testFailWithPosition", "LNSString;LNSString;", "repeat", "CI", "assertDocument", "LNSString;[LNSObject;", "reader" };
  static const J2ObjcClassInfo _ComGoogleGsonStreamJsonReaderTest = { "JsonReaderTest", "com.google.gson.stream", ptrTable, methods, NULL, 7, 0x11, 132, 0, -1, -1, -1, -1, -1 };
  return &_ComGoogleGsonStreamJsonReaderTest;
}

@end

void ComGoogleGsonStreamJsonReaderTest_init(ComGoogleGsonStreamJsonReaderTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComGoogleGsonStreamJsonReaderTest *new_ComGoogleGsonStreamJsonReaderTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonStreamJsonReaderTest, init)
}

ComGoogleGsonStreamJsonReaderTest *create_ComGoogleGsonStreamJsonReaderTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonStreamJsonReaderTest, init)
}

void ComGoogleGsonStreamJsonReaderTest_assertNotANumberWithNSString_(ComGoogleGsonStreamJsonReaderTest *self, NSString *s) {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, JreStrcat("C$C", '[', s, ']')));
  [reader setLenientWithBoolean:true];
  [reader beginArray];
  JunitFrameworkTestCase_assertEqualsWithId_withId_(JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING), [reader peek]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(s, [reader nextString]);
  [reader endArray];
}

void ComGoogleGsonStreamJsonReaderTest_testFailWithPositionWithNSString_withNSString_(ComGoogleGsonStreamJsonReaderTest *self, NSString *message, NSString *json) {
  ComGoogleGsonStreamJsonReader *reader1 = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, json));
  [reader1 setLenientWithBoolean:true];
  [reader1 beginArray];
  [reader1 nextString];
  @try {
    [reader1 peek];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
    JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(message, [expected getMessage]);
  }
  ComGoogleGsonStreamJsonReader *reader2 = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, json));
  [reader2 setLenientWithBoolean:true];
  [reader2 beginArray];
  [reader2 skipValue];
  @try {
    [reader2 peek];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaIoIOException *expected) {
    JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(message, [expected getMessage]);
  }
}

NSString *ComGoogleGsonStreamJsonReaderTest_repeatWithChar_withInt_(ComGoogleGsonStreamJsonReaderTest *self, jchar c, jint count) {
  IOSCharArray *array = [IOSCharArray arrayWithLength:count];
  JavaUtilArrays_fillWithCharArray_withChar_(array, c);
  return [NSString java_stringWithCharacters:array];
}

void ComGoogleGsonStreamJsonReaderTest_assertDocumentWithNSString_withNSObjectArray_(ComGoogleGsonStreamJsonReaderTest *self, NSString *document, IOSObjectArray *expectations) {
  ComGoogleGsonStreamJsonReader *reader = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(self, document));
  [reader setLenientWithBoolean:true];
  {
    IOSObjectArray *a__ = expectations;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id expectation = *b__++;
      if (expectation == JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT)) {
        [reader beginObject];
      }
      else if (expectation == JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_ARRAY)) {
        [reader beginArray];
      }
      else if (expectation == JreLoadEnum(ComGoogleGsonStreamJsonToken, END_OBJECT)) {
        [reader endObject];
      }
      else if (expectation == JreLoadEnum(ComGoogleGsonStreamJsonToken, END_ARRAY)) {
        [reader endArray];
      }
      else if (expectation == JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME)) {
        JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"name", [reader nextName]);
      }
      else if (expectation == JreLoadEnum(ComGoogleGsonStreamJsonToken, BOOLEAN)) {
        JunitFrameworkTestCase_assertEqualsWithBoolean_withBoolean_(false, [reader nextBoolean]);
      }
      else if (expectation == JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING)) {
        JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"string", [reader nextString]);
      }
      else if (expectation == JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER)) {
        JunitFrameworkTestCase_assertEqualsWithInt_withInt_(123, [reader nextInt]);
      }
      else if (expectation == JreLoadEnum(ComGoogleGsonStreamJsonToken, NULL)) {
        [reader nextNull];
      }
      else if (expectation == JavaIoIOException_class_()) {
        @try {
          [reader peek];
          JunitFrameworkTestCase_fail();
        }
        @catch (JavaIoIOException *expected) {
        }
      }
      else {
        @throw create_JavaLangAssertionError_init();
      }
    }
  }
}

JavaIoReader *ComGoogleGsonStreamJsonReaderTest_readerWithNSString_(ComGoogleGsonStreamJsonReaderTest *self, NSString *s) {
  return create_JavaIoStringReader_initWithNSString_(s);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonStreamJsonReaderTest)
