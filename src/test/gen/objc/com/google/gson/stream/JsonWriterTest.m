//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java
//

#include "J2ObjC_source.h"
#include "com/google/gson/stream/JsonWriter.h"
#include "com/google/gson/stream/JsonWriterTest.h"
#include "java/io/StringWriter.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "junit/framework/TestCase.h"

@implementation ComGoogleGsonStreamJsonWriterTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonStreamJsonWriterTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)testWrongTopLevelType {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  @try {
    [jsonWriter valueWithNSString:@"a"];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
}

- (void)testTwoNames {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter beginObject];
  [jsonWriter nameWithNSString:@"a"];
  @try {
    [jsonWriter nameWithNSString:@"a"];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
}

- (void)testNameWithoutValue {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter beginObject];
  [jsonWriter nameWithNSString:@"a"];
  @try {
    [jsonWriter endObject];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
}

- (void)testValueWithoutName {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter beginObject];
  @try {
    [jsonWriter valueWithBoolean:true];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
}

- (void)testMultipleTopLevelValues {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [((ComGoogleGsonStreamJsonWriter *) nil_chk([jsonWriter beginArray])) endArray];
  @try {
    [jsonWriter beginArray];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
}

- (void)testBadNestingObject {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter beginArray];
  [jsonWriter beginObject];
  @try {
    [jsonWriter endArray];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
}

- (void)testBadNestingArray {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter beginArray];
  [jsonWriter beginArray];
  @try {
    [jsonWriter endObject];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
}

- (void)testNullName {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter beginObject];
  @try {
    [jsonWriter nameWithNSString:nil];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangNullPointerException *expected) {
  }
}

- (void)testNullStringValue {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter beginObject];
  [jsonWriter nameWithNSString:@"a"];
  [jsonWriter valueWithNSString:nil];
  [jsonWriter endObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"{\"a\":null}", [stringWriter description]);
}

- (void)testNonFiniteDoubles {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter beginArray];
  @try {
    [jsonWriter valueWithDouble:JavaLangDouble_NaN];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
  @try {
    [jsonWriter valueWithDouble:JavaLangDouble_NEGATIVE_INFINITY];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
  @try {
    [jsonWriter valueWithDouble:JavaLangDouble_POSITIVE_INFINITY];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
}

- (void)testNonFiniteBoxedDoubles {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter beginArray];
  @try {
    [jsonWriter valueWithNSNumber:create_JavaLangDouble_initWithDouble_(JavaLangDouble_NaN)];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
  @try {
    [jsonWriter valueWithNSNumber:create_JavaLangDouble_initWithDouble_(JavaLangDouble_NEGATIVE_INFINITY)];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
  @try {
    [jsonWriter valueWithNSNumber:create_JavaLangDouble_initWithDouble_(JavaLangDouble_POSITIVE_INFINITY)];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
}

- (void)testDoubles {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter beginArray];
  [jsonWriter valueWithDouble:-0.0];
  [jsonWriter valueWithDouble:1.0];
  [jsonWriter valueWithDouble:JavaLangDouble_MAX_VALUE];
  [jsonWriter valueWithDouble:JavaLangDouble_MIN_VALUE];
  [jsonWriter valueWithDouble:0.0];
  [jsonWriter valueWithDouble:-0.5];
  [jsonWriter valueWithDouble:2.2250738585072014E-308];
  [jsonWriter valueWithDouble:JavaLangMath_PI];
  [jsonWriter valueWithDouble:JavaLangMath_E];
  [jsonWriter endArray];
  [jsonWriter close];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[-0.0,1.0,1.7976931348623157E308,4.9E-324,0.0,-0.5,2.2250738585072014E-308,3.141592653589793,2.718281828459045]", [stringWriter description]);
}

- (void)testLongs {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter beginArray];
  [jsonWriter valueWithLong:0];
  [jsonWriter valueWithLong:1];
  [jsonWriter valueWithLong:-1];
  [jsonWriter valueWithLong:JavaLangLong_MIN_VALUE];
  [jsonWriter valueWithLong:JavaLangLong_MAX_VALUE];
  [jsonWriter endArray];
  [jsonWriter close];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[0,1,-1,-9223372036854775808,9223372036854775807]", [stringWriter description]);
}

- (void)testNumbers {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter beginArray];
  [jsonWriter valueWithNSNumber:create_JavaMathBigInteger_initWithNSString_(@"0")];
  [jsonWriter valueWithNSNumber:create_JavaMathBigInteger_initWithNSString_(@"9223372036854775808")];
  [jsonWriter valueWithNSNumber:create_JavaMathBigInteger_initWithNSString_(@"-9223372036854775809")];
  [jsonWriter valueWithNSNumber:create_JavaMathBigDecimal_initWithNSString_(@"3.141592653589793238462643383")];
  [jsonWriter endArray];
  [jsonWriter close];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[0,9223372036854775808,-9223372036854775809,3.141592653589793238462643383]", [stringWriter description]);
}

- (void)testBooleans {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter beginArray];
  [jsonWriter valueWithBoolean:true];
  [jsonWriter valueWithBoolean:false];
  [jsonWriter endArray];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[true,false]", [stringWriter description]);
}

- (void)testNulls {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter beginArray];
  [jsonWriter nullValue];
  [jsonWriter endArray];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[null]", [stringWriter description]);
}

- (void)testStrings {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter beginArray];
  [jsonWriter valueWithNSString:@"a"];
  [jsonWriter valueWithNSString:@"a\""];
  [jsonWriter valueWithNSString:@"\""];
  [jsonWriter valueWithNSString:@":"];
  [jsonWriter valueWithNSString:@","];
  [jsonWriter valueWithNSString:@"\x08"];
  [jsonWriter valueWithNSString:@"\x0c"];
  [jsonWriter valueWithNSString:@"\n"];
  [jsonWriter valueWithNSString:@"\x0d"];
  [jsonWriter valueWithNSString:@"\t"];
  [jsonWriter valueWithNSString:@" "];
  [jsonWriter valueWithNSString:@"\\"];
  [jsonWriter valueWithNSString:@"{"];
  [jsonWriter valueWithNSString:@"}"];
  [jsonWriter valueWithNSString:@"["];
  [jsonWriter valueWithNSString:@"]"];
  [jsonWriter valueWithNSString:@"\x00"];
  [jsonWriter valueWithNSString:@"\x19"];
  [jsonWriter endArray];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[\"a\",\"a\\\"\",\"\\\"\",\":\",\",\",\"\\b\",\"\\f\",\"\\n\",\"\\r\",\"\\t\",\" \",\"\\\\\",\"{\",\"}\",\"[\",\"]\",\"\\u0000\",\"\\u0019\"]", [stringWriter description]);
}

- (void)testUnicodeLineBreaksEscaped {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter beginArray];
  [jsonWriter valueWithNSString:@"\u2028 \u2029"];
  [jsonWriter endArray];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[\"\\u2028 \\u2029\"]", [stringWriter description]);
}

- (void)testEmptyArray {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter beginArray];
  [jsonWriter endArray];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[]", [stringWriter description]);
}

- (void)testEmptyObject {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter beginObject];
  [jsonWriter endObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"{}", [stringWriter description]);
}

- (void)testObjectsInArrays {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter beginArray];
  [jsonWriter beginObject];
  [((ComGoogleGsonStreamJsonWriter *) nil_chk([jsonWriter nameWithNSString:@"a"])) valueWithLong:5];
  [((ComGoogleGsonStreamJsonWriter *) nil_chk([jsonWriter nameWithNSString:@"b"])) valueWithBoolean:false];
  [jsonWriter endObject];
  [jsonWriter beginObject];
  [((ComGoogleGsonStreamJsonWriter *) nil_chk([jsonWriter nameWithNSString:@"c"])) valueWithLong:6];
  [((ComGoogleGsonStreamJsonWriter *) nil_chk([jsonWriter nameWithNSString:@"d"])) valueWithBoolean:true];
  [jsonWriter endObject];
  [jsonWriter endArray];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[{\"a\":5,\"b\":false},{\"c\":6,\"d\":true}]", [stringWriter description]);
}

- (void)testArraysInObjects {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter beginObject];
  [jsonWriter nameWithNSString:@"a"];
  [jsonWriter beginArray];
  [jsonWriter valueWithLong:5];
  [jsonWriter valueWithBoolean:false];
  [jsonWriter endArray];
  [jsonWriter nameWithNSString:@"b"];
  [jsonWriter beginArray];
  [jsonWriter valueWithLong:6];
  [jsonWriter valueWithBoolean:true];
  [jsonWriter endArray];
  [jsonWriter endObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"{\"a\":[5,false],\"b\":[6,true]}", [stringWriter description]);
}

- (void)testDeepNestingArrays {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  for (jint i = 0; i < 20; i++) {
    [jsonWriter beginArray];
  }
  for (jint i = 0; i < 20; i++) {
    [jsonWriter endArray];
  }
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", [stringWriter description]);
}

- (void)testDeepNestingObjects {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter beginObject];
  for (jint i = 0; i < 20; i++) {
    [jsonWriter nameWithNSString:@"a"];
    [jsonWriter beginObject];
  }
  for (jint i = 0; i < 20; i++) {
    [jsonWriter endObject];
  }
  [jsonWriter endObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{}}}}}}}}}}}}}}}}}}}}}", [stringWriter description]);
}

- (void)testRepeatedName {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter beginObject];
  [((ComGoogleGsonStreamJsonWriter *) nil_chk([jsonWriter nameWithNSString:@"a"])) valueWithBoolean:true];
  [((ComGoogleGsonStreamJsonWriter *) nil_chk([jsonWriter nameWithNSString:@"a"])) valueWithBoolean:false];
  [jsonWriter endObject];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"{\"a\":true,\"a\":false}", [stringWriter description]);
}

- (void)testPrettyPrintObject {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter setIndentWithNSString:@"   "];
  [jsonWriter beginObject];
  [((ComGoogleGsonStreamJsonWriter *) nil_chk([jsonWriter nameWithNSString:@"a"])) valueWithBoolean:true];
  [((ComGoogleGsonStreamJsonWriter *) nil_chk([jsonWriter nameWithNSString:@"b"])) valueWithBoolean:false];
  [((ComGoogleGsonStreamJsonWriter *) nil_chk([jsonWriter nameWithNSString:@"c"])) valueWithDouble:5.0];
  [((ComGoogleGsonStreamJsonWriter *) nil_chk([jsonWriter nameWithNSString:@"e"])) nullValue];
  [((ComGoogleGsonStreamJsonWriter *) nil_chk([jsonWriter nameWithNSString:@"f"])) beginArray];
  [jsonWriter valueWithDouble:6.0];
  [jsonWriter valueWithDouble:7.0];
  [jsonWriter endArray];
  [((ComGoogleGsonStreamJsonWriter *) nil_chk([jsonWriter nameWithNSString:@"g"])) beginObject];
  [((ComGoogleGsonStreamJsonWriter *) nil_chk([jsonWriter nameWithNSString:@"h"])) valueWithDouble:8.0];
  [((ComGoogleGsonStreamJsonWriter *) nil_chk([jsonWriter nameWithNSString:@"i"])) valueWithDouble:9.0];
  [jsonWriter endObject];
  [jsonWriter endObject];
  NSString *expected = @"{\n   \"a\": true,\n   \"b\": false,\n   \"c\": 5.0,\n   \"e\": null,\n   \"f\": [\n      6.0,\n      7.0\n   ],\n   \"g\": {\n      \"h\": 8.0,\n      \"i\": 9.0\n   }\n}";
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(expected, [stringWriter description]);
}

- (void)testPrettyPrintArray {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *jsonWriter = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [jsonWriter setIndentWithNSString:@"   "];
  [jsonWriter beginArray];
  [jsonWriter valueWithBoolean:true];
  [jsonWriter valueWithBoolean:false];
  [jsonWriter valueWithDouble:5.0];
  [jsonWriter nullValue];
  [jsonWriter beginObject];
  [((ComGoogleGsonStreamJsonWriter *) nil_chk([jsonWriter nameWithNSString:@"a"])) valueWithDouble:6.0];
  [((ComGoogleGsonStreamJsonWriter *) nil_chk([jsonWriter nameWithNSString:@"b"])) valueWithDouble:7.0];
  [jsonWriter endObject];
  [jsonWriter beginArray];
  [jsonWriter valueWithDouble:8.0];
  [jsonWriter valueWithDouble:9.0];
  [jsonWriter endArray];
  [jsonWriter endArray];
  NSString *expected = @"[\n   true,\n   false,\n   5.0,\n   null,\n   {\n      \"a\": 6.0,\n      \"b\": 7.0\n   },\n   [\n      8.0,\n      9.0\n   ]\n]";
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(expected, [stringWriter description]);
}

- (void)testLenientWriterPermitsMultipleTopLevelValues {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *writer = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [writer setLenientWithBoolean:true];
  [writer beginArray];
  [writer endArray];
  [writer beginArray];
  [writer endArray];
  [writer close];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"[][]", [stringWriter description]);
}

- (void)testStrictWriterDoesNotPermitMultipleTopLevelValues {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *writer = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [writer beginArray];
  [writer endArray];
  @try {
    [writer beginArray];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
}

- (void)testClosedWriterThrowsOnStructure {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *writer = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [writer beginArray];
  [writer endArray];
  [writer close];
  @try {
    [writer beginArray];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    [writer endArray];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    [writer beginObject];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
  @try {
    [writer endObject];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
}

- (void)testClosedWriterThrowsOnName {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *writer = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [writer beginArray];
  [writer endArray];
  [writer close];
  @try {
    [writer nameWithNSString:@"a"];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
}

- (void)testClosedWriterThrowsOnValue {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *writer = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [writer beginArray];
  [writer endArray];
  [writer close];
  @try {
    [writer valueWithNSString:@"a"];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
}

- (void)testClosedWriterThrowsOnFlush {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *writer = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [writer beginArray];
  [writer endArray];
  [writer close];
  @try {
    [writer flush];
    JunitFrameworkTestCase_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
}

- (void)testWriterCloseIsIdempotent {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  ComGoogleGsonStreamJsonWriter *writer = create_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(stringWriter);
  [writer beginArray];
  [writer endArray];
  [writer close];
  [writer close];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(testWrongTopLevelType);
  methods[2].selector = @selector(testTwoNames);
  methods[3].selector = @selector(testNameWithoutValue);
  methods[4].selector = @selector(testValueWithoutName);
  methods[5].selector = @selector(testMultipleTopLevelValues);
  methods[6].selector = @selector(testBadNestingObject);
  methods[7].selector = @selector(testBadNestingArray);
  methods[8].selector = @selector(testNullName);
  methods[9].selector = @selector(testNullStringValue);
  methods[10].selector = @selector(testNonFiniteDoubles);
  methods[11].selector = @selector(testNonFiniteBoxedDoubles);
  methods[12].selector = @selector(testDoubles);
  methods[13].selector = @selector(testLongs);
  methods[14].selector = @selector(testNumbers);
  methods[15].selector = @selector(testBooleans);
  methods[16].selector = @selector(testNulls);
  methods[17].selector = @selector(testStrings);
  methods[18].selector = @selector(testUnicodeLineBreaksEscaped);
  methods[19].selector = @selector(testEmptyArray);
  methods[20].selector = @selector(testEmptyObject);
  methods[21].selector = @selector(testObjectsInArrays);
  methods[22].selector = @selector(testArraysInObjects);
  methods[23].selector = @selector(testDeepNestingArrays);
  methods[24].selector = @selector(testDeepNestingObjects);
  methods[25].selector = @selector(testRepeatedName);
  methods[26].selector = @selector(testPrettyPrintObject);
  methods[27].selector = @selector(testPrettyPrintArray);
  methods[28].selector = @selector(testLenientWriterPermitsMultipleTopLevelValues);
  methods[29].selector = @selector(testStrictWriterDoesNotPermitMultipleTopLevelValues);
  methods[30].selector = @selector(testClosedWriterThrowsOnStructure);
  methods[31].selector = @selector(testClosedWriterThrowsOnName);
  methods[32].selector = @selector(testClosedWriterThrowsOnValue);
  methods[33].selector = @selector(testClosedWriterThrowsOnFlush);
  methods[34].selector = @selector(testWriterCloseIsIdempotent);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoIOException;" };
  static const J2ObjcClassInfo _ComGoogleGsonStreamJsonWriterTest = { "JsonWriterTest", "com.google.gson.stream", ptrTable, methods, NULL, 7, 0x11, 35, 0, -1, -1, -1, -1, -1 };
  return &_ComGoogleGsonStreamJsonWriterTest;
}

@end

void ComGoogleGsonStreamJsonWriterTest_init(ComGoogleGsonStreamJsonWriterTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComGoogleGsonStreamJsonWriterTest *new_ComGoogleGsonStreamJsonWriterTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonStreamJsonWriterTest, init)
}

ComGoogleGsonStreamJsonWriterTest *create_ComGoogleGsonStreamJsonWriterTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonStreamJsonWriterTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonStreamJsonWriterTest)
