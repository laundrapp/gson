//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/JsonParserTest.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/gson/Gson.h"
#include "com/google/gson/JsonArray.h"
#include "com/google/gson/JsonElement.h"
#include "com/google/gson/JsonObject.h"
#include "com/google/gson/JsonParser.h"
#include "com/google/gson/JsonParserTest.h"
#include "com/google/gson/JsonSyntaxException.h"
#include "com/google/gson/common/TestTypes.h"
#include "com/google/gson/internal/Streams.h"
#include "com/google/gson/stream/JsonReader.h"
#include "java/io/CharArrayReader.h"
#include "java/io/CharArrayWriter.h"
#include "java/io/StringReader.h"
#include "junit/framework/TestCase.h"

@interface ComGoogleGsonJsonParserTest () {
 @public
  ComGoogleGsonJsonParser *parser_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleGsonJsonParserTest, parser_, ComGoogleGsonJsonParser *)

@implementation ComGoogleGsonJsonParserTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonJsonParserTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  [super setUp];
  JreStrongAssignAndConsume(&parser_, new_ComGoogleGsonJsonParser_init());
}

- (void)testParseInvalidJson {
  @try {
    [((ComGoogleGsonJsonParser *) nil_chk(parser_)) parseWithNSString:@"[[]"];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testParseUnquotedStringArrayFails {
  ComGoogleGsonJsonElement *element = [((ComGoogleGsonJsonParser *) nil_chk(parser_)) parseWithNSString:@"[a,b,c]"];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"a", [((ComGoogleGsonJsonElement *) nil_chk([((ComGoogleGsonJsonArray *) nil_chk([((ComGoogleGsonJsonElement *) nil_chk(element)) getAsJsonArray])) getWithInt:0])) getAsString]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"b", [((ComGoogleGsonJsonElement *) nil_chk([((ComGoogleGsonJsonArray *) nil_chk([element getAsJsonArray])) getWithInt:1])) getAsString]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"c", [((ComGoogleGsonJsonElement *) nil_chk([((ComGoogleGsonJsonArray *) nil_chk([element getAsJsonArray])) getWithInt:2])) getAsString]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(3, [((ComGoogleGsonJsonArray *) nil_chk([element getAsJsonArray])) size]);
}

- (void)testParseString {
  NSString *json = @"{a:10,b:'c'}";
  ComGoogleGsonJsonElement *e = [((ComGoogleGsonJsonParser *) nil_chk(parser_)) parseWithNSString:json];
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonJsonElement *) nil_chk(e)) isJsonObject]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(10, [((ComGoogleGsonJsonElement *) nil_chk([((ComGoogleGsonJsonObject *) nil_chk([e getAsJsonObject])) getWithNSString:@"a"])) getAsInt]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"c", [((ComGoogleGsonJsonElement *) nil_chk([((ComGoogleGsonJsonObject *) nil_chk([e getAsJsonObject])) getWithNSString:@"b"])) getAsString]);
}

- (void)testParseEmptyString {
  ComGoogleGsonJsonElement *e = [((ComGoogleGsonJsonParser *) nil_chk(parser_)) parseWithNSString:@"\"   \""];
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonJsonElement *) nil_chk(e)) isJsonPrimitive]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"   ", [e getAsString]);
}

- (void)testParseEmptyWhitespaceInput {
  ComGoogleGsonJsonElement *e = [((ComGoogleGsonJsonParser *) nil_chk(parser_)) parseWithNSString:@"     "];
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonJsonElement *) nil_chk(e)) isJsonNull]);
}

- (void)testParseUnquotedSingleWordStringFails {
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"Test", [((ComGoogleGsonJsonElement *) nil_chk([((ComGoogleGsonJsonParser *) nil_chk(parser_)) parseWithNSString:@"Test"])) getAsString]);
}

- (void)testParseUnquotedMultiWordStringFails {
  NSString *unquotedSentence = @"Test is a test..blah blah";
  @try {
    [((ComGoogleGsonJsonParser *) nil_chk(parser_)) parseWithNSString:unquotedSentence];
    JunitFrameworkTestCase_fail();
  }
  @catch (ComGoogleGsonJsonSyntaxException *expected) {
  }
}

- (void)testParseMixedArray {
  NSString *json = @"[{},13,\"stringValue\"]";
  ComGoogleGsonJsonElement *e = [((ComGoogleGsonJsonParser *) nil_chk(parser_)) parseWithNSString:json];
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonJsonElement *) nil_chk(e)) isJsonArray]);
  ComGoogleGsonJsonArray *array = [e getAsJsonArray];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"{}", [((ComGoogleGsonJsonElement *) nil_chk([((ComGoogleGsonJsonArray *) nil_chk(array)) getWithInt:0])) description]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(13, [((ComGoogleGsonJsonElement *) nil_chk([array getWithInt:1])) getAsInt]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"stringValue", [((ComGoogleGsonJsonElement *) nil_chk([array getWithInt:2])) getAsString]);
}

- (void)testParseReader {
  JavaIoStringReader *reader = create_JavaIoStringReader_initWithNSString_(@"{a:10,b:'c'}");
  ComGoogleGsonJsonElement *e = [((ComGoogleGsonJsonParser *) nil_chk(parser_)) parseWithJavaIoReader:reader];
  JunitFrameworkTestCase_assertTrueWithBoolean_([((ComGoogleGsonJsonElement *) nil_chk(e)) isJsonObject]);
  JunitFrameworkTestCase_assertEqualsWithInt_withInt_(10, [((ComGoogleGsonJsonElement *) nil_chk([((ComGoogleGsonJsonObject *) nil_chk([e getAsJsonObject])) getWithNSString:@"a"])) getAsInt]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"c", [((ComGoogleGsonJsonElement *) nil_chk([((ComGoogleGsonJsonObject *) nil_chk([e getAsJsonObject])) getWithNSString:@"b"])) getAsString]);
}

- (void)testReadWriteTwoObjects {
  ComGoogleGsonGson *gson = create_ComGoogleGsonGson_init();
  JavaIoCharArrayWriter *writer = create_JavaIoCharArrayWriter_init();
  ComGoogleGsonCommonTestTypes_BagOfPrimitives *expectedOne = create_ComGoogleGsonCommonTestTypes_BagOfPrimitives_initWithLong_withInt_withBoolean_withNSString_(1, 1, true, @"one");
  [writer writeWithCharArray:[((NSString *) nil_chk([gson toJsonWithId:expectedOne])) java_toCharArray]];
  ComGoogleGsonCommonTestTypes_BagOfPrimitives *expectedTwo = create_ComGoogleGsonCommonTestTypes_BagOfPrimitives_initWithLong_withInt_withBoolean_withNSString_(2, 2, false, @"two");
  [writer writeWithCharArray:[((NSString *) nil_chk([gson toJsonWithId:expectedTwo])) java_toCharArray]];
  JavaIoCharArrayReader *reader = create_JavaIoCharArrayReader_initWithCharArray_([writer toCharArray]);
  ComGoogleGsonStreamJsonReader *parser = create_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(reader);
  [parser setLenientWithBoolean:true];
  ComGoogleGsonJsonElement *element1 = ComGoogleGsonInternalStreams_parseWithComGoogleGsonStreamJsonReader_(parser);
  ComGoogleGsonJsonElement *element2 = ComGoogleGsonInternalStreams_parseWithComGoogleGsonStreamJsonReader_(parser);
  ComGoogleGsonCommonTestTypes_BagOfPrimitives *actualOne = [gson fromJsonWithComGoogleGsonJsonElement:element1 withIOSClass:ComGoogleGsonCommonTestTypes_BagOfPrimitives_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"one", ((ComGoogleGsonCommonTestTypes_BagOfPrimitives *) nil_chk(actualOne))->stringValue_);
  ComGoogleGsonCommonTestTypes_BagOfPrimitives *actualTwo = [gson fromJsonWithComGoogleGsonJsonElement:element2 withIOSClass:ComGoogleGsonCommonTestTypes_BagOfPrimitives_class_()];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(@"two", ((ComGoogleGsonCommonTestTypes_BagOfPrimitives *) nil_chk(actualTwo))->stringValue_);
}

- (void)dealloc {
  RELEASE_(parser_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(testParseInvalidJson);
  methods[3].selector = @selector(testParseUnquotedStringArrayFails);
  methods[4].selector = @selector(testParseString);
  methods[5].selector = @selector(testParseEmptyString);
  methods[6].selector = @selector(testParseEmptyWhitespaceInput);
  methods[7].selector = @selector(testParseUnquotedSingleWordStringFails);
  methods[8].selector = @selector(testParseUnquotedMultiWordStringFails);
  methods[9].selector = @selector(testParseMixedArray);
  methods[10].selector = @selector(testParseReader);
  methods[11].selector = @selector(testReadWriteTwoObjects);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parser_", "LComGoogleGsonJsonParser;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;" };
  static const J2ObjcClassInfo _ComGoogleGsonJsonParserTest = { "JsonParserTest", "com.google.gson", ptrTable, methods, fields, 7, 0x1, 12, 1, -1, -1, -1, -1, -1 };
  return &_ComGoogleGsonJsonParserTest;
}

@end

void ComGoogleGsonJsonParserTest_init(ComGoogleGsonJsonParserTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComGoogleGsonJsonParserTest *new_ComGoogleGsonJsonParserTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonJsonParserTest, init)
}

ComGoogleGsonJsonParserTest *create_ComGoogleGsonJsonParserTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonJsonParserTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonJsonParserTest)
