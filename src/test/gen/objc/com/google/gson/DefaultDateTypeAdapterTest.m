//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/google/gson/DefaultDateTypeAdapter.h"
#include "com/google/gson/DefaultDateTypeAdapterTest.h"
#include "com/google/gson/JsonElement.h"
#include "com/google/gson/JsonPrimitive.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/text/DateFormat.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "junit/framework/TestCase.h"

@interface ComGoogleGsonDefaultDateTypeAdapterTest ()

- (void)assertFormattingAlwaysEmitsUsLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)assertFormattedWithNSString:(NSString *)formatted
withComGoogleGsonDefaultDateTypeAdapter:(ComGoogleGsonDefaultDateTypeAdapter *)adapter;

- (void)assertParsedWithNSString:(NSString *)date
withComGoogleGsonDefaultDateTypeAdapter:(ComGoogleGsonDefaultDateTypeAdapter *)adapter;

@end

__attribute__((unused)) static void ComGoogleGsonDefaultDateTypeAdapterTest_assertFormattingAlwaysEmitsUsLocaleWithJavaUtilLocale_(ComGoogleGsonDefaultDateTypeAdapterTest *self, JavaUtilLocale *locale);

__attribute__((unused)) static void ComGoogleGsonDefaultDateTypeAdapterTest_assertFormattedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(ComGoogleGsonDefaultDateTypeAdapterTest *self, NSString *formatted, ComGoogleGsonDefaultDateTypeAdapter *adapter);

__attribute__((unused)) static void ComGoogleGsonDefaultDateTypeAdapterTest_assertParsedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(ComGoogleGsonDefaultDateTypeAdapterTest *self, NSString *date, ComGoogleGsonDefaultDateTypeAdapter *adapter);

@implementation ComGoogleGsonDefaultDateTypeAdapterTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComGoogleGsonDefaultDateTypeAdapterTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)testFormattingInEnUs {
  ComGoogleGsonDefaultDateTypeAdapterTest_assertFormattingAlwaysEmitsUsLocaleWithJavaUtilLocale_(self, JreLoadStatic(JavaUtilLocale, US));
}

- (void)testFormattingInFr {
  ComGoogleGsonDefaultDateTypeAdapterTest_assertFormattingAlwaysEmitsUsLocaleWithJavaUtilLocale_(self, JreLoadStatic(JavaUtilLocale, FRANCE));
}

- (void)assertFormattingAlwaysEmitsUsLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  ComGoogleGsonDefaultDateTypeAdapterTest_assertFormattingAlwaysEmitsUsLocaleWithJavaUtilLocale_(self, locale);
}

- (void)testParsingDatesFormattedWithSystemLocale {
  JavaUtilTimeZone *defaultTimeZone = JavaUtilTimeZone_getDefault();
  JavaUtilTimeZone_setDefaultWithJavaUtilTimeZone_(JavaUtilTimeZone_getTimeZoneWithNSString_(@"UTC"));
  JavaUtilLocale *defaultLocale = JavaUtilLocale_getDefault();
  JavaUtilLocale_setDefaultWithJavaUtilLocale_(JreLoadStatic(JavaUtilLocale, FRANCE));
  @try {
    ComGoogleGsonDefaultDateTypeAdapterTest_assertParsedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"1 janv. 1970 00:00:00", create_ComGoogleGsonDefaultDateTypeAdapter_init());
    ComGoogleGsonDefaultDateTypeAdapterTest_assertParsedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"01/01/70", create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_(JavaTextDateFormat_SHORT));
    ComGoogleGsonDefaultDateTypeAdapterTest_assertParsedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"1 janv. 1970", create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_(JavaTextDateFormat_MEDIUM));
    ComGoogleGsonDefaultDateTypeAdapterTest_assertParsedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"1 janvier 1970", create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_(JavaTextDateFormat_LONG));
    ComGoogleGsonDefaultDateTypeAdapterTest_assertParsedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"01/01/70 00:00", create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_withInt_(JavaTextDateFormat_SHORT, JavaTextDateFormat_SHORT));
    ComGoogleGsonDefaultDateTypeAdapterTest_assertParsedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"1 janv. 1970 00:00:00", create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_withInt_(JavaTextDateFormat_MEDIUM, JavaTextDateFormat_MEDIUM));
    ComGoogleGsonDefaultDateTypeAdapterTest_assertParsedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"1 janvier 1970 00:00:00 UTC", create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_withInt_(JavaTextDateFormat_LONG, JavaTextDateFormat_LONG));
    ComGoogleGsonDefaultDateTypeAdapterTest_assertParsedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"jeudi 1 janvier 1970 00 h 00 UTC", create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_withInt_(JavaTextDateFormat_FULL, JavaTextDateFormat_FULL));
  }
  @finally {
    JavaUtilTimeZone_setDefaultWithJavaUtilTimeZone_(defaultTimeZone);
    JavaUtilLocale_setDefaultWithJavaUtilLocale_(defaultLocale);
  }
}

- (void)testParsingDatesFormattedWithUsLocale {
  JavaUtilTimeZone *defaultTimeZone = JavaUtilTimeZone_getDefault();
  JavaUtilTimeZone_setDefaultWithJavaUtilTimeZone_(JavaUtilTimeZone_getTimeZoneWithNSString_(@"UTC"));
  JavaUtilLocale *defaultLocale = JavaUtilLocale_getDefault();
  JavaUtilLocale_setDefaultWithJavaUtilLocale_(JreLoadStatic(JavaUtilLocale, US));
  @try {
    ComGoogleGsonDefaultDateTypeAdapterTest_assertParsedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"Jan 1, 1970 0:00:00 AM", create_ComGoogleGsonDefaultDateTypeAdapter_init());
    ComGoogleGsonDefaultDateTypeAdapterTest_assertParsedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"1/1/70", create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_(JavaTextDateFormat_SHORT));
    ComGoogleGsonDefaultDateTypeAdapterTest_assertParsedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"Jan 1, 1970", create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_(JavaTextDateFormat_MEDIUM));
    ComGoogleGsonDefaultDateTypeAdapterTest_assertParsedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"January 1, 1970", create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_(JavaTextDateFormat_LONG));
    ComGoogleGsonDefaultDateTypeAdapterTest_assertParsedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"1/1/70 0:00 AM", create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_withInt_(JavaTextDateFormat_SHORT, JavaTextDateFormat_SHORT));
    ComGoogleGsonDefaultDateTypeAdapterTest_assertParsedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"Jan 1, 1970 0:00:00 AM", create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_withInt_(JavaTextDateFormat_MEDIUM, JavaTextDateFormat_MEDIUM));
    ComGoogleGsonDefaultDateTypeAdapterTest_assertParsedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"January 1, 1970 0:00:00 AM UTC", create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_withInt_(JavaTextDateFormat_LONG, JavaTextDateFormat_LONG));
    ComGoogleGsonDefaultDateTypeAdapterTest_assertParsedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"Thursday, January 1, 1970 0:00:00 AM UTC", create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_withInt_(JavaTextDateFormat_FULL, JavaTextDateFormat_FULL));
  }
  @finally {
    JavaUtilTimeZone_setDefaultWithJavaUtilTimeZone_(defaultTimeZone);
    JavaUtilLocale_setDefaultWithJavaUtilLocale_(defaultLocale);
  }
}

- (void)testFormatUsesDefaultTimezone {
  JavaUtilTimeZone *defaultTimeZone = JavaUtilTimeZone_getDefault();
  JavaUtilTimeZone_setDefaultWithJavaUtilTimeZone_(JavaUtilTimeZone_getTimeZoneWithNSString_(@"America/Los_Angeles"));
  JavaUtilLocale *defaultLocale = JavaUtilLocale_getDefault();
  JavaUtilLocale_setDefaultWithJavaUtilLocale_(JreLoadStatic(JavaUtilLocale, US));
  @try {
    ComGoogleGsonDefaultDateTypeAdapterTest_assertFormattedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"Dec 31, 1969 4:00:00 PM", create_ComGoogleGsonDefaultDateTypeAdapter_init());
    ComGoogleGsonDefaultDateTypeAdapterTest_assertParsedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"Dec 31, 1969 4:00:00 PM", create_ComGoogleGsonDefaultDateTypeAdapter_init());
  }
  @finally {
    JavaUtilTimeZone_setDefaultWithJavaUtilTimeZone_(defaultTimeZone);
    JavaUtilLocale_setDefaultWithJavaUtilLocale_(defaultLocale);
  }
}

- (void)testDateSerialization {
  jint dateStyle = JavaTextDateFormat_LONG;
  ComGoogleGsonDefaultDateTypeAdapter *dateTypeAdapter = create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_(dateStyle);
  JavaTextDateFormat *formatter = JavaTextDateFormat_getDateInstanceWithInt_withJavaUtilLocale_(dateStyle, JreLoadStatic(JavaUtilLocale, US));
  JavaUtilDate *currentDate = create_JavaUtilDate_init();
  NSString *dateString = [((ComGoogleGsonJsonElement *) nil_chk([dateTypeAdapter serializeWithId:currentDate withJavaLangReflectType:JavaUtilDate_class_() withComGoogleGsonJsonSerializationContext:nil])) getAsString];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_([((JavaTextDateFormat *) nil_chk(formatter)) formatWithJavaUtilDate:currentDate], dateString);
}

- (void)testDatePattern {
  NSString *pattern = @"yyyy-MM-dd";
  ComGoogleGsonDefaultDateTypeAdapter *dateTypeAdapter = create_ComGoogleGsonDefaultDateTypeAdapter_initWithNSString_(pattern);
  JavaTextDateFormat *formatter = create_JavaTextSimpleDateFormat_initWithNSString_(pattern);
  JavaUtilDate *currentDate = create_JavaUtilDate_init();
  NSString *dateString = [((ComGoogleGsonJsonElement *) nil_chk([dateTypeAdapter serializeWithId:currentDate withJavaLangReflectType:JavaUtilDate_class_() withComGoogleGsonJsonSerializationContext:nil])) getAsString];
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_([formatter formatWithJavaUtilDate:currentDate], dateString);
}

- (void)testInvalidDatePattern {
  @try {
    create_ComGoogleGsonDefaultDateTypeAdapter_initWithNSString_(@"I am a bad Date pattern....");
    JunitFrameworkTestCase_failWithNSString_(@"Invalid date pattern should fail.");
  }
  @catch (JavaLangIllegalArgumentException *expected) {
  }
}

- (void)assertFormattedWithNSString:(NSString *)formatted
withComGoogleGsonDefaultDateTypeAdapter:(ComGoogleGsonDefaultDateTypeAdapter *)adapter {
  ComGoogleGsonDefaultDateTypeAdapterTest_assertFormattedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, formatted, adapter);
}

- (void)assertParsedWithNSString:(NSString *)date
withComGoogleGsonDefaultDateTypeAdapter:(ComGoogleGsonDefaultDateTypeAdapter *)adapter {
  ComGoogleGsonDefaultDateTypeAdapterTest_assertParsedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, date, adapter);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(testFormattingInEnUs);
  methods[2].selector = @selector(testFormattingInFr);
  methods[3].selector = @selector(assertFormattingAlwaysEmitsUsLocaleWithJavaUtilLocale:);
  methods[4].selector = @selector(testParsingDatesFormattedWithSystemLocale);
  methods[5].selector = @selector(testParsingDatesFormattedWithUsLocale);
  methods[6].selector = @selector(testFormatUsesDefaultTimezone);
  methods[7].selector = @selector(testDateSerialization);
  methods[8].selector = @selector(testDatePattern);
  methods[9].selector = @selector(testInvalidDatePattern);
  methods[10].selector = @selector(assertFormattedWithNSString:withComGoogleGsonDefaultDateTypeAdapter:);
  methods[11].selector = @selector(assertParsedWithNSString:withComGoogleGsonDefaultDateTypeAdapter:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "assertFormattingAlwaysEmitsUsLocale", "LJavaUtilLocale;", "LJavaLangException;", "assertFormatted", "LNSString;LComGoogleGsonDefaultDateTypeAdapter;", "assertParsed" };
  static const J2ObjcClassInfo _ComGoogleGsonDefaultDateTypeAdapterTest = { "DefaultDateTypeAdapterTest", "com.google.gson", ptrTable, methods, NULL, 7, 0x1, 12, 0, -1, -1, -1, -1, -1 };
  return &_ComGoogleGsonDefaultDateTypeAdapterTest;
}

@end

void ComGoogleGsonDefaultDateTypeAdapterTest_init(ComGoogleGsonDefaultDateTypeAdapterTest *self) {
  JunitFrameworkTestCase_init(self);
}

ComGoogleGsonDefaultDateTypeAdapterTest *new_ComGoogleGsonDefaultDateTypeAdapterTest_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonDefaultDateTypeAdapterTest, init)
}

ComGoogleGsonDefaultDateTypeAdapterTest *create_ComGoogleGsonDefaultDateTypeAdapterTest_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonDefaultDateTypeAdapterTest, init)
}

void ComGoogleGsonDefaultDateTypeAdapterTest_assertFormattingAlwaysEmitsUsLocaleWithJavaUtilLocale_(ComGoogleGsonDefaultDateTypeAdapterTest *self, JavaUtilLocale *locale) {
  JavaUtilTimeZone *defaultTimeZone = JavaUtilTimeZone_getDefault();
  JavaUtilTimeZone_setDefaultWithJavaUtilTimeZone_(JavaUtilTimeZone_getTimeZoneWithNSString_(@"UTC"));
  JavaUtilLocale *defaultLocale = JavaUtilLocale_getDefault();
  JavaUtilLocale_setDefaultWithJavaUtilLocale_(locale);
  @try {
    ComGoogleGsonDefaultDateTypeAdapterTest_assertFormattedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"Jan 1, 1970 12:00:00 AM", create_ComGoogleGsonDefaultDateTypeAdapter_init());
    ComGoogleGsonDefaultDateTypeAdapterTest_assertFormattedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"1/1/70", create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_(JavaTextDateFormat_SHORT));
    ComGoogleGsonDefaultDateTypeAdapterTest_assertFormattedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"Jan 1, 1970", create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_(JavaTextDateFormat_MEDIUM));
    ComGoogleGsonDefaultDateTypeAdapterTest_assertFormattedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"January 1, 1970", create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_(JavaTextDateFormat_LONG));
    ComGoogleGsonDefaultDateTypeAdapterTest_assertFormattedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"1/1/70 12:00 AM", create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_withInt_(JavaTextDateFormat_SHORT, JavaTextDateFormat_SHORT));
    ComGoogleGsonDefaultDateTypeAdapterTest_assertFormattedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"Jan 1, 1970 12:00:00 AM", create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_withInt_(JavaTextDateFormat_MEDIUM, JavaTextDateFormat_MEDIUM));
    ComGoogleGsonDefaultDateTypeAdapterTest_assertFormattedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"January 1, 1970 12:00:00 AM UTC", create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_withInt_(JavaTextDateFormat_LONG, JavaTextDateFormat_LONG));
    ComGoogleGsonDefaultDateTypeAdapterTest_assertFormattedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(self, @"Thursday, January 1, 1970 12:00:00 AM UTC", create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_withInt_(JavaTextDateFormat_FULL, JavaTextDateFormat_FULL));
  }
  @finally {
    JavaUtilTimeZone_setDefaultWithJavaUtilTimeZone_(defaultTimeZone);
    JavaUtilLocale_setDefaultWithJavaUtilLocale_(defaultLocale);
  }
}

void ComGoogleGsonDefaultDateTypeAdapterTest_assertFormattedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(ComGoogleGsonDefaultDateTypeAdapterTest *self, NSString *formatted, ComGoogleGsonDefaultDateTypeAdapter *adapter) {
  JunitFrameworkTestCase_assertEqualsWithNSString_withNSString_(formatted, [((ComGoogleGsonJsonElement *) nil_chk([((ComGoogleGsonDefaultDateTypeAdapter *) nil_chk(adapter)) serializeWithId:create_JavaUtilDate_initWithLong_(0) withJavaLangReflectType:JavaUtilDate_class_() withComGoogleGsonJsonSerializationContext:nil])) getAsString]);
}

void ComGoogleGsonDefaultDateTypeAdapterTest_assertParsedWithNSString_withComGoogleGsonDefaultDateTypeAdapter_(ComGoogleGsonDefaultDateTypeAdapterTest *self, NSString *date, ComGoogleGsonDefaultDateTypeAdapter *adapter) {
  JunitFrameworkTestCase_assertEqualsWithNSString_withId_withId_(date, create_JavaUtilDate_initWithLong_(0), [((ComGoogleGsonDefaultDateTypeAdapter *) nil_chk(adapter)) deserializeWithComGoogleGsonJsonElement:create_ComGoogleGsonJsonPrimitive_initWithNSString_(date) withJavaLangReflectType:JavaUtilDate_class_() withComGoogleGsonJsonDeserializationContext:nil]);
  JunitFrameworkTestCase_assertEqualsWithNSString_withId_withId_(@"ISO 8601", create_JavaUtilDate_initWithLong_(0), [adapter deserializeWithComGoogleGsonJsonElement:create_ComGoogleGsonJsonPrimitive_initWithNSString_(@"1970-01-01T00:00:00Z") withJavaLangReflectType:JavaUtilDate_class_() withComGoogleGsonJsonDeserializationContext:nil]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonDefaultDateTypeAdapterTest)
